<!-- preamble start -->
<!DOCTYPE html> 
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>tinytable</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
  </head>
  <body>
<!-- preamble end -->

    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <script>
    MathJax = {
      tex: {
        inlineMath: [['$', '$'], ['\\(', '\\)']]
      },
      svg: {
        fontCache: 'global'
      }
    };
    </script>
    <script>
      function tinytable(tableId, cellCoordinates, cssClass) {
            var table = document.getElementById("tinytable");
            cellCoordinates.forEach(([i, j]) => {
                table.rows[i].cells[j].classList.add(cssClass);
            });
        }

      function insertSpanRow(i, colspan, content) {
        var table = document.getElementById('tinytable');
        var newRow = table.insertRow(i);
        var newCell = newRow.insertCell(0);
        newCell.setAttribute("colspan", colspan);
        // newCell.innerText = content;
        // this may be unsafe, but innerText does not interpret <br>
        newCell.innerHTML = content;
      }
      function spanCell_tinytable(i, j, rowspan, colspan) {
        var table = document.getElementById("tinytable");
        const targetRow = table.rows[i];
        const targetCell = targetRow.cells[j];
        for (let r = 0; r < rowspan; r++) {
          // Only start deleting cells to the right for the first row (r == 0)
          if (r === 0) {
            // Delete cells to the right of the target cell in the first row
            for (let c = colspan - 1; c > 0; c--) {
              if (table.rows[i + r].cells[j + c]) {
                table.rows[i + r].deleteCell(j + c);
              }
            }
          }
          // For rows below the first, delete starting from the target column
          if (r > 0) {
            for (let c = colspan - 1; c >= 0; c--) {
              if (table.rows[i + r] && table.rows[i + r].cells[j]) {
                table.rows[i + r].deleteCell(j);
              }
            }
          }
        }
        // Set rowspan and colspan of the target cell
        targetCell.rowSpan = rowspan;
        targetCell.colSpan = colspan;
      }

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[3, 3]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[2, 0]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[1, 2]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[2, 1]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[1, 4]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[2, 2]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[0, 4]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[3, 1]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[3, 0]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[1, 3]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[0, 1]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[3, 4]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[2, 4]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[0, 2]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[2, 3]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[0, 0]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[0, 3]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[3, 2]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[1, 0]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });

     window.addEventListener('load', function () {
         const cellStyles = [
             {coords: [[1, 1]], class: 'tinytable'},
         ];
         cellStyles.forEach(({coords, class: cssClass}) => {
             tinytable('tinytable', coords, cssClass);
         });
     });
    </script>

    <style>
.table td.tinytable, .table th.tinytable {    font-size: 1em; color: #FFFE9E; background-color: #040404; }
.table td.tinytable, .table th.tinytable {    font-size: 2em; color: #FFFE9E; background-color: #120E2A; }
.table td.tinytable, .table th.tinytable {    font-size: 3em; color: #FFFE9E; background-color: #25123D; }
.table td.tinytable, .table th.tinytable {    font-size: 4em; color: #FFFE9E; background-color: #3A134C; }
.table td.tinytable, .table th.tinytable {    font-size: 5em; color: #FFFE9E; background-color: #50125A; }
.table td.tinytable, .table th.tinytable {    font-size: 6em; color: #FFFE9E; background-color: #671065; }
.table td.tinytable, .table th.tinytable {    font-size: 7em; color: #FFFE9E; background-color: #7D106E; }
.table td.tinytable, .table th.tinytable {    font-size: 8em; color: #FFFE9E; background-color: #931473; }
.table td.tinytable, .table th.tinytable {    font-size: 9em; color: #FFFE9E; background-color: #A81D75; }
.table td.tinytable, .table th.tinytable {    font-size: 10em; color: #FFFE9E; background-color: #BC2A73; }
.table td.tinytable, .table th.tinytable {    font-size: 11em; color: #FFFE9E; background-color: #CE3A6C; }
.table td.tinytable, .table th.tinytable {    font-size: 12em; color: #FFFE9E; background-color: #DE4B5F; }
.table td.tinytable, .table th.tinytable {    font-size: 13em; color: #FFFE9E; background-color: #ED5E48; }
.table td.tinytable, .table th.tinytable {    font-size: 14em; color: #FFFE9E; background-color: #F3762F; }
.table td.tinytable, .table th.tinytable {    font-size: 15em; color: #FFFE9E; background-color: #F58E22; }
.table td.tinytable, .table th.tinytable {    font-size: 16em; color: #FFFE9E; background-color: #F7A529; }
.table td.tinytable, .table th.tinytable {    font-size: 17em; color: #040404; background-color: #F8BB41; }
.table td.tinytable, .table th.tinytable {    font-size: 18em; color: #040404; background-color: #F9D15D; }
.table td.tinytable, .table th.tinytable {    font-size: 19em; color: #040404; background-color: #FBE77D; }
.table td.tinytable, .table th.tinytable {    font-size: 20em; color: #040404; background-color: #FFFE9E; }
    </style>
    <div class="container">
      <table class="table table-borderless" id="tinytable" style="table-layout: fixed; width: 50% !important; margin-left: auto; margin-right: auto;" data-quarto-disable-processing='true'>
        <thead>
        
        </thead>
        
        <tbody>
                <tr>
                  <td>1</td>
                  <td>5</td>
                  <td> 9</td>
                  <td>13</td>
                  <td>17</td>
                </tr>
                <tr>
                  <td>2</td>
                  <td>6</td>
                  <td>10</td>
                  <td>14</td>
                  <td>18</td>
                </tr>
                <tr>
                  <td>3</td>
                  <td>7</td>
                  <td>11</td>
                  <td>15</td>
                  <td>19</td>
                </tr>
                <tr>
                  <td>4</td>
                  <td>8</td>
                  <td>12</td>
                  <td>16</td>
                  <td>20</td>
                </tr>
        </tbody>
      </table>
    </div>
<!-- postamble start -->
  </body>

</html>
<!-- postamble end -->
<!-- hack to avoid NA insertion in last line -->
