#show figure: set block(breakable: true)
#figure( // start figure preamble
  
  kind: "tinytable",
  supplement: "Table", // end figure preamble

block[ // start block

#let nhead = 1;
#let nrow = 7;
#let ncol = 5;

  #let style-array = ( 
    // tinytable cell style after
(pairs: ((0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),), indent: 1em,),
(pairs: ((0, 0), (0, 1), (0, 8), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8),), ),
  )

  // tinytable align-default-array before
  #let align-default-array = ( left, left, left, left, left, ) // tinytable align-default-array here
  #show table.cell: it => {
    if style-array.len() == 0 {
      it 
    } else {
      let tmp = it
      for style in style-array {
        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)
        if m != none {
          if ("fontsize" in style) { tmp = text(size: style.fontsize, tmp) }
          if ("color" in style) { tmp = text(fill: style.color, tmp) }
          if ("indent" in style) { tmp = pad(left: style.indent, tmp) }
          if ("underline" in style) { tmp = underline(tmp) }
          if ("italic" in style) { tmp = emph(tmp) }
          if ("bold" in style) { tmp = strong(tmp) }
          if ("mono" in style) { tmp = math.mono(tmp) }
          if ("strikeout" in style) { tmp = strike(tmp) }
        }
      }
      tmp
    }
  }

  #align(center, [

  #table( // tinytable table start
    columns: (auto, auto, auto, auto, auto),
    stroke: none,
    align: (x, y) => {
      let align-array = ( 
        // tinytable cell align after
      )
      if align-array.len() == 0 {
        left
      } else {
        left
        // for style in style-array {
        //   let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)
        //   if m != none and ("align" in style) {
        //     let a = style.align
        //   }
        // }
      }
    },
    fill: (x, y) => {
      for style in style-array {
        let m = style.pairs.find(k => k.at(0) == x and k.at(1) == y)
        if m != none and ("background" in style) {
          style.background
        }
      }
    },
 table.hline(y: 8, start: 0, end: 5, stroke: 0.1em + rgb("#d3d8dc")),
 table.hline(y: 0, start: 0, end: 5, stroke: 0.1em + rgb("#d3d8dc")), table.hline(y: 1, start: 0, end: 5, stroke: 0.1em + rgb("#d3d8dc")),
    // tinytable lines before

    table.header(
      repeat: true,
[Sepal.Length], [Sepal.Width], [Petal.Length], [Petal.Width], [Species],
    ),

    // tinytable cell content after
table.cell(colspan: 5)[hello],
[5.1], [3.5], [1.4], [0.2], [setosa],
[4.9], [3.0], [1.4], [0.2], [setosa],
[4.7], [3.2], [1.3], [0.2], [setosa],
[4.6], [3.1], [1.5], [0.2], [setosa],
[5.0], [3.6], [1.4], [0.2], [setosa],
[5.4], [3.9], [1.7], [0.4], [setosa],
    // tinytable footer after
  ) // end table

  ]) // end align

] // end block
) // end figure 
