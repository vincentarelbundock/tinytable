#[
#let nhead = 1;
#let nrow = 4;
#let ncol = 5;

// start figure preamble
#figure(
  
  kind: "tinytable",
  supplement: none,
// end figure preamble

  #let fill-array = ( 
    // tinytable cell fill after
  )
  #let style-array = ( 
    // tinytable cell style after
    (y: 4, x: 3, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 4, x: 0, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 3, x: 3, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 3, x: 0, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 2, x: 3, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 2, x: 0, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 1, x: 3, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 1, x: 0, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 0, x: 3, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
    (y: 0, x: 0, color: black, underline: false, italic: false, bold: false, mono: false, strikeout: false, fontsize: 1.5em),
  )
  #show table.cell: it => {
    let tmp = it
    let data = style-array.find(data => data.x == it.x and data.y == it.y)
    if data != none {
      set text(data.color)
      set text(data.fontsize)
      if data.underline == true { tmp = underline(tmp) }
      if data.italic == true { tmp = emph(tmp) }
      if data.bold == true { tmp = strong(tmp) }
      if data.mono == true { tmp = math.mono(tmp) }
      if data.strikeout == true { tmp = strike(tmp) }
      tmp
    } else {
      tmp
    }
  }

  #align(center, [

  table( // tinytable table start
    columns: (auto, auto, auto, auto, auto),
    stroke: none,
    fill: (x, y) => {
      let data = fill-array.find(data => data.x == x and data.y == y)
      if data != none {
        data.fill
      }
    },

    // tinytable lines after
table.hline(y: 5, start: 0, end: 5, stroke: 0.1em + black),
table.hline(y: 1, start: 0, end: 5, stroke: 0.05em + black),
table.hline(y: 0, start: 0, end: 5, stroke: 0.1em + black),

    table.header(
      repeat: true,
[mpg], [cyl], [disp], [hp], [drat],
    ),

    // tinytable cell content after
[21.0], [6], [160], [110], [3.90],
[21.0], [6], [160], [110], [3.90],
[22.8], [4], [108], [ 93], [3.85],
[21.4], [6], [258], [110], [3.08],

    table.footer(
      repeat: false,
      // tinytable notes after
    ),

  ) // end table

  ]) // end align

) // end figure
] 
