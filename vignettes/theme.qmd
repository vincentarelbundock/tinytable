# Themes

```{=html}
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script>
MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']]
  },
  svg: {
    fontCache: 'global'
  }
};
</script>
```

`tinytable` offers a very flexible theming framwork, which includes a few basic visual looks, as well as other functions to apply collections of transformations to `tinytable` objects in a repeatable way. These themes can be applied by supplying a string or function to the `theme` argument in `tt()`. Alternatively, users can call the `theme_tt()` function.

The main difference between `theme_tt()` and the other options in package, is that whereas `style_tt()` and `format_tt()` aim to be output agnostic, `theme_tt()` supplies transformations that can be output-specific, and which can have their own sets of distinct arguments. See below for a few examples.

```{r}
library(tinytable)
options(tinytable_tt_digits = 3)
options(tinytable_theme_placement_latex_float = "H")
x <- mtcars[1:4, 1:5]
```

## Visual themes

To begin, let's explore a few of the basic looks supplied by themes:

```{r}
tt(x, theme = "striped")

tt(x) |> theme_tt("striped")
```

```{r}
tt(x, theme = "grid")
```

```{r}
tt(x, theme = "bootstrap")
```

::: {.content-visible when-format="pdf"}
```{r}
tt(x, theme = "void")
```
:::


## Custom themes

Users can also define their own themes to apply consistent visual tweaks to tables. For example, this defines a themeing function and sets a global option to apply it to all tables consistently:

```{r}
theme_vincent <- function(x, ...) {
  out <- x |> 
    style_tt(color = "teal") |>
    theme_tt("placement")
  out@caption <- "Always use the same caption."
  out@width <- .5
  return(out)
}

options(tinytable_tt_theme = theme_vincent)

tt(mtcars[1:2, 1:2])

tt(mtcars[1:3, 1:3])

options(tinytable_tt_theme = NULL)
```


Here is a slightly more complex example. The benefit of this approach is that we apply a function via the `style_tt()` function and its `finalize` argument, so we can leverage some of the object components that are only available at the printing stage:

```{r}
#| eval: false
theme_slides <- function(x, ...) {
    fn <- function(table) {
        if (isTRUE(table@output == "typst")) {
          table@table_string <- paste0("#figure([\n", table@table_string, "\n])")
        }
        return(table)
    }
    x <- style_tt(x, finalize = fn)
    x <- theme_tt(x, theme = "default")
    return(x)
}

tt(head(iris), theme = theme_slides)
```


## Tabular

The `tabular` theme is designed to provide a more "raw" table, without a floating table environment in LaTeX, and without CSS or Javascript in HTML. 

```{r tabular-theme}
tt(x) |> theme_tt("tabular") |> print("latex")
```


## Resize

::: {.content-visible when-format="html"}
LaTeX only.
:::

::: {.content-visible when-format="pdf"}
The `resize` theme allows you to adjust the size of the table in LaTeX outputs, making it fit within a specified width of the page. This is useful for large tables that need to be scaled down to fit the document layout. This table will be scaled to 90% of the available line width, ensuring it fits nicely within the document.

```{r}
tmp <- cbind(mtcars, mtcars)[1:10,]

tt(tmp) |> theme_tt("resize", width = .9)
```
:::



## Placement

::: {.content-visible when-format="html"}
LaTeX only.
:::

::: {.content-visible when-format="pdf"}
The `placement` theme offers control over the positioning of the table in LaTeX documents, using floating parameters like `H` (from the `float` LaTeX package) to specify where the table should appear.

```{r placement-theme}
options(tinytable_theme_placement_latex_float = NULL)
tt(x) |>
  theme_tt("placement", latex_float = "H") |>
  print(output = "latex")
```
:::


::: {.content-visible when-format="pdf"}
## Rotate

```{r}
tt(head(iris), caption = "Rotated table.") |> 
  theme_tt("rotate", angle = 45)
```
:::


## Multipage

::: {.content-visible when-format="html"}
LaTeX only.
:::

::: {.content-visible when-format="pdf"}
The `multipage` theme is designed for LaTeX documents to allow long tables to continue across multiple pages. This theme ensures that tables are not truncated and that all data is presented clearly.

```{r}
tmp <- rbind(mtcars, mtcars)[, 1:6]

cap <- "A long 80\\% width table with repeating headers."

tt(tmp, width = .8, caption = cap) |> 
    theme_tt("multipage", rowhead = 1)
```
:::

