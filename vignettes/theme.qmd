# Themes

```{=html}
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script>
MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']]
  },
  svg: {
    fontCache: 'global'
  }
};
</script>
```

`tinytable` offers a very flexible theming framwork, which includes a few basic visual looks, as well as other functions to apply collections of transformations to `tinytable` objects in a repeatable way. These themes can be applied by supplying a string or function to the `theme` argument in `tt()`. Alternatively, users can call the specific theme functions like `theme_striped()`, `theme_grid()`, etc.

The main difference between theme functions and the other options in package, is that whereas `style_tt()` and `format_tt()` aim to be output agnostic, theme functions supply transformations that can be output-specific, and which can have their own sets of distinct arguments. See below for a few examples.

```{r}
library(tinytable)
options(tinytable_tt_digits = 3)
options(tinytable_latex_placement = "H")
x <- mtcars[1:4, 1:5]
```

## Visual themes

To begin, let's explore a few of the basic looks supplied by themes:

```{r}
tt(x, theme = "striped")
```

```{r}
tt(x) |> theme_striped()
```

```{r}
tt(x, theme = "grid")
```

```{r}
tt(x, theme = "void")
```


## Custom themes

Users can also define their own themes to apply consistent visual tweaks to tables. For example, this defines a themeing function and sets a global option to apply it to all tables consistently:^[Note: Captions must be defined in Quarto chunks for Typst output, which explains why they are not displayed in the Typst version of this document.]

```{r}
theme_vincent <- function(x, ...) {
  out <- x |> 
    style_tt(color = "teal") |>
    theme_default()
  out@caption <- "Always use the same caption."
  out@width <- .5
  return(out)
}

options(tinytable_tt_theme = theme_vincent)

tt(mtcars[1:2, 1:2])

tt(mtcars[1:3, 1:3])

options(tinytable_tt_theme = NULL)
```


Here is a slightly more complex example. The benefit of this approach is that we apply a function via the `style_tt()` function and its `finalize` argument, so we can leverage some of the object components that are only available at the printing stage:

```{r}
#| eval: false
theme_slides <- function(x, ...) {
  fn <- function(table) {
    if (isTRUE(table@output == "typst")) {
      table@table_string <- paste0("#figure([\n", table@table_string, "\n])")
    }
    return(table)
  }
  x <- style_tt(x, finalize = fn)
  return(x)
}

tt(head(iris), theme = theme_slides)
```

Note: the code above is not evaluated because it only applies to Typst output.


::: {.content-visible unless-format="typst"}
## Tabular (LaTeX and HTML)

The `tabular` theme is designed to provide a more "raw" table, without a floating table environment in LaTeX, and without CSS or Javascript in HTML. 

```{r tabular-theme}
tt(x) |>
  theme_latex(environment = "tabular", table = FALSE) |>
  print("latex")
```
:::
::: {.content-visible when-format="typst"}
## Tabular 
LaTeX and HTML only.
:::

::: {.content-visible unless-format="pdf"}
## LaTeX Resize
LaTeX only.

## Placement
LaTeX only.

## Rotate
LaTeX only.

## Multipage
LaTeX only.
:::

::: {.content-hidden unless-format="pdf"}
The `theme_latex()` function includes resize functionality to adjust the size of tables in LaTeX outputs, making them fit within a specified width of the page. This is useful for large tables that need to be scaled down to fit the document layout. This table will be scaled to 90% of the available line width, ensuring it fits nicely within the document.

```{r}
tmp <- cbind(mtcars, mtcars)[1:10, ]

tt(tmp) |> theme_latex(resize_width = .9, resize_direction = "down")
```

## LaTeX Placement

The `theme_latex()` function includes placement control over the positioning of the table in LaTeX documents, using floating parameters like `H` (from the `float` LaTeX package) to specify where the table should appear.

```{r placement-theme}
options(tinytable_latex_placement = NULL)
tt(x) |>
  theme_latex(placement = "H") |>
  print(output = "latex")
```

## Rotate

```{r}
tt(head(iris), caption = "Rotated table.") |>
  theme_rotate(angle = 45)
```

## Multipage

The `multipage` theme is designed for LaTeX documents to allow long tables to continue across multiple pages. This theme ensures that tables are not truncated and that all data is presented clearly.

```{r}
tmp <- rbind(mtcars, mtcars)[, 1:6]

cap <- "A long 80\\% width table with repeating headers."

tt(tmp, width = .8, caption = cap) |>
  theme_latex(multipage = TRUE, rowhead = 1)
```
:::

## User-written themes

This section provides a few user-written themes that can be used to extend the functionality of `tinytable`. These themes are not included in the package by default, but they can be easily added to your workflow. If you would like your own custom theme to appear here, please open an issue on the [tinytable GitHub repository](https://github.com/vincentarelbundock/tinytable/issues) or submit a pull request.

### `theme_mitex()`

This theme was written by Kazuharu Yanagimoto. Thanks for your contribution!

The [MiTeX project](https://typst.app/universe/package/mitex/) aims to bring LaTeX support to Typst documents. This theme replace every instance of matching pairs of dollars signs `$..$`  by a MiTeX function call: `#mitex(...)`. This allows you to use LaTeX math in Typst documents.

Warning: The substitution code is very simple and it may not work properly when there are unmatched `$` symbols in the document.

```r
theme_mitex <- function(x, ...) {
    fn <- function(table) {
        if (isTRUE(table@output == "typst")) {
          table@table_string <- gsub(
            "\\$(.*?)\\$",
            "#mitex(`\\1`)",
            table@table_string)
        }
        return(table)
    }
    x <- style_tt(x, finalize = fn)
    return(x)
}
```
