# Groups and labels

```{=html}
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script>
MathJax = {
  tex: {
    inlineMath: [['$', '$'], ['\\(', '\\)']]
  },
  svg: {
    fontCache: 'global'
  }
};
</script>
```

```{r}
library(tinytable)
options(tinytable_tt_digits = 3)
options(tinytable_theme_placement_latex_float = "H")
x <- mtcars[1:4, 1:5]
```

The `group_tt()` function can label groups of rows (`i`) or columns (`j`).

## Rows

The `i` argument accepts a named list of integers. The numbers identify the positions where row group labels are to be inserted. The names includes the text that should be inserted:

```{r}
dat <- mtcars[1:9, 1:8]

tt(dat) |>
  group_tt(i = list(
    "I like (fake) hamburgers" = 3,
    "She prefers halloumi" = 4,
    "They love tofu" = 7))
```

The numbers in the `i` list indicate that a label must be inserted at position # in the original table (without row groups). For example,

```{r}
tt(head(iris)) |>
  group_tt(i = list("After 1" = 2, "After 2" = 3, "After 3" = 4, "After 5" = 6))

tt(head(iris)) |>
  group_tt(i = list("After 1a" = 2, "After 1b" = 2, "After 5" = 6))

tt(head(iris)) |>
  group_tt(i = list("After 0" = 1))
```

We can style group rows in the same way as regular rows (caveat: not in Word or Markdown):

```{r}
tt(dat) |>
  group_tt(
    i = list(
      "I like (fake) hamburgers" = 3,
      "She prefers halloumi" = 4,
      "They love tofu" = 7
    )
  ) |>
  style_tt(
    i = c(3, 5, 9),
    align = "c",
    color = "white",
    background = "gray",
    bold = TRUE
  )
```

### Automatic row groups

We can use the `group_tt()` function to group rows and label them using spanners (almost) automatically. For example,

```{r}
# subset and sort data
df <- mtcars |> 
  head(10) |>
  sort_by(~am)

# draw table
tt(df) |> group_tt(i = df$am)
```

### Styling row groups

Calculating the location of rows can be cumbersome. Instead of doing this by hand, we can extract information from the `table@group_index_i` S4 slot in the table object. Please be aware, however, that slot names are subject to change without warning in future versions of `tinytable`.

```{r}
library(magrittr)
tt(df) %>%
  group_tt(i = df$am) %>%
  style_tt(i = .@group_index_i, background = "pink")
```

## Columns

The syntax for column groups is very similar, but we use the `j` argument instead. The named list specifies the labels to appear in column-spanning labels, and the values must be a vector of consecutive and non-overlapping integers that indicate which columns are associated to which labels:

```{r}
tt(dat) |>
  group_tt(
    j = list(
      "Hamburgers" = 1:3,
      "Halloumi" = 4:5,
      "Tofu" = 7))
```

Here is a table with both row and column headers, as well as some styling:

```{r}
dat <- mtcars[1:9, 1:8]
tt(dat) |>
  group_tt(
    i = list(
      "I like (fake) hamburgers" = 3,
      "She prefers halloumi" = 4,
      "They love tofu" = 7
    ),
    j = list(
      "Hamburgers" = 1:3,
      "Halloumi" = 4:5,
      "Tofu" = 7
    )
  ) |>
  style_tt(
    i = c(3, 5, 9),
    align = "c",
    background = "teal",
    color = "white"
  ) |>
  style_tt(i = -1, color = "teal")
```

We can also stack several extra headers on top of one another:

```{r}
tt(x) |>
  group_tt(j = list("Foo" = 2:3, "Bar" = 5)) |>
  group_tt(j = list("Hello" = 1:2, "World" = 4:5))
```

## Repeated column names

In some contexts, users wish to repeat the column names to treat them as group labels. Consider this dataset:

```{r}
library(tinytable)
library(magrittr)

dat = data.frame(
  Region = as.character(state.region),
  State = row.names(state.x77), 
  state.x77[, 1:3]) |>
  sort_by(~ Region + State) |>
  subset(Region %in% c("North Central", "Northeast"))
dat = do.call(rbind, by(dat, dat$Region, head, n = 3))
row.names(dat) = NULL
dat
```

Here, we may want to repeat the column names for every region. The `group_tt()` function does not support this directly, but it is easy to achieve this effect by:

1. Insert column names as new rows in the data.
2. Creat a row group variable (here: `region`)
3. Style the column names and group labels

```{r}
# Format the numeric values early because repeating column names coerces all data to character
dat2 = format_tt(dat, digits = 1)

# Insert column names as new rows
dat2 = do.call(rbind, lapply(split(dat2, dat2$Region), \(d) {
  rbind(as.list(colnames(d)), d)
}))

# Create row group variable
idx = which(dat2$Region == "Region")
dat2$Region[idx] = dat2$Region[idx + 1]

# Draw table
dat2 %>% 
  subset(select = -Region) %>%
  tt() %>%
  group_tt(i = dat2$Region) %>%
  style_tt(i = .@group_index_i + 1, background = "black", color = "white") %>%
  style_tt(i = .@group_index_i, align = "c", color = "red") %>%
  setNames(NULL)
```