---
title: "`tinytable`"
subtitle: "Easy, beautiful, and customizable tables in R"
format: 
  html: default
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    keep-tex: true
---

\clearpage

`tinytable` is a small but powerful `R` package to draw HTML, LaTeX, Word, PDF, Markdown, and Typst tables. The interface is minimalist, but it gives users direct and convenient access to powerful frameworks to create endlessly customizable tables.

Install it from Github:

```{r, eval = FALSE}
library(remotes)
install_github("vincentarelbundock/tinytable")
```

This tutorial introduces the main functions of the package. It is available in two versions:

* [PDF](tutorial.pdf)
* [HTML](tutorial.html)


# Tiny Tables

Load the library and set some global options:

```{r}
library(tinytable)

options(digits = 3) # how many significant digits to print by default
options("tinytable_tabularray_placement" = "H") # for LaTeX
```

Draw a first table:

```{r}
x <- mtcars[1:4, 1:5]
tt(x)
```



## Themes

`tinytable` offers a few basic themes out of the box: "default", "striped", "bootstrap", "grid", "void." Those themes can be applied with the `theme` argument of the `tt()` function. As we will see below, it is easy to go much beyond those basic settings to customize your own tables. Here we only illustrate a few of the simplest settings:

```{r}
tt(x, theme = "striped")
```

```{r}
tt(x, theme = "grid")
```

```{r}
tt(x, theme = "bootstrap")
```

::: {.content-visible when-format="pdf"}
```{r}
tt(x, theme = "void")
```
:::


## Width

The `width` arguments accepts a number between 0 and 1, indicating what proportion of the linewidth the table should cover:

```{r}
tt(x, width = 0.5)
```

```{r}
tt(x, width = 1)
```


## Captions and cross-references

In Quarto, one can specify captions and use cross-references using code like this:


````{verbatim}
@tbl-blah shows that...

```{r}
#| label: tbl-blah
#| tbl-cap: "Blah blah blah"
library(tinytable)
tt(mtcars[1:4, 1:4])
```
````

And here is the rendered version of the code chunk above:


@tbl-blah shows that...

```{r}
#| label: tbl-blah
#| tbl-cap: "Blah blah blah"
library(tinytable)
tt(mtcars[1:4, 1:4], placement = NULL)
```

For standalone LaTeX tables, you can use the `caption` argument like so:

```{r, eval=FALSE}
tt(x, caption = "Blah blah.\\label{tbl-blah}")
```

Be aware that this more approach may not work well in Quarto or Rmarkdown documents.


## Footnotes

The `notes` argument accepts single strings or named lists of strings:

```{r}
#| tbl-cap: "A full-width table with wrapped text in cells and a footnote."
n <- "Fusce id ipsum consequat ante pellentesque iaculis eu a ipsum. Mauris id ex in nulla consectetur aliquam. In nec tempus diam. Aliquam arcu nibh, dapibus id ex vestibulum, feugiat consequat erat. Morbi feugiat dapibus malesuada. Quisque vel ullamcorper felis. Aenean a sem at nisi tempor pretium sit amet quis lacus."

lorem <- data.frame(
  Lorem = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
  Ipsum = " Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos."
)

tt(lorem, width = 3/4)

tt(lorem, notes = n, width = 1)
```

When `notes` is a named list, the names are used as identifiers and displayed as superscripts:

```{r}
tt(x, notes = list(a = "Blah.", b = "Blah blah."))
```

We can also add markers in individual cells by providing coordinates:

```{r}
tt(x, notes = list(
    a = list(i = 0:1, j = 1, text = "Blah."),
    b = "Blah blah."
  )
)
```

## Math

To insert LaTeX-style mathematical expressions in a `tinytable`, we enclose the expression in dollar signs: `$...$`. The expression will then rendered as a mathematical expression by MathJax (for HTML), LaTeX, or Pandoc. Do not forget to double escape any backslashes.

```{r}
dat <- data.frame(Math = c(
  "$x^2 + y^2 = z^2$",
  "$\\frac{1}{2}$"
))
tt(dat) |> style_tt(j = 1, align = "c")
```

::: {.content-visible when-format="pdf"}
In LaTeX (PDF), you can also use the `mode` inner setting from `tabularray` to render math in tables without delimiters (see @sec-tabularray for details on `tabularray`):

```{r, eval = knitr::is_latex_output()}

dat <- data.frame(Math = c("x^2 + y^2 = z^2", "\\frac{1}{2}"))
tt(dat) |>
  style_tt(j = 1, align = "c", tabularray_inner = "column{1}={mode=math},")
```
:::


## Line breaks and text wrapping

When the `width` argument is specified and a cell includes long text, the text is automatically wrapped to match the table.

```{r}
#| tbl-cap: "A full width table with wrapped text."
tt(lorem, width = 3/4)
```

Manual line breaks work sligthly different in LaTeX (PDF) or HTML. This table shows the two strategies. For HTML, we insert a `<br>` tag. For LaTeX, we wrap the string in curly braces `{}`, and then insert two (escaped) backslashes: `\\\\`

```{r}
d <- data.frame(
  "{Sed ut \\\\ perspiciatis unde}",
  "dicta sunt<br> explicabo. Nemo"
) |> setNames(c("LaTeX line break", "HTML line break"))
tt(d, width = 1)
```

# Output formats

`tinytable` can produce tables in HTML, Word, Markdown, LaTeX, Typst, PDF, or PNG format. An appropriate output format for printing is automatically selected based on (1) whether the function is called interactively, (2) is called within RStudio, and (3) the output format of the Rmarkdown or Quarto document, if applicable. Alternatively, users can specify the print format in `print()` or by setting a global option:

```{r}
#| eval: false
tt(x) |> print("markdown")
tt(x) |> print("html")
tt(x) |> print("latex")

options(tinytable_print_output = "markdown")
```

With the `save_tt()` function, users can also save tables directly to PNG (images), PDF or Word documents, and to any of the basic formats. All we need to do is supply a valid file name with the appropriate extension (ex: `.png`, `.html`, `.pdf`, etc.):

```r
tt(x) |> save_tt("path/to/file.png")
tt(x) |> save_tt("path/to/file.pdf")
tt(x) |> save_tt("path/to/file.docx")
tt(x) |> save_tt("path/to/file.html")
tt(x) |> save_tt("path/to/file.tex")
tt(x) |> save_tt("path/to/file.md")
```

`save_tt()` can also return a string with the table in it, for further processing in `R`. In the first case, the table is printed to console with `cat()`. In the second case, it returns as a single string as an `R` object.

```{r}
tt(mtcars[1:10, 1:5]) |>
  group_tt(
    i = list(
      "Hello" = 3,
      "World" = 8),
    j = list(
      "Foo" = 2:3,
      "Bar" = 4:5)) |>
  print("markdown")
```

```{r}
tt(mtcars[1:10, 1:5]) |>
  group_tt(
    i = list(
      "Hello" = 3,
      "World" = 8),
    j = list(
      "Foo" = 2:3,
      "Bar" = 4:5)) |>
  save_tt("markdown")
```


# Formatting

## Numbers, dates, strings, etc.

The `tt()` function is minimalist; it's inteded purpose is simply to draw nice tables. Users who want to format numbers, dates, strings, and other variables in different ways should process their data *before* supplying it to the `tt()` table-drawing function. To do so, we can use the `format_tt()` function supplied by the `tinytable`. 

In a very simple case---such as printing 2 significant digits of all numeric variables---we can use the `digits` argument of `tt()`:

```{r}
dat <- data.frame(
     w = c(143002.2092, 201399.181, 100188.3883),
     x = c(1.43402, 201.399, 0.134588),
     y = as.Date(sample(1:1000, 3)),
     z = c(TRUE, TRUE, FALSE))

tt(dat, digits = 2)
```

We can get more fine-grained control over formatting by calling `format_tt()` after `tt()`, optionally by specifying the columns to format with `j`:

```{r}
tt(dat) |> 
  format_tt(
    j = 2:4,
    digits = 1,
    date = "%B %d %Y") |>
  format_tt(
    j = 1,
    digits = 2,
    num_mark_big = " ",
    num_mark_dec = ",",
    num_fmt = "decimal")
```

We can use a regular expression in `j` to select columns, and the `?sprintf` function to format strings, numbers, and to do [string interpolation](https://en.wikipedia.org/wiki/String_interpolation) (similar to the `glue` package, but using Base `R`):

```{r}
dat <- data.frame(
     a = c("Burger", "Halloumi", "Tofu", "Beans"),
     b = c(1.43202, 201.399, 0.146188, 0.0031),
     c = c(98938272783457, 7288839482, 29111727, 93945))
tt(dat) |>
  format_tt(j = "a", sprintf = "Food: %s") |>
  format_tt(j = 2, digits = 1) |>
  format_tt(j = "c", digits = 2, num_suffix = TRUE)
```

Finally, if you like the `format_tt()` interface, you can use it directly with numbers, vectors, or data frames:

```{r}
format_tt(pi, digits = 1)

format_tt(dat, digits = 1, num_suffix = TRUE)
```


## Significant digits and decimals

By default, `format_tt()` formats numbers to ensure that the smallest value in a vector (column) has at least a certain number of significant digits. For example,

```{r}
k <- data.frame(x = c(0.000123456789, 12.4356789))
tt(k, digits = 2)
```

We can alter this behavior to ensure to apply the significant rounding digits on a per-cell basis using the `num_fmt` argument in `format_tt()`:

```{r}
tt(k) |> format_tt(digits = 2, num_fmt = "significant_cell")
```

The numeric formatting options in `format_tt()` can also be controlled using global options:

```{r}
options("tinytable_format_num_fmt" = "significant_cell")
tt(k, digits = 2)
```

```{r, include = FALSE}
options("tinytable_format_num_fmt" = NULL)
```


## Missing values

Missing values can be replaced by a custom string using the `replace_na` argument (default `""`):

```{r}
tab <- data.frame(a = c(NA, 1, 2), b = c(3, NA, 5))

tt(tab)

tt(tab) |> format_tt()

tt(tab) |> format_tt(replace_na = "-")
```


## Escape special characters

LaTeX and HTML use special characters to indicate strings which should be interpreted rather than displayed as text. For example, including underscores or dollar signs in LaTeX can cause compilation errors in some documents. To display those special characters, we need to substitute or escape them with backslashes, depending on the output format. The `escape` argument of `format_tt()` can be used to do this automatically:

```{r}
dat <- data.frame(
    "LaTeX" = c("Dollars $", "Percent %", "Underscore _"),
    "HTML" = c("<br>", "<sup>4</sup>", "<emph>blah</emph>")
)

tt(dat) |> format_tt(escape = TRUE)
```

When applied to a `tt()` table, `format_tt()` will determine the type of escaping to do automatically. When applied to a string or vector, we must specify the type of escaping to apply:

```{r}
format_tt("_ Dollars $", escape = "latex")
```

## Markdown

Markdown can be rendered in cells by using the `markdown` argument of the `format_tt()` function (note: this requires installing the `markdown` as an optional dependency). 

```{r}
dat <- data.frame( markdown = c(
  "This is _italic_ text.",
  "This sentence ends with a superscript.^2^")
)

tt(dat) |>
  format_tt(j = 1, markdown = TRUE) |>
  style_tt(j = 1, align = "c")
```

Markdown syntax can be particularly useful when formatting URLs in a table:

```{r}
#| tbl-cap: "Vincent sometimes contributes to these R packages."
dat <- data.frame(
  `Package (link)` = c(
    "[`marginaleffects`](https://www.marginaleffects.com/)",
    "[`modelsummary`](https://www.modelsummary.com/)",
    "[`tinytable`](https://vincentarelbundock.github.io/tinytable/)",
    "[`countrycode`](https://vincentarelbundock.github.io/countrycode/)",
    "[`WDI`](https://vincentarelbundock.github.io/WDI/)",
    "[`softbib`](https://vincentarelbundock.github.io/softbib/)",
    "[`tinysnapshot`](https://vincentarelbundock.github.io/tinysnapshot/)",
    "[`altdoc`](https://etiennebacher.github.io/altdoc/)",
    "[`plot2`](https://grantmcdermott.com/plot2/)",
    "[`parameters`](https://easystats.github.io/parameters/)",
    "[`insight`](https://easystats.github.io/insight/)"
  ),
  Purpose = c(
    "Interpreting statistical models",
    "Data and model summaries",
    "Draw beautiful tables easily",
    "Convert country codes and names",
    "Download data from the World Bank",
    "Software bibliographies in R",
    "Snapshots for unit tests using `tinytest`",
    "Create documentation website for R packages",
    "Extension of base R plot functions",
    "Extract from model objects",
    "Extract information from model objects"
  ),
  check.names = FALSE
)

tt(dat) |> format_tt(j = 1, markdown = TRUE)
```


# Style

The main styling function for the `tinytable` package is `style_tt()`. Via this function, you can access three main interfaces to customize tables:

1. A general interface to frequently used style choices which works for both HTML and LaTeX (PDF): colors, font style and size, row and column spans, etc. This is accessed through several distinct arguments in the `style_tt()`  function, such as `italic`, `color`, etc.
2. A specialized interface which allows users to use the [powerful `tabularray` package](https://ctan.org/pkg/tabularray?lang=en) to customize LaTeX tables. This is accessed by passing `tabularray` settings as strings to the `tabularray_inner` and `tabularray_outer` arguments of `style_tt()`.
3. A specialized interface which allows users to use the [powerful `Bootstrap` framework](https://getbootstrap.com/docs/5.3/content/tables/) to customize HTML tables. This is accessed by passing CSS declarations and rules to the `bootstrap_css` and `bootstrap_css_rule` arguments of `style_tt()`.

These functions can be used to customize rows, columns, or individual cells. They control many features, including:

* Text color
* Background color
* Widths
* Heights
* Alignment
* Text Wrapping
* Column and Row Spacing
* Cell Merging
* Multi-row or column spans
* Border Styling
* Font Styling: size, underline, italic, bold, strikethrough, etc.
* Header Customization

The `style_*()` functions can modify individual cells, or entire columns and rows. The portion of the table that is styled is determined by the `i` (rows)  and `j` (columns) arguments.


## Cells, rows, columns

To style individual cells, we use the `style_cell()`  function. The first two arguments---`i` and `j`---identify the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:

```{r}
tt(x) |>
  style_tt(
    i = 2,
    j = 3,
    background = "black",
    color = "white")
```

The `i` and `j` accept vectors of integers to modify several cells at once:

```{r}
tt(x) |>
  style_tt(
    i = 2:3,
    j = c(1, 3, 4),
    italic = TRUE,
    color = "orange")
```

We can style all cells in a table by omitting both the `i` and `j` arguments:


```{r}
tt(x) |> style_tt(color = "orange")
```

We can style entire rows by omitting the `j` argument:

```{r}
tt(x) |> style_tt(i = 1:2, color = "orange")
```

We can style entire columns by omitting the `i` argument:

```{r}
tt(x) |> style_tt(j = c(2, 4), bold = TRUE)
```

The `j` argument accepts integer vectors, character vectors, but also a string with a Perl-style regular expression, which makes it easier to select columns by name:

```{r}
tt(x) |> style_tt(j = c("mpg", "drat"), color = "orange")

tt(x) |> style_tt(j = "mpg|drat", color = "orange")
```

Here we use a "negative lookahead" to exclude certain columns:

```{r}
tt(x) |> style_tt(j = "^(?!drat|mpg)", color = "orange")
```

Of course, we can also call the `style_tt()` function several times to apply different styles to different parts of the table:

```{r}
tt(x) |> 
  style_tt(i = 1, j = 1:2, color = "orange") |>
  style_tt(i = 1, j = 3:4, color = "green")
```


## Colors

The `color` and `background` arguments in the `style_tt()` function are used for specifying the text color and the background color for cells of a table created by the `tt()` function. This argument plays a crucial role in enhancing the visual appeal and readability of the table, whether it's rendered in LaTeX or HTML format. The way we specify colors differs slightly between the two formats:

For HTML Output:

- Hex Codes: You can specify colors using hexadecimal codes, which consist of a `#` followed by 6 characters (e.g., `#CC79A7`). This allows for a wide range of colors.
- Keywords: There's also the option to use color keywords for convenience. The supported keywords are basic color names like `black`, `red`, `blue`, etc.

For LaTeX Output:

- Hexadecimal Codes: Similar to HTML, you can use hexadecimal codes. However, in LaTeX, you need to include these codes as strings (e.g., `"#CC79A7"`).
- Keywords: LaTeX supports a different set of color keywords, which include standard colors like `black`, `red`, `blue`, as well as additional ones like `cyan`, `darkgray`, `lightgray`, etc.
- Color Blending: An advanced feature in LaTeX is color blending, which can be achieved using the `xcolor` package. You can blend colors by specifying ratios (e.g., `white!80!blue` or `green!20!red`).
- Luminance Levels: [The `ninecolors` package in LaTeX](https://ctan.org/pkg/ninecolors?lang=en) offers colors with predefined luminance levels, allowing for more nuanced color choices (e.g., "azure4", "magenta8").

Note that the keywords used in LaTeX and HTML are slightly different.

```{r}
tt(x) |> style_tt(i = 1:4, j = 1, color = "#FF5733")
```

Note that when using Hex codes in a LaTeX table, we need extra declarations in the LaTeX preamble. See `?tt` for details.


## Alignment

To align columns, we use a single character, or a string where each letter represents a column:

```{r}
dat <- data.frame(
  a = c("a", "aa", "aaa"),
  b = c("b", "bb", "bbb"),
  c = c("c", "cc", "ccc"))

tt(dat) |> style_tt(j = 1:3, align = "c")

tt(dat) |> style_tt(j = 1:3, align = "lcr")
```


## Fonts

The font size is specified in em units. 

```{r}
tt(x) |> style_tt(j = "mpg|hp|qsec", fontsize = 1.5)
```

## Spanning cells (merging cells)

Sometimes, it can be useful to make a cell stretch across multiple colums or rows, for example when we want to insert a label. To achieve this, we can use the `colspan` argument. Here, we make the 2nd cell of the 2nd row stretch across three columns and two rows:

```{r}
tt(x)|> style_tt(
  i = 2, j = 2,
  colspan = 3,
  rowspan = 2,
  align = "c",
  alignv = "m",
  color = "white",
  background = "black",
  bold = TRUE)
```

Here is the original table for comparison:

```{r}
tt(x)
```

Spanning cells can be particularly useful when we want to suppress redundant labels:

```{r}
tab <- aggregate(mpg ~ cyl + am, FUN = mean, data = mtcars)
tab <- tab[order(tab$cyl, tab$am),]
tab

tt(tab, digits = 2) |>
  style_tt(i = c(1, 3, 5), j = 1, rowspan = 2, alignv = "t")
```


## Headers

The header can be omitted from the table by deleting the column names in the `x` data frame:

```{r}
k <- x
colnames(k) <- NULL
tt(k)
```

The first is row 0, and higher level headers (ex: column spanning labels) have negative indices like -1. They can be styled as expected:

```{r}
tt(x) |> style_tt(i = 0, color = "white", background = "black")
```

When styling columns without specifying `i`, the headers are styled in accordance with the rest of the column:

```{r}
tt(x) |> style_tt(j = 2:3, color = "white", background = "black")
```


## Conditional styling

We can use the standard `which` function from Base `R` to create indices and apply conditional stying on rows. And we can use a regular expression in `j` to apply conditional styling on columns:

```{r}
k <- mtcars[1:10, c("mpg", "am", "vs")]

tt(k) |> 
  style_tt(
    i = which(k$am == k$vs),
    background = "teal",
    color = "white")
```

## Vectorized styling (heatmaps)

The `color`, `background`, and `fontsize` arguments are vectorized. This allows easy specification of different colors in a single call:

```{r}
tt(x) |>
  style_tt(
    i = 1:4,
    color = c("red", "blue", "green", "orange"))
```

When using a single value for a vectorized argument, it gets applied to all values:

```{r}
tt(x) |>
  style_tt(
    j = 2:3,
    color = c("orange", "green"),
    background = "black")
```

We can also produce more complex heatmap-like tables to illustrate different font sizes in em units:

```{r}
# font sizes
fs <- seq(.1, 2, length.out = 20)

# headless table
k <- data.frame(matrix(fs, ncol = 5))
colnames(k) <- NULL

# colors
bg <- hcl.colors(20, "Inferno")
fg <- ifelse(as.matrix(k) < 1.7, tail(bg, 1), head(bg, 1))

# table
tt(k, width = .7, theme = "void") |>
  style_tt(j = 1:5, align = "ccccc") |>
  style_tt(
    i = 1:4,
    j = 1:5,
    color = fg,
    background = bg,
    fontsize = fs)
```


## Lines (borders)

The `style_tt` function allows us to customize the borders that surround eacell of a table, as well horizontal and vertical rules. To control these lines, we use the `line`, `line_width`, and `line_color` arguments. Here's a brief overview of each of these arguments:

- `line`: This argument specifies where solid lines should be drawn. It is a string that can consist of the following characters:
  - `"t"`: Draw a line at the top of the cell, row, or column.
  - `"b"`: Draw a line at the bottom of the cell, row, or column.
  - `"l"`: Draw a line at the left side of the cell, row, or column.
  - `"r"`: Draw a line at the right side of the cell, row, or column.
  - You can combine these characters to draw lines on multiple sides, such as `"tbl"` to draw lines at the top, bottom, and left sides of a cell.
- `line_width`: This argument controls the width of the solid lines in em units (default: 0.1 em). You can adjust this value to make the lines thicker or thinner.
- `line_color`: Specifies the color of the solid lines. You can use color names, hexadecimal codes, or other color specifications to define the line color.

Here is an example where we draw lines around every border ("t", "b", "l", and "r") of specified cells.

```{r}
tt(x, theme = "void") |>
    style_tt(
        i = 0:3,
        j = 1:3,
        line = "tblr",
        line_width = 0.4,
        line_color = "orange")
```

And here is an example with horizontal rules:

```{r}
tt(x, theme = "void") |>
    style_tt(i = 0, line = "t", line_color = "orange", line_width = 0.4) |>
    style_tt(i = 0, line = "b", line_color = "purple", line_width = 0.2) |>
    style_tt(i = 4, line = "b", line_color = "orange", line_width = 0.4)
```


```{r}
dat <- data.frame(1:2, 3:4, 5:6, 7:8)
colnames(dat) <- NULL

tt(dat, theme = "void") |> 
  style_tt(
    line = "tblr", line_color = "white", line_width = 0.5,
    background = "blue", color = "white")
```


## Markdown and Word

Styling for Markdown and Word tables is more limited than for the other formats. In particular:

* The only supported arguments are: `bold`, `italic`, and `strikeout`.
* Headers inserted by `group_tt()` cannot be styled using the `style_tt()` function.

These limitations are due to the fact that there is no markdown syntax for the other options (ex: colors and background), and that we create Word documents by converting a markdown table to .docx via the Pandoc software.

One workaround is to style the group headers directly in their definition by using markdown syntax:

```{r}
mtcars[1:4, 1:4] |>
  tt() |>
  group_tt(i = list("*Hello*" = 1, "__World__" = 3)) |>
  print("markdown")
```


# Plots and images

The `plot_tt()` function can embed images and plots in a `tinytable`. We can insert images by specifying their paths and positions (`i`/`j`). 



## Inserting images in tables

To insert images in a table, we use the `plot_tt()` function. The `path_img` values must be relative to the main document saved by `save_tt()` or to the Quarto (or Rmarkdown) document in which the code is executed.

```{r}
dat <- data.frame(
  Species = c("Spider", "Squirrel"),
  Image = ""
)

img <- c(
  "../figures/spider.png",
  "../figures/squirrel.png"
)

tt(dat) |>
  plot_tt(j = 2, images = img, height = 3)
```

In HTML tables, it is possible to insert tables directly from a web address, but not in LaTeX.

::: {.content-visible when-format="html"}
```{r}
dat <- data.frame("R" = "")
img <- "https://cran.r-project.org/Rlogo.svg"
tt(dat) |>
  plot_tt(i = 1, j = 1, images = img, height = 7) |>
  style_tt(j = 1, align = "c")
```
:::

## Inline plots

We can draw inline plots three ways, with

1. Built-in templates for histograms, density plots, and bar plots
2. Custom plots using base `R` plots.
3. Custom plots using `ggplot2`.

To draw custom plots, one simply has to define a custom function, whose structure we illustrate below.

### Built-in plots

There are several types of inline plots available by default. For example,

```{r}
plot_data <- list(mtcars$mpg, mtcars$hp, mtcars$qsec)

dat <- data.frame(
  Variables = c("mpg", "hp", "qsec"), 
  Histogram = "",
  Density = "",
  Bar = "",
  Line = ""
)

# random data for sparklines
lines <- lapply(1:3, \(x) data.frame(x = 1:10, y = rnorm(10)))

tt(dat) |>
  plot_tt(j = 2, fun = "histogram", data = plot_data) |>
  plot_tt(j = 3, fun = "density", data = plot_data, color = "darkgreen") |>
  plot_tt(j = 4, fun = "bar", data = list(2, 3, 6), color = "orange") |>
  plot_tt(j = 5, fun = "line", data = lines, color = "blue") |>
  style_tt(j = 2:5, align = "c")
```

### Custom plots: Base `R`

Important: Custom functions must have `...` as an argument.

To create a custom inline plot using Base `R` plotting functions, we create a function that returns another function. `tinytable` will then call that second function internally to generate the plot.

This is easier than it sounds! For example:

```{r}
f <- function(d, ...) {
  function() hist(d, axes = FALSE, ann = FALSE, col = "lightblue")
}

plot_data <- list(mtcars$mpg, mtcars$hp, mtcars$qsec)

dat <- data.frame(Variables = c("mpg", "hp", "qsec"), Histogram = "")

tt(dat) |>
  plot_tt(j = 2, fun = f, data = plot_data)
```


### Custom plots: `ggplot2`

Important: Custom functions must have `...` as an argument.

To create a custom inline plot using `ggplot2`, we create a function that returns a `ggplot` object:

```{r}
library(ggplot2)

f <- function(d, color = "black", ...) {
  d <- data.frame(x = d)
  ggplot(d, aes(x = x)) + 
    geom_histogram(bins = 30, color = color, fill = color) +
    scale_x_continuous(expand=c(0,0)) +
    scale_y_continuous(expand=c(0,0)) +
    theme_void()
}

plot_data <- list(mtcars$mpg, mtcars$hp, mtcars$qsec)

tt(dat) |>
  plot_tt(j = 2, fun = f, data = plot_data, color = "pink")
```

We can insert arbitrarily complex plots by customizing the `ggplot2` call:

```{r}
#| message: false
#| warning: false
penguins <- read.csv(
  "https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv",
  na.strings = "") |> na.omit()

# split data by species
dat <- split(penguins, penguins$species)
body <- lapply(dat, \(x) x$body_mass_g)
flip <- lapply(dat, \(x) x$flipper_length_mm)

# create nearly empty table
tab <- data.frame(
  "Species" = names(dat),
  "Body Mass" = "",
  "Flipper Length" = "",
  "Body vs. Flipper" = "",
  check.names = FALSE
)

# custom ggplot2 function to create inline plot
f <- function(d, ...) {
  ggplot(d, aes(x = flipper_length_mm, y = body_mass_g, color = sex)) +
    geom_point(size = .2) +
    scale_x_continuous(expand=c(0,0)) +
    scale_y_continuous(expand=c(0,0)) +
    scale_color_manual(values = c("#E69F00", "#56B4E9")) +
    theme_void() +
    theme(legend.position = "none")
}

# `tinytable` calls
tt(tab) |>
  plot_tt(j = 2, fun = "histogram", data = body, height = 2) |>
  plot_tt(j = 3, fun = "density", data = flip, height = 2) |>
  plot_tt(j = 4, fun = f, data = dat, height = 2) |>
  style_tt(j = 2:4, align = "c") 
```


::: {.content-visible when-format="html"}
## Fontawesome

We can use [the `fontawesome` package](https://rstudio.github.io/fontawesome/index.html) to include fancy icons in HTML tables:

```{r, eval = knitr::is_html_output()}
library(fontawesome)
tmp <- mtcars[1:4, 1:4]
tmp[1, 1] <- paste(fa("r-project"), "for statistics")
tt(tmp)
```
:::


# Groups and labels

The `group_tt()` function can label groups of rows (`i`) or columns (`j`).

## Rows

The `i` argument accepts a named list of integers. The numbers identify the positions where row group labels are to be inserted. The names includes the text that should be inserted:

```{r}
dat <- mtcars[1:9, 1:8]

tt(dat) |>
  group_tt(i = list(
    "I like (fake) hamburgers" = 3,
    "She prefers halloumi" = 4,
    "They love tofu" = 7))
```


We can style group rows in the same way as regular rows:

```{r}
tt(dat) |> 
  group_tt(
    i = list(
      "I like (fake) hamburgers" = 3,
      "She prefers halloumi" = 4,
      "They love tofu" = 7)) |>
  style_tt(
    i = c(3, 5, 9),
    align = "c",
    color = "white",
    background = "gray",
    bold = TRUE)
```

## Columns

The syntax for column groups is very similar, but we use the `j` argument instead. The named list specifies the labels to appear in column-spanning labels, and the values must be a vector of consecutive and non-overlapping integers that indicate which columns are associated to which labels:

```{r}
tt(dat) |> 
  group_tt(
    j = list(
      "Hamburgers" = 1:3,
      "Halloumi" = 4:5,
      "Tofu" = 7))
```

Here is a table with both row and column headers, as well as some styling:

```{r}
dat <- mtcars[1:9, 1:8]
tt(dat) |> 
  group_tt(
    i = list("I like (fake) hamburgers" = 3,
             "She prefers halloumi" = 4,
             "They love tofu" = 7),
    j = list("Hamburgers" = 1:3,
             "Halloumi" = 4:5,
             "Tofu" = 7)) |>
  style_tt(
    i = c(3, 5, 9),
    align = "c",
    background = "teal",
    color = "white") |>
  style_tt(i = -1, color = "teal")
```

We can also stack several extra headers on top of one another:

```{r}
tt(x) |>
  group_tt(j = list("Foo" = 2:3, "Bar" = 5)) |>
  group_tt(j = list("Hello" = 1:2, "World" = 4:5))
```

# HTML customization

::: {.content-visible when-format="pdf"}
The HTML customization options described in this section are not available for LaTeX (or PDF) documents. Please refer to the web documentation to read this part of the tutorial.
:::

## Bootstrap classes

::: {.content-visible when-format="html"}
The Bootstrap framework provides a number of built-in themes to style tables, using "classes." To use them, we call `style_tt()` with the `bootstrap_class` argument. A list of available Bootstrap classes can be found here: <https://getbootstrap.com/docs/5.3/content/tables/>

For example, to produce a "bordered" table, we use the `table-bordered` class:


```{r, eval = knitr::is_html_output()}
tt(x) |> style_tt(bootstrap_class = "table table-bordered")
```

We can also combine several Bootstrap classes. Here, we get a table with the "hover" feature:

```{r, eval = knitr::is_html_output()}
tt(x) |> style_tt(
  bootstrap_class = "table table-hover")
```
:::


## CSS declarations

::: {.content-visible when-format="html"}
The `style_tt()` function allows us to declare CSS properties and values for individual cells, columns, or rows of a table. For example, if we want to make the first column bold, we could do:

```{r}
tt(x) |>
  style_tt(j = 1, bootstrap_css = "font-weight: bold; color: red;")
```
:::

## CSS rules

::: {.content-visible when-format="html"}
For more extensive customization, we can use complete CSS rules. In this example, we define several rules that apply to a new class called `mytable`. Then, we use the `theme` argument of the `tt()` function to ensure that our tiny table is of class `mytable`. Finally, we call `style_bootstrap()` to apply the rules with the `bootstrap_css_rule` argument.

```{r, eval = knitr::is_html_output()}
css_rule <- "
.mytable {
  background: linear-gradient(45deg, #EA8D8D, #A890FE);
  width: 600px;
  border-collapse: collapse;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

.mytable th,
.mytable td {
  padding: 5px;
  background-color: rgba(255,255,255,0.2);
  color: #fff;
}

.mytable tbody tr:hover {
  background-color: rgba(255,255,255,0.3);
}

.mytable tbody td:hover:before {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  top: -9999px;
  bottom: -9999px;
  background-color: rgba(255,255,255,0.2);
  z-index: -1;
}
"

tt(x, width = 2/3) |> 
  style_tt(
    j = 1:5,
    align = "ccccc",
    bootstrap_class = "table mytable",
    bootstrap_css_rule = css_rule)
```

:::



# LaTeX / PDF customization {#sec-tabularray}

::: {.content-visible when-format="html"}
The LaTeX / PDF customization options described in this section are not available for HTML documents. Please refer to the PDF documentation hosted on the website to read this part of the tutorial.
:::

## Preamble

::: {.content-visible when-format="pdf"}
_Warning_: Some of the features of this package may require a recent version of the `tabularray` package. Please update your local LaTeX distribution before using `tinytable`.

In Rmarkdown and Quarto documents, `tinytable` will automatically populate your LaTeX preamble with the necessary packages and commands. When creating your own LaTeX documents, you should insert these commands in the preamble:

```latex
\usepackage{tabularray}
\usepackage{float}
\usepackage{codehigh}
\usepackage{graphicx}
\usepackage[normalem]{ulem}
\UseTblrLibrary{booktabs}
\NewTableCommand{\tinytableDefineColor}[3]{\definecolor{#1}{#2}{#3}}
\newcommand{\tinytableTabularrayUnderline}[1]{\underline{#1}}
\newcommand{\tinytableTabularrayStrikeout}[1]{\sout{#1}}
```
:::

## Introduction to `tabularray`

::: {.content-visible when-format="pdf"}
`tabularray` offers a robust solution for creating and managing tables in LaTeX, standing out for its flexibility and ease of use. It excels in handling complex table layouts and offers enhanced functionality compared to traditional LaTeX table environments. This package is particularly useful for users requiring advanced table features, such as complex cell formatting, color management, and versatile table structures.

A key feature of Tabularray is its separation of style from content. This approach allows users to define the look and feel of their tables (such as color, borders, and text alignment) independently from the actual data within the table. This separation simplifies the process of formatting tables and enhances the clarity and maintainability of LaTeX code. The `tabularray` documentation is fantastic. It will teach you how to customize virtually every aspect of your tables: <https://ctan.org/pkg/tabularray?lang=en>

Tabularray introduces a streamlined interface for specifying table settings. It employs two types of settings blocks: Inner and Outer. The Outer block is used for settings that apply to the entire table, like overall alignment, while the Inner block handles settings for specific elements like columns, rows, and cells. The `style_tt()` function includes `tabularray_inner` and `tabularray_outer` arguments to set these respective features.

Consider this `tabularray` example, which illustrates the use of inner settings:

```latex
\begin{table}
\centering
\begin{tblr}[         %% tabularray outer open
]                     %% tabularray outer close
{                     %% tabularray inner open
column{1-4}={halign=c},
hlines = {bg=white},
vlines = {bg=white},
cell{1,6}{odd} = {bg=teal7},
cell{1,6}{even} = {bg=green7},
cell{2,4}{1,4} = {bg=red7},
cell{3,5}{1,4} = {bg=purple7},
cell{2}{2} = {r=4,c=2}{bg=azure7},
}                     %% tabularray inner close
mpg & cyl & disp & hp \\
21 & 6 & 160 & 110 \\
21 & 6 & 160 & 110 \\
22.8 & 4 & 108 & 93 \\
21.4 & 6 & 258 & 110 \\
18.7 & 8 & 360 & 175 \\
\end{tblr}
\end{table}
```
   
The Inner block, enclosed in `{}`, defines specific styles like column formats (`column{1-4}={halign=c}`), horizontal and vertical line colors (`hlines={fg=white}`, `vlines={fg=white}`), and cell colorations (`cell{1,6}{odd}={bg=teal7}`, etc.). The last line of the inner block also species that the second cell of row 2 (`cell{2}{2}`) should span 4 rows and 2 columns (`{r=4,c=3}`), be centered (`halign=c`), and with a background color with the 7th luminance level of the azure color (`bg=azure7`).

We can create this code easily by passing a string to the `tabularray_inner` argument of the `style_tt()` function:

```{r, eval = knitr::is_latex_output()}
#| tbl-cap: "\\LaTeX{} table with colors and a spanning cell."
inner <- "
column{1-4}={halign=c},
hlines = {fg=white},
vlines = {fg=white},
cell{1,6}{odd} = {bg=teal7},
cell{1,6}{even} = {bg=green7},
cell{2,4}{1,4} = {bg=red7},
cell{3,5}{1,4} = {bg=purple7},
cell{2}{2} = {r=4,c=2}{bg=azure7},
"
mtcars[1:5, 1:4] |>
  tt(theme = "void") |>
  style_tt(tabularray_inner = inner)
```


:::


## `tabularray`  keys

::: {.content-visible when-format="pdf"}
Inner specifications:

| Key       | Description and Values                                    | Initial Value |
|-----------|-----------------------------------------------------------|---------------|
| `rulesep` | space between two hlines or vlines                        | `2pt`         |
| `stretch` | stretch ratio for struts added to cell text               | `1`           |
| `abovesep`| set vertical space above every row                        | `2pt`         |
| `belowsep`| set vertical space below every row                        | `2pt`         |
| `rowsep`  | set vertical space above and below every row              | `2pt`         |
| `leftsep` | set horizontal space to the left of every column          | `6pt`         |
| `rightsep`| set horizontal space to the right of every column         | `6pt`         |
| `colsep`  | set horizontal space to both sides of every column        | `6pt`         |
| `hspan`   | horizontal span algorithm: `default`, `even`, or `minimal`| `default`     |
| `vspan`   | vertical span algorithm: `default` or `even`              | `default`     |
| `baseline`| set the baseline of the table                             | `m`           |


Outer specifications:

| Key       | Description and Values                          | Initial Value |
|-----------|-------------------------------------------------|---------------|
| `baseline`| set the baseline of the table                   | `m`           |
| `long`    | change the table to a long table                | None          |
| `tall`    | change the table to a tall table                | None          |
| `expand`  | you need this key to use verb commands          | None          |

Cells:

| Key     | Description and Values                                                         | Initial Value |
|---------|---------------------------------------------------------------------------------|---------------|
| `halign`| horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)   | `j`           |
| `valign`| vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `wd`    | width dimension                                                                | None          |
| `bg`    | background color name                                                          | None          |
| `fg`    | foreground color name                                                          | None          |
| `font`  | font commands                                                                  | None          |
| `mode`  | set cell mode: `math`, `imath`, `dmath` or `text`                              | None          |
| `cmd`   | execute command for the cell text                                              | None          |
| `preto` | prepend text to the cell                                                       | None          |
| `appto` | append text to the cell                                                        | None          |
| `r`     | number of rows the cell spans            | 1             |
| `c`     | number of columns the cell spans         | 1             |


Rows:


| Key        | Description and Values                                                              | Initial Value |
|------------|-------------------------------------------------------------------------------------|---------------|
| `halign`   | horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)        | `j`           |
| `valign`   | vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `ht`       | height dimension                                                                    | None          |
| `bg`       | background color name                                                               | None          |
| `fg`       | foreground color name                                                               | None          |
| `font`     | font commands                                                                       | None          |
| `mode`     | set mode for row cells: `math`, `imath`, `dmath` or `text`                          | None          |
| `cmd`      | execute command for every cell text                                                 | None          |
| `abovesep` | set vertical space above the row                                                    | `2pt`         |
| `belowsep` | set vertical space below the row                                                    | `2pt`         |
| `rowsep`   | set vertical space above and below the row                                          | `2pt`         |
| `preto`    | prepend text to every cell (like `>` specifier in `rowspec`)                        | None          |
| `appto`    | append text to every cell (like `<` specifier in `rowspec`)                         | None          |


Columns:


| Key         | Description and Values                                                         | Initial Value |
|-------------|--------------------------------------------------------------------------------|---------------|
| `halign`    | horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)  | `j`           |
| `valign`    | vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `wd`        | width dimension                                                                | None          |
| `co`        | coefficient for the extendable column (`X` column)                             | None          |
| `bg`        | background color name                                                          | None          |
| `fg`        | foreground color name                                                          | None          |
| `font`      | font commands                                                                  | None          |
| `mode`      | set mode for column cells: `math`, `imath`, `dmath` or `text`                  | None          |
| `cmd`       | execute command for every cell text                                            | None          |
| `leftsep`   | set horizontal space to the left of the column                                 | `6pt`         |
| `rightsep`  | set horizontal space to the right of the column                                | `6pt`         |
| `colsep`    | set horizontal space to both sides of the column                               | `6pt`         |
| `preto`     | prepend text to every cell (like `>` specifier in `colspec`)                   | None          |
| `appto`     | append text to every cell (like `<` specifier in `colspec`)                    | None          |


hlines:


| Key         | Description and Values                                         | Initial Value |
|-------------|-----------------------------------------------------------------|---------------|
| `dash`      | dash style: `solid`, `dashed` or `dotted`                      | `solid`       |
| `text`      | replace hline with text (like `!` specifier in `rowspec`)      | None          |
| `wd`        | rule width dimension                                           | `0.4pt`       |
| `fg`        | rule color name                                                | None          |
| `leftpos`   | crossing or trimming position at the left side                 | `1`           |
| `rightpos`  | crossing or trimming position at the right side                | `1`           |
| `endpos`    | adjust leftpos/rightpos for only the leftmost/rightmost column | `false`       |

vlines:


| Key        | Description and Values                                        | Initial Value |
|------------|---------------------------------------------------------------|---------------|
| `dash`     | dash style: `solid`, `dashed` or `dotted`                     | `solid`       |
| `text`     | replace vline with text (like `!` specifier in `colspec`)     | None          |
| `wd`       | rule width dimension                                          | `0.4pt`       |
| `fg`       | rule color name                                               | None          |
| `abovepos` | crossing or trimming position at the above side               | `0`           |
| `belowpos` | crossing or trimming position at the below side               | `0`           |

:::


