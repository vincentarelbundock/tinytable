# Notebooks

```{r}
library(tinytable)
```

## Quarto

### Cross-references

To define cross-references in Quarto notebooks, users should *not* use the `caption` argument. Instead, they should use the `label` and `tbl-cap` Quarto chunk options. This is a minimal example:

````{verbatim}
---
format: html
---

We see in @tbl-iris the first few rows of the iris dataset.

```{r}
#| label: tbl-iris
#| tbl-cap: First few rows of the iris dataset.
library(tinytable)
tt(head(iris))
```
````

### Custom crossref styles

In `Quarto`, it is possible to create a custom crossref type for things like appendix tables. One challenge, is that LaTeX will not allow users to nest a `tblr` environment, inside a `table` environment, inside the new environment that `Quarto` creates for the crossref. Therefore, when rendering a table to LaTeX/PDF, it is important to drop the `\begin{table}` environment. This can be done using the `theme_latex()` function.

In the example below, we call `theme_latex()` explicitly for a single table, but the [themes vignette](https://vincentarelbundock.github.io/tinytable/vignettes/theme.html) shows how to set a global theme using the `tinytable_tt_theme` option.

````{verbatim}
---
title: "Crossref Example"
format:
  pdf: default
  html: default
crossref:
  custom:
    - kind: float
      key: apptbl
      latex-env: apptbl
      reference-prefix: Table A
      space-before-numbering: false
      latex-list-of-description: Appendix Table
apptbl-cap-location: top
---

See @apptbl-testing

::: {#apptbl-testing}

```{r}
library(tinytable)

tt(mtcars[1:5, ]) |> theme_latex(environment = "tabular")
```

Caption goes here.

:::
````

::: {.content-visible when-format="html"}
### Quarto data processing

Quarto automatically applies [some data processing](https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing) to the content of the tables it renders. By default, `tinytable` disables this processing, because it can enter in conflict with styling and formatting features of the package. 

To enable Quarto data processing, we can use the `quarto` argument of the `format_tt()` function. This argument allows users to mark certain cells explicitly for processing by Quarto, by wrapping them in a special "span" called "data-qmd", supported by Quarto: 

```{r, eval = knitr::is_html_output()}
k <- data.frame(Thing = "qwerty", Citation = "@Lovelace1842")

tt(k) |> format_tt(quarto = TRUE)
```

Some users may want to apply Quarto data processing to all tables. This can be done with themes:

```{r, eval = knitr::is_html_output()}
theme_quarto <- function(x) format_tt(x, quarto = TRUE)
options(tinytable_tt_theme = theme_quarto)

tt(k)
```

Back to normal:

```{r, eval = knitr::is_html_output()}
options(tinytable_tt_theme = NULL)
```


Alternatively, users can set a global option to process all tables in Quarto, but they will then have to mark each cell with special content using  `format_tt(quarto)`:

```{r, eval = knitr::is_html_output()}
options(tinytable_quarto_disable_processing = FALSE)

x <- mtcars[1:5, 1:5]
tt(x)
```

Notice that Quarto is now processing the table, so we lose the default `tinytable` theme and get the default striped Quarto look.

Back to normal:

```{r, eval = knitr::is_html_output()}
options(tinytable_quarto_disable_processing = TRUE)
```
:::

### Sub-captions

With version 0.4.0 of `tinytable` and versions above 1.6 of Quarto---only available [as a pre-release build at the time of writing](https://quarto.org/docs/download/prerelease.html)--- users can specify sub-captions for tables. This is done by adding a `tbl-subcap` chunk option to the table chunk. We also need to use a `tinytable` theme to remove built-in table structure and let Quarto handle the table construction. Here is a simple example document:

````{verbatim}
---
format: pdf
---

See @tbl-example, @tbl-example-1, or @tbl-example-2.

```{r}
#| label: tbl-example
#| tbl-cap: "Example"
#| tbl-subcap:
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

library(tinytable)
tt(head(cars)) |> theme_latex(table = FALSE)
tt(head(pressure)) |> theme_latex(table = FALSE)
```
````

### Slides: RevealjS

Quarto can create slides using [the RevealJS framework](https://revealjs.com/). Unfortunately, RevealJS does not include Bootstrap, so `tinytable` will not be as pretty as in other HTML documents, and the font size will often be too big. 

A good workaround is to use the `theme_revealjs()` function. For a one time use:

````{verbatim}
```{r}
library(tinytable)
tt(head(iris)) |> theme_revealjs()
```
````

To style all tables in a slide show, use a global option:

````{verbatim}
```{r}
options(tinytable_tt_theme = "revealjs")
tt(head(iris))
```
````

To select a specific font size, use the `fontsize` argument:

````{verbatim}
# Slide title

This is a nice table:

```{r}
library(tinytable)
options(tinytable_tt_theme = \(x) theme_revealjs(x, fontsize = .5))
tt(head(iris))
```
````

### Same table, different styles

In some cases, the user wants to print a single table multiple times with different styles in a single HTML document. This will sometimes cause issues, because the `style_tt()` function inserts several javascript functions to modify the same table, thus creating conflicts. A simple solution is to change the unique ID of the table object manually. 

Consider this RevalJS slideshow in which we sequentially highlight different rows of the data frame:

````{verbatim}
---
format: revealjs
---

## Page 1

```{r}
library(tinytable)

tab <- tt(head(iris))
tab
```

## Page 2

```{r}
tab@id <- "table_01"
tab |> style_tt(i = 3, background = "skyblue")
```

## Page 3

```{r}
tab@id <- "table_02"
tab |> style_tt(i = 5, background = "orange")
```
````

### Typst

See [the Tips and Tricks on Typst](https://vincentarelbundock.github.io/tinytable/vignettes/tips.html#typst) for important notes on using Typst in Quarto documents.



## Rmarkdown

### Math

In some cases, Rmarkdown automatically modifies the URL that `tinytable` uses to load MathJax and render mathematical content. One alternative is to call the MathJax script manually as described in the [math section of the documentation](https://vincentarelbundock.github.io/tinytable/vignettes/format.html#math).

Alternatively, you can specify the MathJax URL in the YAML header of your notebook, and use an appropriate global option.

````{verbatim}
---
output:
  html_document:
    self_contained: true
    math_method:
      engine: mathjax
      url: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js
---

```{r}
library(tinytable)
options(tinytable_html_mathjax = TRUE)

tbl <- tibble::tribble(
  ~Mathematics, ~Physics,
  "function, $f (x)$", "potential energy, $P(x)$",
  "derivative, $f\\prime (x)$", "force, $F(x) = -P\\prime(x)$",
  "$\\min_x f(x) \\implies f\\prime (x) = 0$",
  "equilibrium, $\\min_x P(x) \\implies F (x) = 0$"
)

tt(tbl)
```
````


### `papaja`


`papaja` is a package to assist in the preparation of APA manuscripts. Cross-references can be a bit challenging to implement when using this package with `tinytable`. When the target format is PDF, one workaround is to use raw LaTeX code to make renferences and labels.

For example:

````{verbatim}
---
output            : 
  papaja::apa6_pdf:
    latex_engine: xelatex
    fig_caption: yes
    keep_tex: false
header-includes   :
  - \usepackage{tabularray}
  - \usepackage{graphicx}
  - \UseTblrLibrary{booktabs}
  - \UseTblrLibrary{siunitx}
  - \newcommand{\tinytableTabularrayUnderline}[1]{\underline{#1}}
  - \newcommand{\tinytableTabularrayStrikeout}[1]{\sout{#1}}
  - \NewTableCommand{\tinytableDefineColor}[3]{\definecolor{#1}{#2}{#3}}
  - \usepackage{caption,fixltx2e}
  - \usepackage[table]{xcolor}
---

# tidytable

Table \ref{tab:tinytableref}

```{r}
library(tinytable)
tt(head(iris), caption = "\\label{tab:tinytableref} Hello world!") |>
  style_tt(color = "blue")
```
```{r}
````





## Bookdown

### Cross-references

The `bookdown` package uses a special syntax to handle cross-references, and it does not recognize `tinytable` objects as tables automatically. To include cross-references to tables, it is thus necessary to use the `caption` argument of `tinytable::tt()`, and to insert a `bookdown` label in that caption. Here is an example:


````{verbatim}
Table \@ref(tab:tinytableref)

```{r}
library(tinytable)
tt(head(iris), caption = "(#tab:tinytableref) Hello world!") |>
  style_tt(color = "blue")
```
````


## Litedown

[`litedown` is a lightweight version of R Markdown](https://yihui.org/litedown/) designed by Yihui Xie. `tinytable` supports `litedown` output in HTML, LaTeX, and Markdown formats.

::: {.callout-tip title="LaTeX Preamble"}
LaTeX packages are not loaded automatically, so the user needs to add them manually to the YAML header, to ensure they get inserted in the preamble. See the "LaTeX preamble" section of `?tt` for  details.
:::

```{r}
#| eval: false
library(tinytable)
head(iris) |>
    tt() |>
    style_tt(background = "black", color = "white")
```
