# Interactive tables

```{r}
#| include: false
pkgload::load_all()
options(tinytable_html_engine = "tabulator")
```

## Introduction

The `tinytable` package supports creating interactive tables using the [Tabulator.js](https://tabulator.info/) library. Tabulator is a powerful JavaScript library that provides features like sorting, filtering, pagination, and real-time data editing directly in the browser.

## About Tabulator.js

[Tabulator.js](https://tabulator.info/) is a feature-rich, dependency-free JavaScript library for building interactive tables. Key features include:

- **Interactive Sorting**: Click column headers to sort data
- **Real-time Filtering**: Filter data with built-in or custom filters  
- **Pagination**: Handle large datasets with client-side pagination
- **Cell Editing**: Edit data directly in the table
- **Responsive Design**: Tables adapt to different screen sizes
- **Themes**: Multiple built-in CSS themes
- **Data Export**: Export data to CSV, JSON, PDF, and other formats
- **Accessibility**: ARIA compliant for screen readers

Unlike static HTML tables, Tabulator tables are fully interactive and don't require server round-trips for basic operations like sorting and filtering.

## Basic Usage

To create an interactive table, use `output = "tabulator"` when printing your table:

Alternatively, you can set a global option to make all tables in HTML documents (like Quarto or R Markdown) use tabulator by default:

```{r}
#| eval: false
# Set tabulator as default for HTML documents
options(tinytable_html_engine = "tabulator")

# Now all tables will be interactive by default in HTML output
tt(dat)
```

To create a single interactive table explicitly:

```{r}
dat <- data.frame(
  name = c("Alice", "Bob", "Charlie"),
  age = c(25, 30, 35),
  city = c("New York", "London", "Paris")
)
tt(dat)
```

## Theme

```{r}
tt(iris) |> theme_tt("tabulator")
```



## Comprehensive Example

Here's a more comprehensive example showing various data types and formatting options:

```{r}
# Create comprehensive test data with various variable types
set.seed(123)
N <- 8
dat <- data.frame(
    # Character column
    employee_name = c(
        "Alice Johnson", "Bob Smith", "Charlie Brown", "Diana Prince",
        "Edward Norton", "Fiona Apple", "George Lucas", "Hannah Montana"),

    # Integer column
    age = as.integer(c(25, 32, 28, 35, 42, 29, 38, 31)),

    # Numeric columns with different scales
    salary = c(45000.75, 62000.50, 58000.25, 71000.00, 85000.33, 52000.80, 69000.45, 61000.90),
    bonus_pct = c(0.125, 0.18, 0.095, 0.22, 0.15, 0.11, 0.175, 0.14),

    # Large numbers for thousands separator testing
    stock_value = c(
        1234567.89, 2345678.12, 987654.32, 3456789.01,
        4567890.23, 1987654.45, 2876543.67, 3987654.21),

    # Logical columns
    active = c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE),
    remote_work = c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE),

    # Date column
    hire_date = as.Date(c(
        "2020-01-15", "2019-06-01", "2021-03-10", "2018-09-20",
        "2022-02-14", "2020-11-05", "2019-12-01", "2021-07-30")),

    # Factor column (will be treated as character)
    department = factor(c(
        "Engineering", "Sales", "Marketing", "Engineering",
        "HR", "Sales", "Engineering", "Marketing")),
    stringsAsFactors = FALSE
)

# Create tinytable object and apply formatting using pipes
tt(dat) |>
  # Format salary with 0 decimal places and space thousands separator
  format_tt(j = "salary", digits = 0, num_mark_big = " ") |>
  # Format bonus percentage with 1 decimal place
  format_tt(j = "bonus_pct", digits = 1, num_fmt = "decimal") |>
  # Format stock value with suffix notation (K, M, B)
  format_tt(j = "stock_value", digits = 2, num_suffix = TRUE, num_mark_big = ",") |>
  # Format age with no decimal places (should work since it's integer)
  format_tt(j = "age", digits = 0) |>
  # Try to format character column (should be skipped)
  format_tt(j = "employee_name", sprintf = "Mr/Ms %s") |>
  # Format date column using Luxon date format
  format_tt(j = "hire_date", date = "M/d/yyyy")
```

## Data Type Handling

Tabulator output handles different data types intelligently:

### Numeric Data
- **Integers**: Formatted with `money` formatter, no decimal places by default
- **Doubles/Numeric**: Formatted with `money` formatter, 2 decimal places by default  
- **Thousands separators**: Controlled by `num_mark_big` parameter
- **Decimal separators**: Controlled by `num_mark_dec` parameter
- **Suffix notation**: Use `num_suffix = TRUE` for K/M/B/T suffixes

### Logical Data
- **Boolean values**: Displayed as checkmarks (✓) and crosses (✗) using `tickCross` formatter
- Provides clear visual indication of TRUE/FALSE values

### Date Data
- **Date columns**: Use Luxon library for proper date parsing and formatting
- **Sorting**: True chronological sorting, not alphabetical
- **Display formats**: Controlled by `date` parameter in `format_tt()`
- **Input format**: Always expects ISO date strings (YYYY-MM-DD) from R

### Character Data
- **Text columns**: Use `plaintext` formatter
- **Pre-formatted**: Character columns use formatted data from `format_tt()`

## Formatting Features

### Number Formatting

```{r}
# Chain multiple number formatting operations
tab <- tt(dat) |>
  # Basic number formatting
  format_tt(j = "salary", digits = 0, num_mark_big = ",") |>
  # Percentage formatting  
  format_tt(j = "bonus_pct", digits = 1, num_fmt = "decimal") |>
  # Large number suffixes
  format_tt(j = "stock_value", digits = 2, num_suffix = TRUE)
```

### Date Formatting  

```{r}
# Different date format examples
# US format: M/d/yyyy -> 1/15/2020
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "M/d/yyyy")

# European format: d/M/yyyy -> 15/1/2020  
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "d/M/yyyy")

# ISO format with time: yyyy-MM-dd HH:mm -> 2020-01-15 00:00
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "yyyy-MM-dd HH:mm")

tab
```

**Note**: For tabulator output, the `date` parameter uses Luxon date format tokens, not R's `strptime` format. Common patterns:

| Luxon Format | Output Example | Description |
|-------------|---------------|-------------|
| `M/d/yyyy` | 1/15/2020 | US short format |
| `MM/dd/yyyy` | 01/15/2020 | US padded format |
| `d/M/yyyy` | 15/1/2020 | European short format |
| `dd/MM/yyyy` | 15/01/2020 | European padded format |
| `yyyy-MM-dd` | 2020-01-15 | ISO format |
| `MMM d, yyyy` | Jan 15, 2020 | Long month name |

## Interactive Features

Once rendered in a browser, Tabulator tables provide several interactive features:

### Sorting
- **Click column headers** to sort ascending/descending
- **Multiple column sorting** with Shift+click
- **Date columns** sort chronologically, not alphabetically
- **Numeric columns** sort numerically, not as strings

### Built-in Functionality
- **Responsive design** adapts to screen size
- **Keyboard navigation** with arrow keys
- **Accessibility** features for screen readers
- **Mobile-friendly** touch interactions

### Themes
Tabulator supports multiple CSS themes. The default is Bootstrap 5, but you can customize the appearance using the `theme_tabulator()` function (when available).

## Technical Implementation

### Dependencies
- **Luxon.js**: Used for date parsing and formatting
- **Tabulator.js v6.3**: Core table functionality
- **jsonlite**: R package for JSON serialization (automatically loaded)

### Data Processing
1. **Raw data preservation**: Numeric, logical, and date columns use original R data
2. **Client-side formatting**: Display formatting happens in the browser
3. **String pre-processing**: Character columns are pre-formatted in R
4. **Date serialization**: Dates converted to ISO strings for JavaScript parsing

### Browser Compatibility
Tabulator.js supports all modern browsers including:
- Chrome/Edge 70+
- Firefox 60+  
- Safari 12+
- Mobile browsers (iOS Safari, Android Chrome)

## Comparison with Static Tables

| Feature | Static HTML | Interactive Tabulator |
|---------|------------|---------------------|
| Sorting | No | Yes, client-side |
| Filtering | No | Yes, built-in |
| Pagination | No | Yes, client-side |
| Editing | No | Yes, in-place |
| File Export | No | Yes, multiple formats |
| Responsive | Basic | Advanced |
| Performance | Fast load | Fast interaction |
| Dependencies | None | Tabulator.js + Luxon |

## Best Practices

1. **Use for interactive reports**: Best for dashboards and interactive documents
2. **Consider data size**: Client-side processing works well up to ~10,000 rows  
3. **Format appropriately**: Use `format_tt()` to prepare data display
4. **Test in browsers**: Always test interactive features in target browsers
5. **Provide fallbacks**: Consider offering static alternatives for accessibility

## Limitations

- **R Markdown/Quarto compatibility**: Works in HTML output formats only
- **Printing**: Interactive features don't translate to printed documents  
- **Email compatibility**: Most email clients don't support interactive JavaScript
- **Dependency requirement**: Requires `jsonlite` package for JSON serialization

## Getting Help

For issues specific to:
- **tinytable integration**: Use the [tinytable GitHub issues](https://github.com/vincentarelbundock/tinytable/issues)
- **Tabulator.js features**: Consult the [official Tabulator documentation](https://tabulator.info/docs/)
- **Date formatting**: See the [Luxon format documentation](https://moment.github.io/luxon/#/formatting)


```{r}
# reset the global option to Bootstrap to avoid affecting other documents
options(tinytable_html_engine = NULL)
```


