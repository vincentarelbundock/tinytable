---
format:
  html:
    embedded-resources: true
---

```{r}
#| include: false
options(tinytable_html_engine = "tabulator")
pkgload::load_all()
```

# Interactive tables

The `tinytable` package supports creating interactive tables using [the Tabulator.js library.](https://tabulator.info/) Tabulator is a powerful JavaScript library that provides features like 

* Sorting 
* Filtering
* Pagination
* Themes
* Data export
* Real-time data editing in the browser
* Accessibility features (ARIA compliant)

## Drawing, printing, and saving

To create an interactive table, use `output = "tabulator"` when printing your table:

```{r}
#| eval: false
library(tinytable)
dat <- head(iris)
tt(dat) |> print("tabulator")
```

To save the table to file, we can use the `save_tt()` function. One issue to consider, however, is that `tinytable` supports two types of HTML output: `tabulator` and `bootstrap`. To select the default HTML engine, users can set a global option:

```{r}
#| eval: false
options(tinytable_html_engine = "tabulator")
tt(dat) |> save_tt("/path/to/your/file.html")
```

In notebooks like Quarto or R markdown, `tinytable` will automatically create an HTML when appropriate. Whenn the `tinytable_html_engine` option is set to `"tabulator"`, the table will be rendered using Tabulator.js.

```{r}
dat <- data.frame(
  city = c("MontrÃ©al", "Toronto", "Vancouver"),
  salary = c(14002.22, 201399.11, 80188.38),
  random = c(1.43402, 201.399, 0.134588),
  date = as.Date(sample(1:1000, 3), origin = "1970-01-01"),
  boolean = c(TRUE, TRUE, FALSE)
)

tt(dat)
```

## Pagination and filtering

`tinytable` includes a built-in theme to add pagination, sorting, and filtering capabilities to a Tabulator table. This is particularly useful for large datasets. 

To apply a theme, call the `theme_tt()` function with the `"tabulator"` argument. See `?theme_tt` for a list of arguments that can be used to customize the number of pagination rows, behaviour of the search bar, and various other elements.

Try typing the letters "vir" in the search box to filter the `iris` dataset and find the Virginica flowers.

```{r}
tt(iris) |> theme_tt("tabulator", pagination = c(5, 10, 50))
```


## Format

### Numbers Formatting

```{r}
#| eval: false
# Chain multiple number formatting operations
tab <- tt(dat) |>
  # Basic number formatting
  format_tt(j = "salary", digits = 0, num_mark_big = ",") |>
  # Percentage formatting  
  format_tt(j = "bonus_pct", digits = 1, num_fmt = "decimal") |>
  # Large number suffixes
  format_tt(j = "stock_value", digits = 2, num_suffix = TRUE)
```

### Dates

```{r}
#| eval: false
# Different date format examples
# US format: M/d/yyyy -> 1/15/2020
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "M/d/yyyy")

# European format: d/M/yyyy -> 15/1/2020  
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "d/M/yyyy")

# ISO format with time: yyyy-MM-dd HH:mm -> 2020-01-15 00:00
tab <- tt(dat) |>
  format_tt(j = "hire_date", date = "yyyy-MM-dd HH:mm")

tab
```

**Note**: For tabulator output, the `date` parameter uses Luxon date format tokens, not R's `strptime` format. Common patterns:

| Luxon Format | Output Example | Description |
|-------------|---------------|-------------|
| `M/d/yyyy` | 1/15/2020 | US short format |
| `MM/dd/yyyy` | 01/15/2020 | US padded format |
| `d/M/yyyy` | 15/1/2020 | European short format |
| `dd/MM/yyyy` | 15/01/2020 | European padded format |
| `yyyy-MM-dd` | 2020-01-15 | ISO format |
| `MMM d, yyyy` | Jan 15, 2020 | Long month name |

## Style

Support for `style_tt()` is very limited in interactive tables. For now, only the `align` and `alignv` arguments are supported.

```{r}
tt(dat) |> style_tt(align = "r")
```

## CSS

For more advanced styling, you can add custom CSS rules using the `css_rule` argument in `theme_tt()`. The CSS rule must include at least one `$TINYTABLE_ID` placeholder, which gets replaced with the unique table identifier to ensure styles only apply to that specific table.

```{r}
css_rule <- "
$TINYTABLE_ID .tabulator-header .tabulator-col {
  background-color: black;
  color: white;
}
"
tt(dat) |> 
  theme_tt("tabulator", css_rule = css_rule)
```

## Style sheets

Tabulator ships with multiple complete CSS style sheets. The default in `tinytable` is Bootstrap 5, but you can customize the appearance using the `theme_tt()` function (when available). Alternatives include `"default"`, `"simple"`, `"midnight"`, `"modern"`, `"site"`, `"site_dark"`, `"bootstrap3"`, `"bootstrap4"`, `"bootstrap5"`, `"semanticui"`, `"bulma"`, and `"materialize"`.

```{r}
tt(iris) |> theme_tt("tabulator")
```


```{r}
#| include: false
# reset the global option to Bootstrap to avoid affecting other documents
options(tinytable_html_engine = NULL)
```


