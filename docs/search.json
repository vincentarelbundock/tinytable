[
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘tinytable’ in publications use:\n\nArel-Bundock V (2025). tinytable: Simple and Configurable Tables in ‘HTML’, ‘LaTeX’, ‘Markdown’, ‘Word’, ‘PNG’, ‘PDF’, and ‘Typst’ Formats. R package version 0.11.0, https://vincentarelbundock.github.io/tinytable/.",
    "crumbs": [
      "Tutorial (PDF)",
      "Citation"
    ]
  },
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "News",
    "section": "",
    "text": "New:\n\nThe Tabulator JS framework can now be used to create interactive HTML tables with filtering, pagination, search, etc. tt(x) |&gt; theme_tt(\"tabulator\") |&gt; print(\"tabulator\")\n\n\n\n\nBreaking changes:\n\ntheme_spacing() function has been removed. Use the new height argument in tt() instead for row height control.\nIndexing for format_tt() is now consistent with style_tt() and plot_tt(). It refers to rows and columns in the final table, after insertions by group_tt().\nArgument indent is removed form the group_tt() function. Use style_tt(x, \"~groupi\", indent = 1) instead.\nprint(\"dataframe\") is now consistent with other formats and only prints the result. Use save_tt(\"dataframe\") to obtain a data frame.\n\nNew features:\n\nShortcuts available in i for style_tt() and format_tt():\n\n\"group\": row group rows (complement of “groupi”)\n\"~groupi\": complement of “groupi”\n\"groupj\": header rows\n\"colnames\": column names\n\"caption\": caption\n\"notes\": notes\n\ntt(height=2) controls row height in em units. Works HTML, LaTeX, and Typst.\nformat_tt() argument i accepts character strings to format specific table components: “colnames”, “caption”, “notes”, “groupi” (row group labels), “groupj” (column group labels).\ngroup_tt(i = ..., j = ...) now supports matrix insertion: when i is an integer vector and j is a character matrix, rows from the matrix are inserted at the specified positions. Single-column matrices are automatically reshaped when the number of elements is a multiple of the table’s column count.\ngroup_tt(i = ...) can now be called multiple times to insert several rows one after the other.\nstyle_tt(colspan) is now supported for Markdown and Typst outputs.\nstyle_tt(i = \"~groupi\") styles all non-group rows (complement of “groupi”).\noptions(tinytable_color_name_normalization=TRUE) (default): automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with “#” prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\nTypst: Major refactor improves several things and brings Typst very close to feature parity with other formats.\n\nTypst code is not much more efficient and concise. Tables over 500 pages long compile in mere seconds. Thanks to @brynhum for the report and tips on implementation #475.\nrowspan and colspan arguments are now supported, with informative error messages when they are not used correctly.\nSupport for alignv argument in style_tt(). This allows vertical alignment of cells in Typst tables.\nplot_tt() supports height.\nSupport rowsep in theme_tt(\"spacing\").\n\nMisc:\n\nIssue #392: reinstate informative error when format_tt() uses num_mark_big without digits argument.\nImprovements to theme_tt(\"revealjs\").\nImprovements to markdown output with long cell content.\n\nBugs:\n\nFixed matrix row duplication in group_tt(): single matrix rows are now properly duplicated when inserted at multiple positions using syntax like group_tt(i = c(2, 5), j = matrix).\nFixed bootstrap header issues in HTML tables with grouped data.\nFixed duplicate header problems in LaTeX/Tabularray output.\nFixed long row handling in markdown output format.\nFix theme_bootstrap() for LaTeX and Typst. Issue #479.\ntheme_tt(\"multipage\") correctly converts LaTeX environment to longtblr. Thanks to @ujtwr for report #493.\n\nInternal changes:\n\nMajor refactor of group_tt() architecture: removed legacy lazy evaluation system (@lazy_group_i, @lazy_group_j) in favor of direct data structure manipulation with @group_data_i and @group_data_j slots.\nSimplified format_tt() function implementation for better performance and maintainability.\nEnhanced Typst backend with improved header handling and code efficiency.\nImproved grid backend with colspan support for text output.\nComprehensive expansion of snapshot tests for matrix insertion functionality.\nStreamlined class architecture by removing unused legacy code paths.\n\n\n\n\nBugs:\n\nMajor refactor of rowspan for HTML files. Thanks to @J-Moravec and @ASKurz for reports #355 and #457.\ntheme_tt(x, \"multipage\") failed to insert rowhead in LaTeX. Thanks to @sTeADone for report #460.\nError when x is a data.table without columns.\nAdjust Markdown table width when group_tt(i = ) labels are long. Thanks to @JohannesNE for report #469.\n\nMisc:\n\ngroup_tt() argument j accepts a single string as delimiter (ex: \"_\") when column names of the data frame include group names. Thanks to @sda030 for the feature request, a first implementation, and testing.\nstyle_tt(i = \"groupi\") styles group rows.\ntheme_revealjs() now supports dark theme with css = \"dark\" argument.\nMany improvements to the documentation and vignettes\nNew vignette with table of contents for CRAN\ntt() gets a colnames argument, instead of having to delete names manually.\n\n\n\n\nNew:\n\nstrip_tt() function removes elements of an existing tinytable object.\n\nBugs:\n\nTypst footnotes with cell coordinates. Thanks to @sverrirarnors for report #456.\n\nDocs improvement:\n\nQuarto issue with - as list. Thanks to Chris Goodman.\n\n\n\n\nNew:\n\nSupport for litedown notebooks with “latex”, “html”, or “markdown” output.\n\nBugs:\n\nformat_tt() works on tibbles. Thanks to @jon-mellon for report #426.\nRespects the “Chunk Output in Console” option in RStudio. Thanks to @richardohrvall for issue #851 on the modelsummary repository.\nFunction themes broke HTML tables. Thanks to @kazuyanagimoto for report #439.\ntabularray LaTeX update breaks theme_tt(\"rotating\"). Thanks to @kylebutts for report #444.\n\nTests:\n\nUsing the latest tinysnapshot means snapshot tests are no longer sensitive to random seeds.\n\n\n\n\nBreaking change:\n\nformat_tt() is now stricter, applying no formatting at all by default. Users must specify an argument explicitly or set a global option to change the table.\nS4 slots renamed for internal consistency and clarity.\n\nBugs:\n\nsave_tt(\"file.pdf\") works with colors. Thanks to @olivedv for the report and solution #395.\ngroup_tt(i=vec): vec can be a factor vector\nstyle_tt(align=\"d\") with empty strings (modelsummary::datasummary_balance() test)\nstyle_tt(line_color) accepts Hex codes. Thanks to @andrewheiss for report #415.\ntt(rownames=TRUE) should not add column names if they do not exist. Thanks to @Nowosad for report #414.\nstyle_tt(tabularray_outer = ...) correctly inserts argument in outer. Issue #419. Thanks to @wklimowicz\n\nNew:\n\nstyle_tt(\"notes\") and style_tt(\"caption\") can style footnotes and captions. Note: This will only style captions handled by the caption argument in tt(), and not captions created by Quarto.\nUsing table@group_index_i is now documented.\n\nMisc:\n\nDocumentation improvements\n\n\n\n\n\nBug fix: d-column LaTeX generated an error in some cases.\n\n\n\n\n\nMajor refactor of the style internals. HTML, LaTeX, and Typst documents should be much more concise and efficient.\ntheme_tt(\"spacing\"): Change the row and column spacing to create more compact or airy tables. LaTeX and HTML only. Thanks to @statzhero for feature request #353.\nstyle_tt(): the i and j indices are now consistent in all formats. They refer to rows after the insertion of row groups.\nsave_tt() respects options(tinytable_save_overwrite=TRUE)\nLaTeX: Guard header rows when using style_tt(align=\"d\"). Issue #367\nInline display in Quarto and Rmarkdown notebooks. options(tinytable_print_rstudio_notebook = \"inline\") or \"viewer\"\n\nBugs:\n\nTypst notes returned an error since the last release. Thanks to @DominikVogel for report #357.\nDuplicate group labels are allowed in LaTeX with group_tt(). Thanks to @eeemda for report #362.\n\n\n\n\nNew:\n\noutput=\"html_portable\" returns a portable HTML file, where plot_tt() encodes and embeds the images directly in the HTML code, rather than link to external images. Thanks to @J-Moravec for implementing this nice feature!\nformat_tt() gets a math argument to wrap cell content in \\(...\\) math mode.\ngroup_tt(i = vec) accepts a vector of labels of length equal to the number of rows in the dataset.\ntt() gets an escape argument. Thanks to Cameron Patrick for the feature request.\nThe i argument in style_tt() now accepts a logical matrix of same dimensions as x, to style specific cells, rather than all combinations of i and j vectors. Thanks to @dhicks for the feature request #329.\nstyle_tt() gets new output argument for conditional styling based on output format.\nnames() method now supported for both returning column names and re-assingning them. Issue #332.\n\nTypst:\n\nTable code is much more concise and efficient.\nFix indexing bug for groups. Issue #323 and #343.\nstyle_tt() can override cell styling with successive calls, and the call order is respected.\noptions(tinytable_quarto_figure = FALSE) wraps Typst tables in a figure environment in Quarto documents.\n\nBugs:\n\ntheme_tabular() is no longer greedy in replacing cmidrule. Thanks to @jsr-p for code submission #349.\n\n\n\n\n\n\nHTML tables no longer insert MathJax scripts by default. This behavior could enter in conflict with other MathJax scripts loaded explicitly by the user or automatically by Quarto. Users can revert to the previous behavior by setting a global option:\noptions(tinytable_html_mathjax = TRUE)\nAlternatively, users can insert appropriate scripts directly in their HTML document or as a Quarto literal chunk:\n```{=html}\n&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n&lt;/script&gt;\n```\n\nOption tinytable_markdown_hlines has been removed. To get a more minimal looking markdown table, use output “gfm” which is gfm compliant.\n\n\n\n\n\nGlobal options are more consistent and better documented. Thanks to @kylebutts for PR #313.\nSupport Viewer Pane in Positron IDE. Thank to @kylebutts for code contribution in PR #299.\nImproved documentation.\nformat_tt(markdown=TRUE) escapes groups and notes when i and j are NULL.\nplot_tt(): The height argument is now respected in Markdown and Word documents.\ngroup_tt() allows 0 and duplicates in i argument for labels in the first row and consecutive labels.\nHeaders are now styled and formatted when i=NULL.\ncolnames(x)&lt;-NULL works on a tinytable object.\nformat_tt(num_big_mark) applies to integer columns.\nUse getOption(\"viewer\") instead of rstudioapi::viewer() for positron support\nglue::glue() string is accepted by format_tt(). Thanks to @LukasWallrich for report #792 on the modelsummary repository.\nSupport Github Flavored Markdown (gfm) output. Thanks to @kylebutts for contribution #315.\ntheme_tt(\"rotate\") to rotate tables in LaTeX or Typst.\nsave_tt(\"/path/to/file\") returns the file path invisibly. Thanks to @yjunechoe for issue #328.\n\n\n\n\n\nSimplify JS functions in HTML documents. Avoid nesting full HTML documents inside Quarto output.\nRemove polyfill JS because of security issues.\nAvoid error in interactive use in Positron.\n\n\n\n\n\ntheme_tt(\"tabular\") no longer uses tabularray or booktabs. Only relies on basic LaTeX packages.\ntheme_tt(\"tabular\", style = \"tabularray\") does the same as above, but keeps the \\begin{tblr} environment.\n\n\n\n\n\nstyle_tt() supports align for different rows and cells, rather than just whole columns.\nstyle_tt() supports indent argument.\ngroup_tt() supports indent argument.\nNo more gutters when group_tt(j) and style_tt(background)\ntheme_tt(x, horizontal = \"l\") can left, center, or right-align a table in the page.\n\n\n\n\n\nsave_tt(\"pdf\"):\n\noptions(tinytable_save_pdf_clean = TRUE)\noptions(tinytable_save_pdf_engine = \"xelatex\")\n\noptions(tinytable_tt_rownames=TRUE): Print row names in the first column by calling. Thanks to @rsbivand for Issue #264.\nEXPERIMENTAL: options(tinytable_html_mathjax = TRUE). Inserts MathJax scripts in the HTML file. This may cause conflicts if MathJax is otherwise loaded in the document.\n\n\n\n\n\nFootnotes were center-aligned in some Quarto chunks. Thanks to @andrewheiss for report #303.\nreplace does not work in LaTeX with format_tt(quarto=TRUE). Thanks to @cbgoodman for Issue #263.\nstyle_tt(indent) works for LaTeX\nNotes were hard-coded to 5 colspan. We now use the actual number of columns in the table. Thanks to @DominikVogel for report #788.\nDo not suppress labels when inserting notes. Thanks to @cportner for Issue #290.\nformat_tt() on a table without column names. Thanks to @andrewheiss for report #306.\nrequires [] in tabularray but () otherwise. Thanks to @andrewheiss for report #307.\n\n\n\n\n\nBreaking change:\n\nThe width argument is moved from style_tt() to tt().\n\ntt():\n\nwidth argument now accepts a vector of numeric values to control the width of each column, as a proportion of the total linewidth.\n\nformat_tt():\n\nNew quarto argument enables Quarto data processing for the whole table and marks specific cells as containing Quarto content. This is especially useful to include @Citation1981 in a table. Thanks to @andrewheiss for issue #215 and @giabaio for further discussion and debugging.\nNew replace argument which accepts a single logical, a single string, or a named list to specify multiple replacements.\nreplace=TRUE by default replaces NA by an empty string. FALSE prints “NA” as string.\nreplace_na is deprecated in favor of replace. Backward compatibility is maintained and a warning is issued.\nAll arguments can now be set using global options.\n\ntheme_tt():\n\n“void” is now supported for Typst tables. Thanks to @marcboschmatas for PR #223.\n\nstyle_tt():\n\nNo longer keep many versions of the same data frame, which could increase memory use. Thanks to @MarcoPortmann for the report.\n\nsave_tt():\n\nDo not change working directory when saving to file raises an error. Thanks to @etiennebacher for report #225.\n\nTypst:\n\nBetter compatibility with Quarto captions. Recommended strategy is to not use the caption argument, and rather to define both the label and tbl-cap chunk options in Quarto. This is a breaking change, as Typst tables are no longer enclosed in a #figure environment in Quarto documents when both tbl-cap and label chunk options are defined.\nformat_tt(escape=TRUE) escapes square brackets.\nTables are centered by default.\n\nMisc:\n\nSupport beamer_presentations, but see: https://github.com/vincentarelbundock/tinytable/issues/244\nTable objects can be modified and printed several times —with styling— in a single HTML document like a ReavealJS slideshow. Thanks to @kazuyanagimoto for report #759.\nGlobal option to enable Quarto data processing: options(tinytable_quarto_disable_processing = FALSE). Thanks to @andrewheiss for issue #215.\n\nBug fixes:\n\nData frames without column headers could be displayed as “c(1,2,3,3)”. Bug in format_tt(). Issue #230.\nsave_tt() can now save to PDF when the table includes a caption. Thanks to @etiennebacher for report #224.\ngroup_tt(i) inserted an extra latex column, which made horizontal lines stop to early. Thanks to @andrewheiss for report #235.\nMultiple unnamed footnotes allowed in LaTeX tabularray. Issue #242.\n\n\n\n\n\nRStudio displays table in HTML viewer by default when the rstudioapi package is available.\ncolnames and colnames&lt;- are now exported functions.\ntt() supports data.frame-like objects which also inherit from other classes, ex: marginaleffects::slopes()\nBug: options(tinytable_tt_print) is respected in print() without argument.\n\n\n\n\nNew features:\n\nrbind() and rbind2() can be used to stack tinytable objects. rbind2() is more flexible than rbind(). See ?tinytable::rbind2\nNew output format in print(): “dataframe”\nRename table headers: colnames(tab) &lt;- c(\"a\", \"b\", \"c\")\ntheme_tt(\"resize\") gets a direction argument with “up”, “down”, “both” options. Thanks to @MarcoPortmann for feature request #207\n\nMinor:\n\nInformative error message when no default browser is selected via global options.\nFix CRAN errors on Mac old releases.\n\nBugs:\n\ntheme_tt() resize issue with talltblr environment and notes in LaTeX. Thanks to @MarcoPortmann for reporting issue #206\n\n\n\n\nNew function theme_tt():\n\nFunction to apply collections of transformations to a tinytable.\nVisual themes:\n\ngrid, void, striped, bootstrap, default\n\nresize: Insert a LaTeX table in a resizebox environment to ensure a table fits the page, or to scale it to a fraction of \\linewidth\nplacement: Determine where a LaTeX table float is positioned. Ex: [H], [htbp]\nmultipage: Split long LaTeX tables across multiple pages with (optional) repeated headers/footers. Uses the longtblr environment from tabularray.\n\nformat_tt():\n\nNew i argument to format subsets of rows.\nNew fn argument which accepts an arbitrary function to format table content.\nnum_fmt=\"significant_cell\" rounds significant digits on a cell-by-cell basis rather than for full columns (as is default in base R format()).\nNumeric formatting options can be set via global options, defined in the function signature.\nnum_mark_big and num_mark_dec require an explicit digits. We now raise an informative error.\nescape = TRUE now escapes captions, notes, and spanning cells created by group_tt() when i and j are both NULL. To avoid escaping group labels, users can specify i and/or j explicitly.\n\nTypst format:\n\nSupport for row headers with group_tt(i)\nSupports images and inline plots with plot_tt(). Thanks to @aghaynes for contribution #155.\n“kind: tinytable” parameter is now added to all figures enclosing a tinytable. This allows users to apply targeted show rules. For example, in a table of contents: outline(target: figure.where(kind: \"tinytable\"))\n\nMisc:\n\nstyle_tt() gains a finalize argument. This accepts functions to be applied to the table object at the very end of the building process, to programmatically change its content. For example, this can be used with regular expressions to modify the text version of the table hosted in tab@table_string, or the function could programmatically modify the caption in tab@caption.\nstyle_tt(): LaTeX format supports decimal alignement with align=\"d\". The width of columns is determined by the maximum number of digits to the left and to the right in all cells specified by i, j.\nSupport RevealJS slides in Quarto documents.\nImproved support for tibble. ANSI characters (ex: fancy pillar formatting) are stripped automatically or converted to HTML when the fansi package is installed. fansi is a dependency of tibble, so it should often be installed.\nNew tinytable_tt_digits global option can set the default number of digits in the tt() function.\nRefactor: tinytable objects are now S4 class objects, with slots to hold data about the content and structure.\nas.character() now works on tinytable objects, returning a string in the output format specified by the @output slot of the tinytable object (markdown by default).\nLaTeX code in captions no longer requires double escaping, allowing: tt(x, caption = \"Blah blah \\\\label{tab:blah})\n\nBreaking changes:\n\nIn some cases, format_tt() could be use sequentially to apply two formats to the same cell. Now, multiple calls to format_tt() can still be make chained with pipes, but they must apply to different cells with i, j, otherwise only the last change is respected. One exception is the escape argument which can be applied to pre-formatted cells.\ntinytable objects no longer have a meta_tinytable attribute. Use S4 slots instead.\nplacement argument in tt() is removed in favor of theme_tt(\"placement\").\n\nBugs:\n\nformat_tt() did not work on factor vector.\n\n\n\n\n\nformat_tt() escapes &lt;&gt; tags in Typst.\nBug introduced in 0.0.4 prevented group_tt(i) in HTML.\n\n\n\n\nNew:\n\nj argument in style_tt() and format_tt() now accepts a string vector to match columns. Issue #122\nLine plots: plot_tt(fun = \"line\")\nformat_tt(j=NULL, escape=TRUE) now escapes column headers in addition to all cells.\nformat_tt() gains a replace_na argument to replace missing values.\nstyle_tt(): rowspan and colspan arguments are now supported in all formats except Typst. In markdown and Word, we get “pseudo-spans” with empty cells around the main cell, instead of true merged cells.\nstyle_tt(): alignv argument is now supported for LaTeX and HTML\n\nBugfix:\n\nMarkdown group columns when labels are wider than columns. Thanks to @etiennebacher for report #127.\nMarkdown group rows broke indexing when using style_tt(). Thanks to @strengejacke for report #133.\n\n\n\n\nNew:\n\nTypst tables are now supported using the tablex extension:\n\nhttps://typst.app/\nhttps://github.com/PgBiel/typst-tablex\n\nescape argument in format_tt() escapes or substitutes special characters in LaTeX or HTML output to prevent compilation and rendering errors.\nnotes argument in tt() can insert superscript markers inside cells to refer to notes at the bottom of the page.\n\ntt(x, notes = list(\"*\" = list(i = 0:1, j = 2, text = \"Hello world)))\n\nnotes agument in tt() now works wth Markdown and Word, but must be a single string.\ngroup_tt() can be called multiple times to create mult-row headers.\n\n\n\n\nImprovements:\n\nRules and cell borders: line, line_width, and line_color arguments.\nEnhanced knitr output detection.\nNew themes.\nCaption argument support for Markdown tables.\nDefensive programming enhancements.\nplot_tt() regular expression column selection.\nHeader/footer are no longer indented by group_tt(i).\n\nBug fixes:\n\nInline plots visibility in RStudio viewer pane.\nBug in group_tt(i) for markdown and docx output.\nResolved style_tt resetting issue.\nBug fix for column alignment in markdown affecting docx output.\n\nDocumentation:\n\nImproved vignette on the package website.\nVarious documentation updates.\nMath in $$ is the new recommendation.\n\n\n\n\nInitial package release. Yay!",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#development",
    "href": "NEWS.html#development",
    "title": "News",
    "section": "",
    "text": "New:\n\nThe Tabulator JS framework can now be used to create interactive HTML tables with filtering, pagination, search, etc. tt(x) |&gt; theme_tt(\"tabulator\") |&gt; print(\"tabulator\")",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section",
    "href": "NEWS.html#section",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\ntheme_spacing() function has been removed. Use the new height argument in tt() instead for row height control.\nIndexing for format_tt() is now consistent with style_tt() and plot_tt(). It refers to rows and columns in the final table, after insertions by group_tt().\nArgument indent is removed form the group_tt() function. Use style_tt(x, \"~groupi\", indent = 1) instead.\nprint(\"dataframe\") is now consistent with other formats and only prints the result. Use save_tt(\"dataframe\") to obtain a data frame.\n\nNew features:\n\nShortcuts available in i for style_tt() and format_tt():\n\n\"group\": row group rows (complement of “groupi”)\n\"~groupi\": complement of “groupi”\n\"groupj\": header rows\n\"colnames\": column names\n\"caption\": caption\n\"notes\": notes\n\ntt(height=2) controls row height in em units. Works HTML, LaTeX, and Typst.\nformat_tt() argument i accepts character strings to format specific table components: “colnames”, “caption”, “notes”, “groupi” (row group labels), “groupj” (column group labels).\ngroup_tt(i = ..., j = ...) now supports matrix insertion: when i is an integer vector and j is a character matrix, rows from the matrix are inserted at the specified positions. Single-column matrices are automatically reshaped when the number of elements is a multiple of the table’s column count.\ngroup_tt(i = ...) can now be called multiple times to insert several rows one after the other.\nstyle_tt(colspan) is now supported for Markdown and Typst outputs.\nstyle_tt(i = \"~groupi\") styles all non-group rows (complement of “groupi”).\noptions(tinytable_color_name_normalization=TRUE) (default): automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with “#” prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\nTypst: Major refactor improves several things and brings Typst very close to feature parity with other formats.\n\nTypst code is not much more efficient and concise. Tables over 500 pages long compile in mere seconds. Thanks to @brynhum for the report and tips on implementation #475.\nrowspan and colspan arguments are now supported, with informative error messages when they are not used correctly.\nSupport for alignv argument in style_tt(). This allows vertical alignment of cells in Typst tables.\nplot_tt() supports height.\nSupport rowsep in theme_tt(\"spacing\").\n\nMisc:\n\nIssue #392: reinstate informative error when format_tt() uses num_mark_big without digits argument.\nImprovements to theme_tt(\"revealjs\").\nImprovements to markdown output with long cell content.\n\nBugs:\n\nFixed matrix row duplication in group_tt(): single matrix rows are now properly duplicated when inserted at multiple positions using syntax like group_tt(i = c(2, 5), j = matrix).\nFixed bootstrap header issues in HTML tables with grouped data.\nFixed duplicate header problems in LaTeX/Tabularray output.\nFixed long row handling in markdown output format.\nFix theme_bootstrap() for LaTeX and Typst. Issue #479.\ntheme_tt(\"multipage\") correctly converts LaTeX environment to longtblr. Thanks to @ujtwr for report #493.\n\nInternal changes:\n\nMajor refactor of group_tt() architecture: removed legacy lazy evaluation system (@lazy_group_i, @lazy_group_j) in favor of direct data structure manipulation with @group_data_i and @group_data_j slots.\nSimplified format_tt() function implementation for better performance and maintainability.\nEnhanced Typst backend with improved header handling and code efficiency.\nImproved grid backend with colspan support for text output.\nComprehensive expansion of snapshot tests for matrix insertion functionality.\nStreamlined class architecture by removing unused legacy code paths.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-1",
    "href": "NEWS.html#section-1",
    "title": "News",
    "section": "",
    "text": "Bugs:\n\nMajor refactor of rowspan for HTML files. Thanks to @J-Moravec and @ASKurz for reports #355 and #457.\ntheme_tt(x, \"multipage\") failed to insert rowhead in LaTeX. Thanks to @sTeADone for report #460.\nError when x is a data.table without columns.\nAdjust Markdown table width when group_tt(i = ) labels are long. Thanks to @JohannesNE for report #469.\n\nMisc:\n\ngroup_tt() argument j accepts a single string as delimiter (ex: \"_\") when column names of the data frame include group names. Thanks to @sda030 for the feature request, a first implementation, and testing.\nstyle_tt(i = \"groupi\") styles group rows.\ntheme_revealjs() now supports dark theme with css = \"dark\" argument.\nMany improvements to the documentation and vignettes\nNew vignette with table of contents for CRAN\ntt() gets a colnames argument, instead of having to delete names manually.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-2",
    "href": "NEWS.html#section-2",
    "title": "News",
    "section": "",
    "text": "New:\n\nstrip_tt() function removes elements of an existing tinytable object.\n\nBugs:\n\nTypst footnotes with cell coordinates. Thanks to @sverrirarnors for report #456.\n\nDocs improvement:\n\nQuarto issue with - as list. Thanks to Chris Goodman.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-3",
    "href": "NEWS.html#section-3",
    "title": "News",
    "section": "",
    "text": "New:\n\nSupport for litedown notebooks with “latex”, “html”, or “markdown” output.\n\nBugs:\n\nformat_tt() works on tibbles. Thanks to @jon-mellon for report #426.\nRespects the “Chunk Output in Console” option in RStudio. Thanks to @richardohrvall for issue #851 on the modelsummary repository.\nFunction themes broke HTML tables. Thanks to @kazuyanagimoto for report #439.\ntabularray LaTeX update breaks theme_tt(\"rotating\"). Thanks to @kylebutts for report #444.\n\nTests:\n\nUsing the latest tinysnapshot means snapshot tests are no longer sensitive to random seeds.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-4",
    "href": "NEWS.html#section-4",
    "title": "News",
    "section": "",
    "text": "Breaking change:\n\nformat_tt() is now stricter, applying no formatting at all by default. Users must specify an argument explicitly or set a global option to change the table.\nS4 slots renamed for internal consistency and clarity.\n\nBugs:\n\nsave_tt(\"file.pdf\") works with colors. Thanks to @olivedv for the report and solution #395.\ngroup_tt(i=vec): vec can be a factor vector\nstyle_tt(align=\"d\") with empty strings (modelsummary::datasummary_balance() test)\nstyle_tt(line_color) accepts Hex codes. Thanks to @andrewheiss for report #415.\ntt(rownames=TRUE) should not add column names if they do not exist. Thanks to @Nowosad for report #414.\nstyle_tt(tabularray_outer = ...) correctly inserts argument in outer. Issue #419. Thanks to @wklimowicz\n\nNew:\n\nstyle_tt(\"notes\") and style_tt(\"caption\") can style footnotes and captions. Note: This will only style captions handled by the caption argument in tt(), and not captions created by Quarto.\nUsing table@group_index_i is now documented.\n\nMisc:\n\nDocumentation improvements",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-5",
    "href": "NEWS.html#section-5",
    "title": "News",
    "section": "",
    "text": "Bug fix: d-column LaTeX generated an error in some cases.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-6",
    "href": "NEWS.html#section-6",
    "title": "News",
    "section": "",
    "text": "Major refactor of the style internals. HTML, LaTeX, and Typst documents should be much more concise and efficient.\ntheme_tt(\"spacing\"): Change the row and column spacing to create more compact or airy tables. LaTeX and HTML only. Thanks to @statzhero for feature request #353.\nstyle_tt(): the i and j indices are now consistent in all formats. They refer to rows after the insertion of row groups.\nsave_tt() respects options(tinytable_save_overwrite=TRUE)\nLaTeX: Guard header rows when using style_tt(align=\"d\"). Issue #367\nInline display in Quarto and Rmarkdown notebooks. options(tinytable_print_rstudio_notebook = \"inline\") or \"viewer\"\n\nBugs:\n\nTypst notes returned an error since the last release. Thanks to @DominikVogel for report #357.\nDuplicate group labels are allowed in LaTeX with group_tt(). Thanks to @eeemda for report #362.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-7",
    "href": "NEWS.html#section-7",
    "title": "News",
    "section": "",
    "text": "New:\n\noutput=\"html_portable\" returns a portable HTML file, where plot_tt() encodes and embeds the images directly in the HTML code, rather than link to external images. Thanks to @J-Moravec for implementing this nice feature!\nformat_tt() gets a math argument to wrap cell content in \\(...\\) math mode.\ngroup_tt(i = vec) accepts a vector of labels of length equal to the number of rows in the dataset.\ntt() gets an escape argument. Thanks to Cameron Patrick for the feature request.\nThe i argument in style_tt() now accepts a logical matrix of same dimensions as x, to style specific cells, rather than all combinations of i and j vectors. Thanks to @dhicks for the feature request #329.\nstyle_tt() gets new output argument for conditional styling based on output format.\nnames() method now supported for both returning column names and re-assingning them. Issue #332.\n\nTypst:\n\nTable code is much more concise and efficient.\nFix indexing bug for groups. Issue #323 and #343.\nstyle_tt() can override cell styling with successive calls, and the call order is respected.\noptions(tinytable_quarto_figure = FALSE) wraps Typst tables in a figure environment in Quarto documents.\n\nBugs:\n\ntheme_tabular() is no longer greedy in replacing cmidrule. Thanks to @jsr-p for code submission #349.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-8",
    "href": "NEWS.html#section-8",
    "title": "News",
    "section": "",
    "text": "HTML tables no longer insert MathJax scripts by default. This behavior could enter in conflict with other MathJax scripts loaded explicitly by the user or automatically by Quarto. Users can revert to the previous behavior by setting a global option:\noptions(tinytable_html_mathjax = TRUE)\nAlternatively, users can insert appropriate scripts directly in their HTML document or as a Quarto literal chunk:\n```{=html}\n&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n&lt;/script&gt;\n```\n\nOption tinytable_markdown_hlines has been removed. To get a more minimal looking markdown table, use output “gfm” which is gfm compliant.\n\n\n\n\n\nGlobal options are more consistent and better documented. Thanks to @kylebutts for PR #313.\nSupport Viewer Pane in Positron IDE. Thank to @kylebutts for code contribution in PR #299.\nImproved documentation.\nformat_tt(markdown=TRUE) escapes groups and notes when i and j are NULL.\nplot_tt(): The height argument is now respected in Markdown and Word documents.\ngroup_tt() allows 0 and duplicates in i argument for labels in the first row and consecutive labels.\nHeaders are now styled and formatted when i=NULL.\ncolnames(x)&lt;-NULL works on a tinytable object.\nformat_tt(num_big_mark) applies to integer columns.\nUse getOption(\"viewer\") instead of rstudioapi::viewer() for positron support\nglue::glue() string is accepted by format_tt(). Thanks to @LukasWallrich for report #792 on the modelsummary repository.\nSupport Github Flavored Markdown (gfm) output. Thanks to @kylebutts for contribution #315.\ntheme_tt(\"rotate\") to rotate tables in LaTeX or Typst.\nsave_tt(\"/path/to/file\") returns the file path invisibly. Thanks to @yjunechoe for issue #328.\n\n\n\n\n\nSimplify JS functions in HTML documents. Avoid nesting full HTML documents inside Quarto output.\nRemove polyfill JS because of security issues.\nAvoid error in interactive use in Positron.\n\n\n\n\n\ntheme_tt(\"tabular\") no longer uses tabularray or booktabs. Only relies on basic LaTeX packages.\ntheme_tt(\"tabular\", style = \"tabularray\") does the same as above, but keeps the \\begin{tblr} environment.\n\n\n\n\n\nstyle_tt() supports align for different rows and cells, rather than just whole columns.\nstyle_tt() supports indent argument.\ngroup_tt() supports indent argument.\nNo more gutters when group_tt(j) and style_tt(background)\ntheme_tt(x, horizontal = \"l\") can left, center, or right-align a table in the page.\n\n\n\n\n\nsave_tt(\"pdf\"):\n\noptions(tinytable_save_pdf_clean = TRUE)\noptions(tinytable_save_pdf_engine = \"xelatex\")\n\noptions(tinytable_tt_rownames=TRUE): Print row names in the first column by calling. Thanks to @rsbivand for Issue #264.\nEXPERIMENTAL: options(tinytable_html_mathjax = TRUE). Inserts MathJax scripts in the HTML file. This may cause conflicts if MathJax is otherwise loaded in the document.\n\n\n\n\n\nFootnotes were center-aligned in some Quarto chunks. Thanks to @andrewheiss for report #303.\nreplace does not work in LaTeX with format_tt(quarto=TRUE). Thanks to @cbgoodman for Issue #263.\nstyle_tt(indent) works for LaTeX\nNotes were hard-coded to 5 colspan. We now use the actual number of columns in the table. Thanks to @DominikVogel for report #788.\nDo not suppress labels when inserting notes. Thanks to @cportner for Issue #290.\nformat_tt() on a table without column names. Thanks to @andrewheiss for report #306.\nrequires [] in tabularray but () otherwise. Thanks to @andrewheiss for report #307.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-9",
    "href": "NEWS.html#section-9",
    "title": "News",
    "section": "",
    "text": "Breaking change:\n\nThe width argument is moved from style_tt() to tt().\n\ntt():\n\nwidth argument now accepts a vector of numeric values to control the width of each column, as a proportion of the total linewidth.\n\nformat_tt():\n\nNew quarto argument enables Quarto data processing for the whole table and marks specific cells as containing Quarto content. This is especially useful to include @Citation1981 in a table. Thanks to @andrewheiss for issue #215 and @giabaio for further discussion and debugging.\nNew replace argument which accepts a single logical, a single string, or a named list to specify multiple replacements.\nreplace=TRUE by default replaces NA by an empty string. FALSE prints “NA” as string.\nreplace_na is deprecated in favor of replace. Backward compatibility is maintained and a warning is issued.\nAll arguments can now be set using global options.\n\ntheme_tt():\n\n“void” is now supported for Typst tables. Thanks to @marcboschmatas for PR #223.\n\nstyle_tt():\n\nNo longer keep many versions of the same data frame, which could increase memory use. Thanks to @MarcoPortmann for the report.\n\nsave_tt():\n\nDo not change working directory when saving to file raises an error. Thanks to @etiennebacher for report #225.\n\nTypst:\n\nBetter compatibility with Quarto captions. Recommended strategy is to not use the caption argument, and rather to define both the label and tbl-cap chunk options in Quarto. This is a breaking change, as Typst tables are no longer enclosed in a #figure environment in Quarto documents when both tbl-cap and label chunk options are defined.\nformat_tt(escape=TRUE) escapes square brackets.\nTables are centered by default.\n\nMisc:\n\nSupport beamer_presentations, but see: https://github.com/vincentarelbundock/tinytable/issues/244\nTable objects can be modified and printed several times —with styling— in a single HTML document like a ReavealJS slideshow. Thanks to @kazuyanagimoto for report #759.\nGlobal option to enable Quarto data processing: options(tinytable_quarto_disable_processing = FALSE). Thanks to @andrewheiss for issue #215.\n\nBug fixes:\n\nData frames without column headers could be displayed as “c(1,2,3,3)”. Bug in format_tt(). Issue #230.\nsave_tt() can now save to PDF when the table includes a caption. Thanks to @etiennebacher for report #224.\ngroup_tt(i) inserted an extra latex column, which made horizontal lines stop to early. Thanks to @andrewheiss for report #235.\nMultiple unnamed footnotes allowed in LaTeX tabularray. Issue #242.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-10",
    "href": "NEWS.html#section-10",
    "title": "News",
    "section": "",
    "text": "RStudio displays table in HTML viewer by default when the rstudioapi package is available.\ncolnames and colnames&lt;- are now exported functions.\ntt() supports data.frame-like objects which also inherit from other classes, ex: marginaleffects::slopes()\nBug: options(tinytable_tt_print) is respected in print() without argument.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-11",
    "href": "NEWS.html#section-11",
    "title": "News",
    "section": "",
    "text": "New features:\n\nrbind() and rbind2() can be used to stack tinytable objects. rbind2() is more flexible than rbind(). See ?tinytable::rbind2\nNew output format in print(): “dataframe”\nRename table headers: colnames(tab) &lt;- c(\"a\", \"b\", \"c\")\ntheme_tt(\"resize\") gets a direction argument with “up”, “down”, “both” options. Thanks to @MarcoPortmann for feature request #207\n\nMinor:\n\nInformative error message when no default browser is selected via global options.\nFix CRAN errors on Mac old releases.\n\nBugs:\n\ntheme_tt() resize issue with talltblr environment and notes in LaTeX. Thanks to @MarcoPortmann for reporting issue #206",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-12",
    "href": "NEWS.html#section-12",
    "title": "News",
    "section": "",
    "text": "New function theme_tt():\n\nFunction to apply collections of transformations to a tinytable.\nVisual themes:\n\ngrid, void, striped, bootstrap, default\n\nresize: Insert a LaTeX table in a resizebox environment to ensure a table fits the page, or to scale it to a fraction of \\linewidth\nplacement: Determine where a LaTeX table float is positioned. Ex: [H], [htbp]\nmultipage: Split long LaTeX tables across multiple pages with (optional) repeated headers/footers. Uses the longtblr environment from tabularray.\n\nformat_tt():\n\nNew i argument to format subsets of rows.\nNew fn argument which accepts an arbitrary function to format table content.\nnum_fmt=\"significant_cell\" rounds significant digits on a cell-by-cell basis rather than for full columns (as is default in base R format()).\nNumeric formatting options can be set via global options, defined in the function signature.\nnum_mark_big and num_mark_dec require an explicit digits. We now raise an informative error.\nescape = TRUE now escapes captions, notes, and spanning cells created by group_tt() when i and j are both NULL. To avoid escaping group labels, users can specify i and/or j explicitly.\n\nTypst format:\n\nSupport for row headers with group_tt(i)\nSupports images and inline plots with plot_tt(). Thanks to @aghaynes for contribution #155.\n“kind: tinytable” parameter is now added to all figures enclosing a tinytable. This allows users to apply targeted show rules. For example, in a table of contents: outline(target: figure.where(kind: \"tinytable\"))\n\nMisc:\n\nstyle_tt() gains a finalize argument. This accepts functions to be applied to the table object at the very end of the building process, to programmatically change its content. For example, this can be used with regular expressions to modify the text version of the table hosted in tab@table_string, or the function could programmatically modify the caption in tab@caption.\nstyle_tt(): LaTeX format supports decimal alignement with align=\"d\". The width of columns is determined by the maximum number of digits to the left and to the right in all cells specified by i, j.\nSupport RevealJS slides in Quarto documents.\nImproved support for tibble. ANSI characters (ex: fancy pillar formatting) are stripped automatically or converted to HTML when the fansi package is installed. fansi is a dependency of tibble, so it should often be installed.\nNew tinytable_tt_digits global option can set the default number of digits in the tt() function.\nRefactor: tinytable objects are now S4 class objects, with slots to hold data about the content and structure.\nas.character() now works on tinytable objects, returning a string in the output format specified by the @output slot of the tinytable object (markdown by default).\nLaTeX code in captions no longer requires double escaping, allowing: tt(x, caption = \"Blah blah \\\\label{tab:blah})\n\nBreaking changes:\n\nIn some cases, format_tt() could be use sequentially to apply two formats to the same cell. Now, multiple calls to format_tt() can still be make chained with pipes, but they must apply to different cells with i, j, otherwise only the last change is respected. One exception is the escape argument which can be applied to pre-formatted cells.\ntinytable objects no longer have a meta_tinytable attribute. Use S4 slots instead.\nplacement argument in tt() is removed in favor of theme_tt(\"placement\").\n\nBugs:\n\nformat_tt() did not work on factor vector.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-13",
    "href": "NEWS.html#section-13",
    "title": "News",
    "section": "",
    "text": "format_tt() escapes &lt;&gt; tags in Typst.\nBug introduced in 0.0.4 prevented group_tt(i) in HTML.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-14",
    "href": "NEWS.html#section-14",
    "title": "News",
    "section": "",
    "text": "New:\n\nj argument in style_tt() and format_tt() now accepts a string vector to match columns. Issue #122\nLine plots: plot_tt(fun = \"line\")\nformat_tt(j=NULL, escape=TRUE) now escapes column headers in addition to all cells.\nformat_tt() gains a replace_na argument to replace missing values.\nstyle_tt(): rowspan and colspan arguments are now supported in all formats except Typst. In markdown and Word, we get “pseudo-spans” with empty cells around the main cell, instead of true merged cells.\nstyle_tt(): alignv argument is now supported for LaTeX and HTML\n\nBugfix:\n\nMarkdown group columns when labels are wider than columns. Thanks to @etiennebacher for report #127.\nMarkdown group rows broke indexing when using style_tt(). Thanks to @strengejacke for report #133.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-15",
    "href": "NEWS.html#section-15",
    "title": "News",
    "section": "",
    "text": "New:\n\nTypst tables are now supported using the tablex extension:\n\nhttps://typst.app/\nhttps://github.com/PgBiel/typst-tablex\n\nescape argument in format_tt() escapes or substitutes special characters in LaTeX or HTML output to prevent compilation and rendering errors.\nnotes argument in tt() can insert superscript markers inside cells to refer to notes at the bottom of the page.\n\ntt(x, notes = list(\"*\" = list(i = 0:1, j = 2, text = \"Hello world)))\n\nnotes agument in tt() now works wth Markdown and Word, but must be a single string.\ngroup_tt() can be called multiple times to create mult-row headers.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-16",
    "href": "NEWS.html#section-16",
    "title": "News",
    "section": "",
    "text": "Improvements:\n\nRules and cell borders: line, line_width, and line_color arguments.\nEnhanced knitr output detection.\nNew themes.\nCaption argument support for Markdown tables.\nDefensive programming enhancements.\nplot_tt() regular expression column selection.\nHeader/footer are no longer indented by group_tt(i).\n\nBug fixes:\n\nInline plots visibility in RStudio viewer pane.\nBug in group_tt(i) for markdown and docx output.\nResolved style_tt resetting issue.\nBug fix for column alignment in markdown affecting docx output.\n\nDocumentation:\n\nImproved vignette on the package website.\nVarious documentation updates.\nMath in $$ is the new recommendation.",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-17",
    "href": "NEWS.html#section-17",
    "title": "News",
    "section": "",
    "text": "Initial package release. Yay!",
    "crumbs": [
      "Tutorial (PDF)",
      "News"
    ]
  },
  {
    "objectID": "vignettes/tips.html",
    "href": "vignettes/tips.html",
    "title": "Tips and Tricks",
    "section": "",
    "text": "Relative widths tables: table-layout: fixed vs auto.\n\n\n\n\n\n\ntinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, provides special tblr, talltblr, and longtblr environments to display tabular data.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages (except when code chunks are cached). For standalone LaTeX documents, these commands should be inserted in the preamble manually:\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\nSome users have encountered unexpected spacing behavior when generating tables that are not wrapped in a \\begin{table} environment (ex: multipage or raw tblr).\nOne issue stems from the fact that the \\begin{table} environment resets any spacing commands in the preamble or body by default, such as:\n\\usepackage{setspace}\n\\doublespacing\nThis means that when using theme_tt(\"multipage\") —which does not wrap the table in a table environment— the spacing is not reset, and tables are double spaced. This is not a bug, since double-spacing is in fact what the user requested. Nevertheless, the behavior can seem surprising for those used to the automagical table environment spacing reset.\nOne workaround is to add the following to the document preamble when using multipage/longtblr:\n\\usepackage{etoolbox}\n\\AtBeginEnvironment{longtblr}{\\begin{singlespacing}}\n\\AtEndEnvironment{longtblr}{\\end{singlespacing}}\nExample Quarto doc:\n---\ntitle: longtblr and setspacing\nformat:\n  pdf:\n    include-in-header:\n      - text: |\n         % Tinytable preamble\n         \\usepackage{tabularray}\n         \\usepackage{float}\n         \\usepackage{graphicx}\n         \\usepackage{codehigh}\n         \\usepackage[normalem]{ulem}\n         \\UseTblrLibrary{booktabs}\n         \\UseTblrLibrary{siunitx}\n         \\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline\n         {#1}}\n         \\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n         \\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{\n         #1}{#2}{#3}}\n         % Spacing Commands\n         \\usepackage{setspace}\n         \\doublespacing\n         % Fix Spacing in longtblr\n         \\usepackage{etoolbox}\n         \\AtBeginEnvironment{longtblr}{\\begin{singlespacing}}\n         \\AtEndEnvironment{longtblr}{\\end{singlespacing}}\n---\n\n```{=latex}\n\\begin{longtblr}[         %% tabularray outer open\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nfoo & bar & baz \\\\\nfoo & bar & baz \\\\\nfoo & bar & baz \\\\\n\\bottomrule\n\\end{longtblr}\n```\n\n\n\nIn some contexts, users may want create cells with LaTeX or markdown code that spans multiple lines. This usually works well for HTML tables. But sometimes, in LaTeX, multi-line content with special environments must be wrapped in a minipage environment.\nIn the example that follows, we create a Markdown list using asterisks. Then, we call litedown::mark() to render that list as bullet points (an itemize environment in LaTeX). Finally, we define a custom function called minipagify to wrap the bullet point in a minipage environment.\n\nlibrary(tinytable)\nlibrary(litedown)\n\ndat &lt;- data.frame(\n  A = c(\"Blah *blah* blah\", \"- Thing 1\\n- Thing 2\"),\n  B = c(\"6%\", \"$5.29\")\n)\n\n# wrap in a minipage environment\nminipagify &lt;- function(x) {\n  sprintf(\n    \"\\\\minipage{\\\\textwidth}%s\\\\endminipage\",\n    sapply(x, litedown::mark, \"latex\")\n  )\n}\n\n# only in LaTeX\nis_latex &lt;- identical(knitr::pandoc_to(), \"latex\")\nis_html &lt;- identical(knitr::pandoc_to(), \"html\")\n\n\ntab &lt;- tt(dat, width = c(0.3, 0.2)) |&gt;\n  style_tt(j = 2, align = \"c\") |&gt;\n  format_tt(j = 2, escape = TRUE) |&gt;\n  format_tt(j = 1, fn = if (is_latex) minipagify else identity) |&gt;\n  format_tt(j = 1, fn = if (is_html) litedown::mark else identity)\n\ntab\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                A\n                B\n              \n        \n        \n        \n                \n                  Blah blah blah\n\nThing 1\nThing 2\n\n                  6%\n                \n                \n                  Blah blah blah\n\nThing 1\nThing 2\n\n                  $5.29\n                \n        \n      \n    \n\n\n\n\n\n\ntabularray allows very powerful styling and themeing options. See the reference manual for more information.\nFor example, you can change the size of footnotes in all tables of a document with:\n---\nformat: \n    pdf:\n        keep-tex: true\n        header-includes: |\n            \\SetTblrStyle{foot}{font=\\LARGE}\n---\n\n```{r}\nlibrary(tinytable)\nlibrary(magrittr)\ntt(head(iris), notes = \"Blah blah\")\n```\n\n\n\nDue to a bug in the upstream package rmarkdown, Quarto or Rmarkdown presentations compiled to Beamer cannot include adequate package loading commands in the preamble automatically. This bug prevents tinytable::usepackage_latex() from modifying the preamble. Here’s a workaround.\nSave this LaTeX code as preamble.tex:\n\\RequirePackage{tabularray}\n\\RequirePackage{booktabs}\n\\RequirePackage{float}\n\\usepackage[normalem]{ulem}\n\\usepackage{graphicx}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\nThen, load preamble.tex in your YAML header:\n---\noutput: \n  beamer_presentation:\n    includes:\n      in_header: preamble.tex\n---\nWith these changes, the table should appear with colors as expected.\n\n\n\nIn LaTeX, we can use tabularray options in the preamble or the table to change the location of the label and caption. The example below shows a Quarto document with caption at the bottom.\n---\noutput: \n    pdf_document:\nheader-includes:\n  - \\usepackage{tabularray}\n ---\n\n```{=latex}\n\\DefTblrTemplate{firsthead,middlehead,lasthead}{default}{}\n\\DefTblrTemplate{firstfoot,middlefoot}{default}{}\n\\DefTblrTemplate{lastfoot}{default}% \n{\n  \\UseTblrTemplate{caption}{default}\n}\n```\n\n```{r, echo=FALSE}\nlibrary(modelsummary)\nlibrary(tinytable)\nmod &lt;- list()\nmod[['One variable']] &lt;- lm(mpg ~ hp, mtcars)\nmod[['Two variables']] &lt;- lm(mpg ~ hp + drat, mtcars)\n\nmodelsummary(mod,\n             title = \"Regression Models\")|&gt;\n  style_tt(tabularray_outer = \"label={tblr:test}\")\n```\n\nTable \\ref{tblr:test}\n\n\n\n\n\n\nBy default tinytable uses Quarto’s own figure handling to set captions and figure blocks. This allows cross-references to work. For this to work well, users should specify both the table label and the table caption explicitly using chunk options. Note that the label must imperatively start with tbl-:\n#| label: tbl-example\n#| tbl-cap: This is an example table\nlibrary(tinytable)\ntt(head(iris))\nAlternatively, users can disable Quarto table handling and rely on internal tinytable options instead.\noptions(tinytable_quarto_figure = FALSE)\nDoing this will prevent styles to bleed over from one table to the next.\n\n\n\nThe Typst tables created by tinytable are automatically broken across pages with repeated headers. However, in Quarto documents, the Quarto software wraps tables in an non-breakable #figure environment. This can break the display of long tables. One solution is to use a raw Typst code block to set Figures to be breakable:\n---\nformat: typst\n---\n\n```{=typst}\n#show figure: set block(breakable: true)\n```\n\n```{r}\n#| tbl-cap: \"blah blah blah\"\n#| label: tbl-blah\nlibrary(tinytable)\ntt(head(iris, 50))\n```\n\n\n\n\nIf a table has cells that span across the full table (colspan equal to nrow(tab)), the rowspan argument can collapse multiple rows into a single cell. See this forum post for explanation why:\nhttps://forum.typst.app/t/why-is-a-rowspan-cell-with-colspan-equal-to-number-of-columns-seemingly-only-spanning-one-row/5047\n\n\n\n\n\nThis is an important limitation, but it is difficult to get around. See this issue for discussion: https://github.com/vincentarelbundock/tinytable/issues/125\nUsers can use markdown styling directly in group_tt() to circumvent this. This is documented in the tutorial.\n\n\n\nThese arguments are already implemented in the form of “pseudo-spans”, meaning that we flush the content of adjacent cells, but do not modify the row or column borders. This is probably adequate for most needs.\nOne alternative would be to remove line segments in finalize_grid(). I tried this but it is tricky and the results were brittle, so I rolled it back. I’m open to considering a PR if someone wants to contribute code, but please discuss the feature design in an issue with me before working on this.\n\n\n\n\nWord document documents are created in two steps:\n\nGenerates a markdown table.\nCall the external Pandoc software to convert the markdown table to a Word document.\n\nThis workflow limits the range of styling options available in Word. Indeed, many arguments in the style_tt() function do not have formal markdown notation to represent them, and are thus not available. For example, while italic, bold, and strikeout, are supported, color and background are not.\nNote that other tinytable functions such as group_tt() and format_tt() and plot_tt() should work as expected in Word.\nUsers who want full styling capabilities in Word can save tables as image files and insert them in their documents. Here is an example Quarto notebook illustrating this workflow.\n---\nformat: docx\n---\n\n```{r}\n#| out-width: \"50%\"\nlibrary(tinytable)\n\noptions(tinytable_save_overwrite = TRUE)\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  style_tt(j = 2:3, background = \"black\", color = \"white\") |&gt;\n  save_tt(\"table_01.png\")\n\nknitr::include_graphics(\"table_01.png\")\n```\n\n\n\nIn some cases, it is useful to remove elements of an existing tinytable object. For example, packages like modelsummary often return tables with default styling—such as borders and lines in specific position. If the user adds group labels manually, the original lines and borders will be misaligned.\nThe code below produces a regression table with group labels but misaligned horizontal rule.\n\n#! warning: false\nlibrary(modelsummary)\nlibrary(tinytable)\n\nmod &lt;- lm(mpg ~ factor(cyl) + hp + wt - 1, data = mtcars)\n\nmodelsummary(mod) |&gt;\n    group_tt(\n        i = list(\n            \"Cylinders\" = 1,\n            \"Others\" = 7\n        )\n    )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        \n        \n                \n                  Cylinders\n                  \n                \n                \n                  factor(cyl)4\n                  35.846\n                \n                \n                  \n                  (2.041)\n                \n                \n                  factor(cyl)6\n                  32.487\n                \n                \n                  \n                  (2.811)\n                \n                \n                  factor(cyl)8\n                  32.660\n                \n                \n                  \n                  (3.835)\n                \n                \n                  Others\n                  \n                \n                \n                  hp\n                  -0.023\n                \n                \n                  \n                  (0.012)\n                \n                \n                  wt\n                  -3.181\n                \n                \n                  \n                  (0.720)\n                \n                \n                  Num.Obs.\n                  32\n                \n                \n                  R2\n                  0.989\n                \n                \n                  R2 Adj.\n                  0.986\n                \n                \n                  AIC\n                  154.5\n                \n                \n                  BIC\n                  163.3\n                \n                \n                  Log.Lik.\n                  -71.235\n                \n                \n                  RMSE\n                  2.24\n                \n        \n      \n    \n\n\n\nTo fix this, we can strip the lines and add them back in the correct position.\n\nmodelsummary(mod) |&gt;\n    strip_tt(line = TRUE) |&gt;\n    group_tt(\n        i = list(\n            \"Cylinders\" = 1,\n            \"Others\" = 7\n        )\n    ) |&gt;\n    style_tt(i = 12, line = \"b\", line_width = .05)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        \n        \n                \n                  Cylinders\n                  \n                \n                \n                  factor(cyl)4\n                  35.846\n                \n                \n                  \n                  (2.041)\n                \n                \n                  factor(cyl)6\n                  32.487\n                \n                \n                  \n                  (2.811)\n                \n                \n                  factor(cyl)8\n                  32.660\n                \n                \n                  \n                  (3.835)\n                \n                \n                  Others\n                  \n                \n                \n                  hp\n                  -0.023\n                \n                \n                  \n                  (0.012)\n                \n                \n                  wt\n                  -3.181\n                \n                \n                  \n                  (0.720)\n                \n                \n                  Num.Obs.\n                  32\n                \n                \n                  R2\n                  0.989\n                \n                \n                  R2 Adj.\n                  0.986\n                \n                \n                  AIC\n                  154.5\n                \n                \n                  BIC\n                  163.3\n                \n                \n                  Log.Lik.\n                  -71.235\n                \n                \n                  RMSE\n                  2.24",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#html",
    "href": "vignettes/tips.html#html",
    "title": "Tips and Tricks",
    "section": "",
    "text": "Relative widths tables: table-layout: fixed vs auto.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#latex",
    "href": "vignettes/tips.html#latex",
    "title": "Tips and Tricks",
    "section": "",
    "text": "tinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, provides special tblr, talltblr, and longtblr environments to display tabular data.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages (except when code chunks are cached). For standalone LaTeX documents, these commands should be inserted in the preamble manually:\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\nSome users have encountered unexpected spacing behavior when generating tables that are not wrapped in a \\begin{table} environment (ex: multipage or raw tblr).\nOne issue stems from the fact that the \\begin{table} environment resets any spacing commands in the preamble or body by default, such as:\n\\usepackage{setspace}\n\\doublespacing\nThis means that when using theme_tt(\"multipage\") —which does not wrap the table in a table environment— the spacing is not reset, and tables are double spaced. This is not a bug, since double-spacing is in fact what the user requested. Nevertheless, the behavior can seem surprising for those used to the automagical table environment spacing reset.\nOne workaround is to add the following to the document preamble when using multipage/longtblr:\n\\usepackage{etoolbox}\n\\AtBeginEnvironment{longtblr}{\\begin{singlespacing}}\n\\AtEndEnvironment{longtblr}{\\end{singlespacing}}\nExample Quarto doc:\n---\ntitle: longtblr and setspacing\nformat:\n  pdf:\n    include-in-header:\n      - text: |\n         % Tinytable preamble\n         \\usepackage{tabularray}\n         \\usepackage{float}\n         \\usepackage{graphicx}\n         \\usepackage{codehigh}\n         \\usepackage[normalem]{ulem}\n         \\UseTblrLibrary{booktabs}\n         \\UseTblrLibrary{siunitx}\n         \\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline\n         {#1}}\n         \\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n         \\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{\n         #1}{#2}{#3}}\n         % Spacing Commands\n         \\usepackage{setspace}\n         \\doublespacing\n         % Fix Spacing in longtblr\n         \\usepackage{etoolbox}\n         \\AtBeginEnvironment{longtblr}{\\begin{singlespacing}}\n         \\AtEndEnvironment{longtblr}{\\end{singlespacing}}\n---\n\n```{=latex}\n\\begin{longtblr}[         %% tabularray outer open\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nfoo & bar & baz \\\\\nfoo & bar & baz \\\\\nfoo & bar & baz \\\\\n\\bottomrule\n\\end{longtblr}\n```\n\n\n\nIn some contexts, users may want create cells with LaTeX or markdown code that spans multiple lines. This usually works well for HTML tables. But sometimes, in LaTeX, multi-line content with special environments must be wrapped in a minipage environment.\nIn the example that follows, we create a Markdown list using asterisks. Then, we call litedown::mark() to render that list as bullet points (an itemize environment in LaTeX). Finally, we define a custom function called minipagify to wrap the bullet point in a minipage environment.\n\nlibrary(tinytable)\nlibrary(litedown)\n\ndat &lt;- data.frame(\n  A = c(\"Blah *blah* blah\", \"- Thing 1\\n- Thing 2\"),\n  B = c(\"6%\", \"$5.29\")\n)\n\n# wrap in a minipage environment\nminipagify &lt;- function(x) {\n  sprintf(\n    \"\\\\minipage{\\\\textwidth}%s\\\\endminipage\",\n    sapply(x, litedown::mark, \"latex\")\n  )\n}\n\n# only in LaTeX\nis_latex &lt;- identical(knitr::pandoc_to(), \"latex\")\nis_html &lt;- identical(knitr::pandoc_to(), \"html\")\n\n\ntab &lt;- tt(dat, width = c(0.3, 0.2)) |&gt;\n  style_tt(j = 2, align = \"c\") |&gt;\n  format_tt(j = 2, escape = TRUE) |&gt;\n  format_tt(j = 1, fn = if (is_latex) minipagify else identity) |&gt;\n  format_tt(j = 1, fn = if (is_html) litedown::mark else identity)\n\ntab\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                A\n                B\n              \n        \n        \n        \n                \n                  Blah blah blah\n\nThing 1\nThing 2\n\n                  6%\n                \n                \n                  Blah blah blah\n\nThing 1\nThing 2\n\n                  $5.29\n                \n        \n      \n    \n\n\n\n\n\n\ntabularray allows very powerful styling and themeing options. See the reference manual for more information.\nFor example, you can change the size of footnotes in all tables of a document with:\n---\nformat: \n    pdf:\n        keep-tex: true\n        header-includes: |\n            \\SetTblrStyle{foot}{font=\\LARGE}\n---\n\n```{r}\nlibrary(tinytable)\nlibrary(magrittr)\ntt(head(iris), notes = \"Blah blah\")\n```\n\n\n\nDue to a bug in the upstream package rmarkdown, Quarto or Rmarkdown presentations compiled to Beamer cannot include adequate package loading commands in the preamble automatically. This bug prevents tinytable::usepackage_latex() from modifying the preamble. Here’s a workaround.\nSave this LaTeX code as preamble.tex:\n\\RequirePackage{tabularray}\n\\RequirePackage{booktabs}\n\\RequirePackage{float}\n\\usepackage[normalem]{ulem}\n\\usepackage{graphicx}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\nThen, load preamble.tex in your YAML header:\n---\noutput: \n  beamer_presentation:\n    includes:\n      in_header: preamble.tex\n---\nWith these changes, the table should appear with colors as expected.\n\n\n\nIn LaTeX, we can use tabularray options in the preamble or the table to change the location of the label and caption. The example below shows a Quarto document with caption at the bottom.\n---\noutput: \n    pdf_document:\nheader-includes:\n  - \\usepackage{tabularray}\n ---\n\n```{=latex}\n\\DefTblrTemplate{firsthead,middlehead,lasthead}{default}{}\n\\DefTblrTemplate{firstfoot,middlefoot}{default}{}\n\\DefTblrTemplate{lastfoot}{default}% \n{\n  \\UseTblrTemplate{caption}{default}\n}\n```\n\n```{r, echo=FALSE}\nlibrary(modelsummary)\nlibrary(tinytable)\nmod &lt;- list()\nmod[['One variable']] &lt;- lm(mpg ~ hp, mtcars)\nmod[['Two variables']] &lt;- lm(mpg ~ hp + drat, mtcars)\n\nmodelsummary(mod,\n             title = \"Regression Models\")|&gt;\n  style_tt(tabularray_outer = \"label={tblr:test}\")\n```\n\nTable \\ref{tblr:test}",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#typst",
    "href": "vignettes/tips.html#typst",
    "title": "Tips and Tricks",
    "section": "",
    "text": "By default tinytable uses Quarto’s own figure handling to set captions and figure blocks. This allows cross-references to work. For this to work well, users should specify both the table label and the table caption explicitly using chunk options. Note that the label must imperatively start with tbl-:\n#| label: tbl-example\n#| tbl-cap: This is an example table\nlibrary(tinytable)\ntt(head(iris))\nAlternatively, users can disable Quarto table handling and rely on internal tinytable options instead.\noptions(tinytable_quarto_figure = FALSE)\nDoing this will prevent styles to bleed over from one table to the next.\n\n\n\nThe Typst tables created by tinytable are automatically broken across pages with repeated headers. However, in Quarto documents, the Quarto software wraps tables in an non-breakable #figure environment. This can break the display of long tables. One solution is to use a raw Typst code block to set Figures to be breakable:\n---\nformat: typst\n---\n\n```{=typst}\n#show figure: set block(breakable: true)\n```\n\n```{r}\n#| tbl-cap: \"blah blah blah\"\n#| label: tbl-blah\nlibrary(tinytable)\ntt(head(iris, 50))\n```",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#rowspan-and-colspan",
    "href": "vignettes/tips.html#rowspan-and-colspan",
    "title": "Tips and Tricks",
    "section": "",
    "text": "If a table has cells that span across the full table (colspan equal to nrow(tab)), the rowspan argument can collapse multiple rows into a single cell. See this forum post for explanation why:\nhttps://forum.typst.app/t/why-is-a-rowspan-cell-with-colspan-equal-to-number-of-columns-seemingly-only-spanning-one-row/5047",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#markdown",
    "href": "vignettes/tips.html#markdown",
    "title": "Tips and Tricks",
    "section": "",
    "text": "This is an important limitation, but it is difficult to get around. See this issue for discussion: https://github.com/vincentarelbundock/tinytable/issues/125\nUsers can use markdown styling directly in group_tt() to circumvent this. This is documented in the tutorial.\n\n\n\nThese arguments are already implemented in the form of “pseudo-spans”, meaning that we flush the content of adjacent cells, but do not modify the row or column borders. This is probably adequate for most needs.\nOne alternative would be to remove line segments in finalize_grid(). I tried this but it is tricky and the results were brittle, so I rolled it back. I’m open to considering a PR if someone wants to contribute code, but please discuss the feature design in an issue with me before working on this.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#word-.docx",
    "href": "vignettes/tips.html#word-.docx",
    "title": "Tips and Tricks",
    "section": "",
    "text": "Word document documents are created in two steps:\n\nGenerates a markdown table.\nCall the external Pandoc software to convert the markdown table to a Word document.\n\nThis workflow limits the range of styling options available in Word. Indeed, many arguments in the style_tt() function do not have formal markdown notation to represent them, and are thus not available. For example, while italic, bold, and strikeout, are supported, color and background are not.\nNote that other tinytable functions such as group_tt() and format_tt() and plot_tt() should work as expected in Word.\nUsers who want full styling capabilities in Word can save tables as image files and insert them in their documents. Here is an example Quarto notebook illustrating this workflow.\n---\nformat: docx\n---\n\n```{r}\n#| out-width: \"50%\"\nlibrary(tinytable)\n\noptions(tinytable_save_overwrite = TRUE)\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  style_tt(j = 2:3, background = \"black\", color = \"white\") |&gt;\n  save_tt(\"table_01.png\")\n\nknitr::include_graphics(\"table_01.png\")\n```",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/tips.html#removing-elements-with-strip_tt",
    "href": "vignettes/tips.html#removing-elements-with-strip_tt",
    "title": "Tips and Tricks",
    "section": "",
    "text": "In some cases, it is useful to remove elements of an existing tinytable object. For example, packages like modelsummary often return tables with default styling—such as borders and lines in specific position. If the user adds group labels manually, the original lines and borders will be misaligned.\nThe code below produces a regression table with group labels but misaligned horizontal rule.\n\n#! warning: false\nlibrary(modelsummary)\nlibrary(tinytable)\n\nmod &lt;- lm(mpg ~ factor(cyl) + hp + wt - 1, data = mtcars)\n\nmodelsummary(mod) |&gt;\n    group_tt(\n        i = list(\n            \"Cylinders\" = 1,\n            \"Others\" = 7\n        )\n    )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        \n        \n                \n                  Cylinders\n                  \n                \n                \n                  factor(cyl)4\n                  35.846\n                \n                \n                  \n                  (2.041)\n                \n                \n                  factor(cyl)6\n                  32.487\n                \n                \n                  \n                  (2.811)\n                \n                \n                  factor(cyl)8\n                  32.660\n                \n                \n                  \n                  (3.835)\n                \n                \n                  Others\n                  \n                \n                \n                  hp\n                  -0.023\n                \n                \n                  \n                  (0.012)\n                \n                \n                  wt\n                  -3.181\n                \n                \n                  \n                  (0.720)\n                \n                \n                  Num.Obs.\n                  32\n                \n                \n                  R2\n                  0.989\n                \n                \n                  R2 Adj.\n                  0.986\n                \n                \n                  AIC\n                  154.5\n                \n                \n                  BIC\n                  163.3\n                \n                \n                  Log.Lik.\n                  -71.235\n                \n                \n                  RMSE\n                  2.24\n                \n        \n      \n    \n\n\n\nTo fix this, we can strip the lines and add them back in the correct position.\n\nmodelsummary(mod) |&gt;\n    strip_tt(line = TRUE) |&gt;\n    group_tt(\n        i = list(\n            \"Cylinders\" = 1,\n            \"Others\" = 7\n        )\n    ) |&gt;\n    style_tt(i = 12, line = \"b\", line_width = .05)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        \n        \n                \n                  Cylinders\n                  \n                \n                \n                  factor(cyl)4\n                  35.846\n                \n                \n                  \n                  (2.041)\n                \n                \n                  factor(cyl)6\n                  32.487\n                \n                \n                  \n                  (2.811)\n                \n                \n                  factor(cyl)8\n                  32.660\n                \n                \n                  \n                  (3.835)\n                \n                \n                  Others\n                  \n                \n                \n                  hp\n                  -0.023\n                \n                \n                  \n                  (0.012)\n                \n                \n                  wt\n                  -3.181\n                \n                \n                  \n                  (0.720)\n                \n                \n                  Num.Obs.\n                  32\n                \n                \n                  R2\n                  0.989\n                \n                \n                  R2 Adj.\n                  0.986\n                \n                \n                  AIC\n                  154.5\n                \n                \n                  BIC\n                  163.3\n                \n                \n                  Log.Lik.\n                  -71.235\n                \n                \n                  RMSE\n                  2.24",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tips and tricks"
    ]
  },
  {
    "objectID": "vignettes/style.html",
    "href": "vignettes/style.html",
    "title": "Style",
    "section": "",
    "text": "The main styling function for the tinytable package is style_tt(). Via this function, you can access three main interfaces to customize tables:\n\nA general interface to frequently used style choices which works for both HTML and LaTeX (PDF): colors, font style and size, row and column spans, etc. This is accessed through several distinct arguments in the style_tt() function, such as italic, color, etc.\nA specialized interface which allows users to use the powerful tabularray package to customize LaTeX tables. This is accessed by passing tabularray settings as strings to the tabularray_inner and tabularray_outer arguments of style_tt().\nA specialized interface which allows users to use the powerful Bootstrap framework to customize HTML tables. This is accessed by passing CSS declarations and rules to the bootstrap_css and bootstrap_css_rule arguments of style_tt().\n\nThese functions can be used to customize rows, columns, or individual cells. They control many features, including:\n\nText color\nBackground color\nWidths\nHeights\nAlignment\nText Wrapping\nColumn and Row Spacing\nCell Merging\nMulti-row or column spans\nBorder Styling\nFont Styling: size, underline, italic, bold, strikethrough, etc.\nHeader Customization\n\nThe style_*() functions can modify individual cells, or entire columns and rows. The portion of the table that is styled is determined by the i (rows) and j (columns) arguments.\n\nlibrary(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\n\n\nTo style individual cells, we use the style_cell() function. The first two arguments—i and j—identify the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:\n\ntt(x) |&gt;\n  style_tt(\n    i = 2,\n    j = 3,\n    background = \"black\",\n    color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe i and j accept vectors of integers to modify several cells at once:\n\ntt(x) |&gt;\n  style_tt(\n    i = 2:3,\n    j = c(1, 3, 4),\n    italic = TRUE,\n    color = \"orange\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style all cells in a table by omitting both the i and j arguments:\n\ntt(x) |&gt; style_tt(color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style entire rows by omitting the j argument:\n\ntt(x) |&gt; style_tt(i = 1:2, color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style entire columns by omitting the i argument:\n\ntt(x) |&gt; style_tt(j = c(2, 4), bold = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe j argument accepts integer vectors, character vectors, but also a string with a Perl-style regular expression, which makes it easier to select columns by name:\n\ntt(x) |&gt; style_tt(j = c(\"mpg\", \"drat\"), color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x) |&gt; style_tt(j = \"mpg|drat\", color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere we use a “negative lookahead” to exclude certain columns:\n\ntt(x) |&gt; style_tt(j = \"^(?!drat|mpg)\", color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nOf course, we can also call the style_tt() function several times to apply different styles to different parts of the table:\n\ntt(x) |&gt;\n  style_tt(i = 1, j = 1:2, color = \"orange\") |&gt;\n  style_tt(i = 1, j = 3:4, color = \"green\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nThe color and background arguments in the style_tt() function are used for specifying the text color and the background color for cells of a table created by the tt() function. This argument plays a crucial role in enhancing the visual appeal and readability of the table, whether it’s rendered in LaTeX or HTML format. The way we specify colors differs slightly between the two formats:\nFor HTML Output:\n\nHex Codes: You can specify colors using hexadecimal codes, which consist of a # followed by 6 characters (e.g., #CC79A7). This allows for a wide range of colors.\nKeywords: There’s also the option to use color keywords for convenience. The supported keywords are basic color names like black, red, blue, etc.\n\nFor LaTeX Output:\n\nHexadecimal Codes: Similar to HTML, you can use hexadecimal codes.\nKeywords: LaTeX supports a different set of color keywords, which include standard colors like black, red, blue, as well as additional ones like cyan, darkgray, lightgray, etc.\nColor Blending: An advanced feature in LaTeX is color blending, which can be achieved using the xcolor package. You can blend colors by specifying ratios (e.g., white!80!blue or green!20!red).\nLuminance Levels: The ninecolors package in LaTeX offers colors with predefined luminance levels, allowing for more nuanced color choices (e.g., “azure4”, “magenta8”).\n\nNote that the keywords used in LaTeX and HTML are slightly different.\n\ntt(x) |&gt; style_tt(i = 1:4, j = 1, color = \"#FF5733\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nNote that when using Hex codes in a LaTeX table, we need extra declarations in the LaTeX preamble. See ?tt for details.\n\n\n\nTo align columns, we use a single character, or a string where each letter represents a column:\n\ndat &lt;- data.frame(\n  a = c(\"a\", \"aaa\", \"aaaaa\"),\n  b = c(\"b\", \"bbb\", \"bbbbb\"),\n  c = c(\"c\", \"ccc\", \"ccccc\")\n)\n\ntt(dat) |&gt; style_tt(j = 1:3, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  a\n                  b\n                  c\n                \n                \n                  aaa\n                  bbb\n                  ccc\n                \n                \n                  aaaaa\n                  bbbbb\n                  ccccc\n                \n        \n      \n    \n\n\ntt(dat) |&gt; style_tt(j = 1:3, align = \"lcr\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  a\n                  b\n                  c\n                \n                \n                  aaa\n                  bbb\n                  ccc\n                \n                \n                  aaaaa\n                  bbbbb\n                  ccccc\n                \n        \n      \n    \n\n\n\nIn LaTeX documents (only), we can use decimal-alignment:\n\nz &lt;- data.frame(pi = c(pi * 100, pi * 1000, pi * 10000, pi * 100000))\ntt(z) |&gt;\n  format_tt(j = 1, digits = 8, num_fmt = \"significant_cell\") |&gt;\n  style_tt(j = 1, align = \"d\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                pi\n              \n        \n        \n        \n                \n                  314.15927\n                \n                \n                  3141.5927\n                \n                \n                  31415.927\n                \n                \n                  314159.27\n                \n        \n      \n    \n\n\n\n\n\n\nThe font size is specified in em units.\n\ntt(x) |&gt; style_tt(i = 1:4, j = \"mpg|hp|qsec\", fontsize = 1.5)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nSometimes, it can be useful to make a cell stretch across multiple colums or rows, for example when we want to insert a label. To achieve this, we can use the colspan argument. Here, we make the 2nd cell of the 2nd row stretch across three columns and two rows:\n\ntt(x) |&gt; style_tt(\n  i = 2, j = 2,\n  colspan = 3,\n  rowspan = 2,\n  align = \"c\",\n  alignv = \"m\",\n  color = \"white\",\n  background = \"black\",\n  bold = TRUE\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere is the original table for comparison:\n\ntt(x)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nSpanning cells can be particularly useful when we want to suppress redundant labels:\n\ntab &lt;- aggregate(mpg ~ cyl + am, FUN = mean, data = mtcars)\ntab &lt;- tab[order(tab$cyl, tab$am), ]\ntab\n\n  cyl am      mpg\n1   4  0 22.90000\n4   4  1 28.07500\n2   6  0 19.12500\n5   6  1 20.56667\n3   8  0 15.05000\n6   8  1 15.40000\n\ntt(tab, digits = 2) |&gt;\n  style_tt(i = c(1, 3, 5), j = 1, rowspan = 2, alignv = \"t\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                cyl\n                am\n                mpg\n              \n        \n        \n        \n                \n                  4\n                  0\n                  23\n                \n                \n                  4\n                  1\n                  28\n                \n                \n                  6\n                  0\n                  19\n                \n                \n                  6\n                  1\n                  21\n                \n                \n                  8\n                  0\n                  15\n                \n                \n                  8\n                  1\n                  15\n                \n        \n      \n    \n\n\n\nThe rowspan feature is also useful to create multi-row labels. For example, in this table there is a linebreak, but all the text fits in a single cell:\n\ntab &lt;- data.frame(Letters = c(\"A&lt;br&gt;B\", \"\"), Numbers = c(\"First\", \"Second\"))\n\ntt(tab) |&gt;\n  style_tt(bootstrap_class = \"table-bordered\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Letters\n                Numbers\n              \n        \n        \n        \n                \n                  AB\n                  First\n                \n                \n                  \n                  Second\n                \n        \n      \n    \n\n\n\nNow, we use colspan to ensure that that cells in the first column take up less space and are combined into one:\n\ntt(tab) |&gt;\n  style_tt(bootstrap_class = \"table-bordered\") |&gt;\n  style_tt(1, 1, rowspan = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Letters\n                Numbers\n              \n        \n        \n        \n                \n                  AB\n                  First\n                \n                \n                  \n                  Second\n                \n        \n      \n    \n\n\n\nWe can combine several spans to create complex tables like this one:\n\ndf &lt;- structure(list(\n  Col1 = c(\"Col Header\", \"Item 0\", \"Item 1\", \"Item 2\", \"Total\"), \n  Col2 = c(\"Span 1\", \"X\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.1 = c(\"Span 1\", \"Y\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.2 = c(\"Span 2\", \"X\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.3 = c(\"Span 2\", \"Y\", \"xx\", \"xx\", \"xxxx\")), \n  class = \"data.frame\", row.names = c(NA, -5L))\ndf |&gt;\n    setNames(NULL) |&gt;\n    tt() |&gt;\n    style_tt(1, 1, rowspan = 2, bold = TRUE) |&gt;\n    style_tt(1, c(2, 4), colspan = 2, bold = TRUE) |&gt;\n    style_tt(5, c(2, 4), colspan = 2) |&gt;\n    theme_tt(\"grid\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  Col Header\n                  Span 1\n                  Span 1\n                  Span 2\n                  Span 2\n                \n                \n                  Item 0\n                  X\n                  Y\n                  X\n                  Y\n                \n                \n                  Item 1\n                  xx\n                  xx\n                  xx\n                  xx\n                \n                \n                  Item 2\n                  xx\n                  xx\n                  xx\n                  xx\n                \n                \n                  Total\n                  xxxx\n                  xxxx\n                  xxxx\n                  xxxx\n                \n        \n      \n    \n\n\n\n\n\n\nThe header can be omitted from the table by using the colnames argument.\n\ntt(x, colnames = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe first is row 0, and higher level headers (ex: column spanning labels) have negative indices like -1. They can be styled as expected:\n\ntt(x) |&gt; style_tt(i = 0, color = \"white\", background = \"black\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen styling columns without specifying i, the headers are styled in accordance with the rest of the column:\n\ntt(x) |&gt; style_tt(j = 2:3, color = \"white\", background = \"black\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nWe can use the standard which function from Base R to create indices and apply conditional stying on rows. And we can use a regular expression in j to apply conditional styling on columns:\n\nk &lt;- mtcars[1:10, c(\"mpg\", \"am\", \"vs\")]\n\ntt(k) |&gt;\n  style_tt(\n    i = which(k$am == k$vs),\n    background = \"teal\",\n    color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                am\n                vs\n              \n        \n        \n        \n                \n                  21\n                  1\n                  0\n                \n                \n                  21\n                  1\n                  0\n                \n                \n                  22.8\n                  1\n                  1\n                \n                \n                  21.4\n                  0\n                  1\n                \n                \n                  18.7\n                  0\n                  0\n                \n                \n                  18.1\n                  0\n                  1\n                \n                \n                  14.3\n                  0\n                  0\n                \n                \n                  24.4\n                  0\n                  1\n                \n                \n                  22.8\n                  0\n                  1\n                \n                \n                  19.2\n                  0\n                  1\n                \n        \n      \n    \n\n\n\nUsers can also supply a logical matrix of the same size as x to indicate which cell should be styled. For example, we can change the colors of certain entries in a correlation matrix as follows:\n\ncormat &lt;- data.frame(cor(mtcars[1:5]))\ntt(cormat, digits = 2) |&gt;\n  style_tt(i = abs(cormat) &gt; .8, background = \"black\", color = \"white\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  1\n                  -0.85\n                  -0.85\n                  -0.78\n                  0.68\n                \n                \n                  -0.85\n                  1\n                  0.9\n                  0.83\n                  -0.7\n                \n                \n                  -0.85\n                  0.9\n                  1\n                  0.79\n                  -0.71\n                \n                \n                  -0.78\n                  0.83\n                  0.79\n                  1\n                  -0.45\n                \n                \n                  0.68\n                  -0.7\n                  -0.71\n                  -0.45\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nThe color, background, and fontsize arguments are vectorized. This allows easy specification of different colors in a single call:\n\ntt(x) |&gt;\n  style_tt(\n    i = 1:4,\n    color = c(\"red\", \"blue\", \"green\", \"orange\")\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen using a single value for a vectorized argument, it gets applied to all values:\n\ntt(x) |&gt;\n  style_tt(\n    j = 2:3,\n    color = c(\"orange\", \"green\"),\n    background = \"black\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also produce more complex heatmap-like tables to illustrate different font sizes in em units:\n\n# font sizes\nfs &lt;- seq(.1, 2, length.out = 20)\n\n# headless table\nk &lt;- data.frame(matrix(fs, ncol = 5))\n\n# colors\nbg &lt;- hcl.colors(20, \"Inferno\")\nfg &lt;- ifelse(as.matrix(k) &lt; 1.7, tail(bg, 1), head(bg, 1))\n\n# table\ntt(k, width = .7, theme = \"void\", colnames = FALSE) |&gt;\n  style_tt(j = 1:5, align = \"ccccc\") |&gt;\n  style_tt(\n    i = 1:4,\n    j = 1:5,\n    color = fg,\n    background = bg,\n    fontsize = fs\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  0.1\n                  0.5\n                  0.9\n                  1.3\n                  1.7\n                \n                \n                  0.2\n                  0.6\n                  1\n                  1.4\n                  1.8\n                \n                \n                  0.3\n                  0.7\n                  1.1\n                  1.5\n                  1.9\n                \n                \n                  0.4\n                  0.8\n                  1.2\n                  1.6\n                  2\n                \n        \n      \n    \n\n\n\n\n\n\nThe style_tt function allows us to customize the borders that surround eacell of a table, as well horizontal and vertical rules. To control these lines, we use the line, line_width, and line_color arguments. Here’s a brief overview of each of these arguments:\n\nline: This argument specifies where solid lines should be drawn. It is a string that can consist of the following characters:\n\n\"t\": Draw a line at the top of the cell, row, or column.\n\"b\": Draw a line at the bottom of the cell, row, or column.\n\"l\": Draw a line at the left side of the cell, row, or column.\n\"r\": Draw a line at the right side of the cell, row, or column.\nYou can combine these characters to draw lines on multiple sides, such as \"tbl\" to draw lines at the top, bottom, and left sides of a cell.\n\nline_width: This argument controls the width of the solid lines in em units (default: 0.1 em). You can adjust this value to make the lines thicker or thinner.\nline_color: Specifies the color of the solid lines. You can use color names, hexadecimal codes, or other color specifications to define the line color.\n\nHere is an example where we draw lines around every border (“t”, “b”, “l”, and “r”) of specified cells.\n\ntt(x, theme = \"void\") |&gt;\n  style_tt(\n    i = 0:3,\n    j = 1:3,\n    line = \"tblr\",\n    line_width = 0.4,\n    line_color = \"orange\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAnd here is an example with horizontal rules:\n\ntt(x, theme = \"void\") |&gt;\n  style_tt(i = 0, line = \"t\", line_color = \"orange\", line_width = 0.4) |&gt;\n  style_tt(i = 1, line = \"t\", line_color = \"purple\", line_width = 0.2) |&gt;\n  style_tt(i = 4, line = \"b\", line_color = \"orange\", line_width = 0.4)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ndat &lt;- data.frame(1:2, 3:4, 5:6, 7:8)\n\ntt(dat, theme = \"void\", colnames = FALSE) |&gt;\n  style_tt(\n    line = \"tblr\", line_color = \"white\", line_width = 0.5,\n    background = \"blue\", color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  1\n                  3\n                  5\n                  7\n                \n                \n                  2\n                  4\n                  6\n                  8\n                \n        \n      \n    \n\n\n\n\n\n\nStyling for Markdown and Word tables is more limited than for the other formats. In particular:\n\nThe only supported arguments are: bold, italic, and strikeout.\nHeaders inserted by group_tt() cannot be styled using the style_tt() function.\n\nThese limitations are due to the fact that there is no markdown syntax for the other options (ex: colors and background), and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\nOne workaround is to style the group headers directly in their definition by using markdown syntax:\n\nmtcars[1:4, 1:4] |&gt;\n  tt() |&gt;\n  group_tt(i = list(\"*Hello*\" = 1, \"__World__\" = 3)) |&gt;\n  print(\"markdown\")\n\n\n+------+-----+------+-----+\n| mpg  | cyl | disp | hp  |\n+======+=====+======+=====+\n| *Hello*                 |\n+------+-----+------+-----+\n| 21   | 6   | 160  | 110 |\n+------+-----+------+-----+\n| 21   | 6   | 160  | 110 |\n+------+-----+------+-----+\n| __World__               |\n+------+-----+------+-----+\n| 22.8 | 4   | 108  | 93  |\n+------+-----+------+-----+\n| 21.4 | 6   | 258  | 110 |\n+------+-----+------+-----+",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#cells-rows-columns",
    "href": "vignettes/style.html#cells-rows-columns",
    "title": "Style",
    "section": "",
    "text": "To style individual cells, we use the style_cell() function. The first two arguments—i and j—identify the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:\n\ntt(x) |&gt;\n  style_tt(\n    i = 2,\n    j = 3,\n    background = \"black\",\n    color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe i and j accept vectors of integers to modify several cells at once:\n\ntt(x) |&gt;\n  style_tt(\n    i = 2:3,\n    j = c(1, 3, 4),\n    italic = TRUE,\n    color = \"orange\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style all cells in a table by omitting both the i and j arguments:\n\ntt(x) |&gt; style_tt(color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style entire rows by omitting the j argument:\n\ntt(x) |&gt; style_tt(i = 1:2, color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can style entire columns by omitting the i argument:\n\ntt(x) |&gt; style_tt(j = c(2, 4), bold = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe j argument accepts integer vectors, character vectors, but also a string with a Perl-style regular expression, which makes it easier to select columns by name:\n\ntt(x) |&gt; style_tt(j = c(\"mpg\", \"drat\"), color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x) |&gt; style_tt(j = \"mpg|drat\", color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere we use a “negative lookahead” to exclude certain columns:\n\ntt(x) |&gt; style_tt(j = \"^(?!drat|mpg)\", color = \"orange\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nOf course, we can also call the style_tt() function several times to apply different styles to different parts of the table:\n\ntt(x) |&gt;\n  style_tt(i = 1, j = 1:2, color = \"orange\") |&gt;\n  style_tt(i = 1, j = 3:4, color = \"green\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#colors",
    "href": "vignettes/style.html#colors",
    "title": "Style",
    "section": "",
    "text": "The color and background arguments in the style_tt() function are used for specifying the text color and the background color for cells of a table created by the tt() function. This argument plays a crucial role in enhancing the visual appeal and readability of the table, whether it’s rendered in LaTeX or HTML format. The way we specify colors differs slightly between the two formats:\nFor HTML Output:\n\nHex Codes: You can specify colors using hexadecimal codes, which consist of a # followed by 6 characters (e.g., #CC79A7). This allows for a wide range of colors.\nKeywords: There’s also the option to use color keywords for convenience. The supported keywords are basic color names like black, red, blue, etc.\n\nFor LaTeX Output:\n\nHexadecimal Codes: Similar to HTML, you can use hexadecimal codes.\nKeywords: LaTeX supports a different set of color keywords, which include standard colors like black, red, blue, as well as additional ones like cyan, darkgray, lightgray, etc.\nColor Blending: An advanced feature in LaTeX is color blending, which can be achieved using the xcolor package. You can blend colors by specifying ratios (e.g., white!80!blue or green!20!red).\nLuminance Levels: The ninecolors package in LaTeX offers colors with predefined luminance levels, allowing for more nuanced color choices (e.g., “azure4”, “magenta8”).\n\nNote that the keywords used in LaTeX and HTML are slightly different.\n\ntt(x) |&gt; style_tt(i = 1:4, j = 1, color = \"#FF5733\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nNote that when using Hex codes in a LaTeX table, we need extra declarations in the LaTeX preamble. See ?tt for details.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#alignment",
    "href": "vignettes/style.html#alignment",
    "title": "Style",
    "section": "",
    "text": "To align columns, we use a single character, or a string where each letter represents a column:\n\ndat &lt;- data.frame(\n  a = c(\"a\", \"aaa\", \"aaaaa\"),\n  b = c(\"b\", \"bbb\", \"bbbbb\"),\n  c = c(\"c\", \"ccc\", \"ccccc\")\n)\n\ntt(dat) |&gt; style_tt(j = 1:3, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  a\n                  b\n                  c\n                \n                \n                  aaa\n                  bbb\n                  ccc\n                \n                \n                  aaaaa\n                  bbbbb\n                  ccccc\n                \n        \n      \n    \n\n\ntt(dat) |&gt; style_tt(j = 1:3, align = \"lcr\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  a\n                  b\n                  c\n                \n                \n                  aaa\n                  bbb\n                  ccc\n                \n                \n                  aaaaa\n                  bbbbb\n                  ccccc\n                \n        \n      \n    \n\n\n\nIn LaTeX documents (only), we can use decimal-alignment:\n\nz &lt;- data.frame(pi = c(pi * 100, pi * 1000, pi * 10000, pi * 100000))\ntt(z) |&gt;\n  format_tt(j = 1, digits = 8, num_fmt = \"significant_cell\") |&gt;\n  style_tt(j = 1, align = \"d\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                pi\n              \n        \n        \n        \n                \n                  314.15927\n                \n                \n                  3141.5927\n                \n                \n                  31415.927\n                \n                \n                  314159.27",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#font-size",
    "href": "vignettes/style.html#font-size",
    "title": "Style",
    "section": "",
    "text": "The font size is specified in em units.\n\ntt(x) |&gt; style_tt(i = 1:4, j = \"mpg|hp|qsec\", fontsize = 1.5)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#spanning-cells-merging-cells",
    "href": "vignettes/style.html#spanning-cells-merging-cells",
    "title": "Style",
    "section": "",
    "text": "Sometimes, it can be useful to make a cell stretch across multiple colums or rows, for example when we want to insert a label. To achieve this, we can use the colspan argument. Here, we make the 2nd cell of the 2nd row stretch across three columns and two rows:\n\ntt(x) |&gt; style_tt(\n  i = 2, j = 2,\n  colspan = 3,\n  rowspan = 2,\n  align = \"c\",\n  alignv = \"m\",\n  color = \"white\",\n  background = \"black\",\n  bold = TRUE\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere is the original table for comparison:\n\ntt(x)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nSpanning cells can be particularly useful when we want to suppress redundant labels:\n\ntab &lt;- aggregate(mpg ~ cyl + am, FUN = mean, data = mtcars)\ntab &lt;- tab[order(tab$cyl, tab$am), ]\ntab\n\n  cyl am      mpg\n1   4  0 22.90000\n4   4  1 28.07500\n2   6  0 19.12500\n5   6  1 20.56667\n3   8  0 15.05000\n6   8  1 15.40000\n\ntt(tab, digits = 2) |&gt;\n  style_tt(i = c(1, 3, 5), j = 1, rowspan = 2, alignv = \"t\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                cyl\n                am\n                mpg\n              \n        \n        \n        \n                \n                  4\n                  0\n                  23\n                \n                \n                  4\n                  1\n                  28\n                \n                \n                  6\n                  0\n                  19\n                \n                \n                  6\n                  1\n                  21\n                \n                \n                  8\n                  0\n                  15\n                \n                \n                  8\n                  1\n                  15\n                \n        \n      \n    \n\n\n\nThe rowspan feature is also useful to create multi-row labels. For example, in this table there is a linebreak, but all the text fits in a single cell:\n\ntab &lt;- data.frame(Letters = c(\"A&lt;br&gt;B\", \"\"), Numbers = c(\"First\", \"Second\"))\n\ntt(tab) |&gt;\n  style_tt(bootstrap_class = \"table-bordered\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Letters\n                Numbers\n              \n        \n        \n        \n                \n                  AB\n                  First\n                \n                \n                  \n                  Second\n                \n        \n      \n    \n\n\n\nNow, we use colspan to ensure that that cells in the first column take up less space and are combined into one:\n\ntt(tab) |&gt;\n  style_tt(bootstrap_class = \"table-bordered\") |&gt;\n  style_tt(1, 1, rowspan = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Letters\n                Numbers\n              \n        \n        \n        \n                \n                  AB\n                  First\n                \n                \n                  \n                  Second\n                \n        \n      \n    \n\n\n\nWe can combine several spans to create complex tables like this one:\n\ndf &lt;- structure(list(\n  Col1 = c(\"Col Header\", \"Item 0\", \"Item 1\", \"Item 2\", \"Total\"), \n  Col2 = c(\"Span 1\", \"X\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.1 = c(\"Span 1\", \"Y\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.2 = c(\"Span 2\", \"X\", \"xx\", \"xx\", \"xxxx\"), \n  Col2.3 = c(\"Span 2\", \"Y\", \"xx\", \"xx\", \"xxxx\")), \n  class = \"data.frame\", row.names = c(NA, -5L))\ndf |&gt;\n    setNames(NULL) |&gt;\n    tt() |&gt;\n    style_tt(1, 1, rowspan = 2, bold = TRUE) |&gt;\n    style_tt(1, c(2, 4), colspan = 2, bold = TRUE) |&gt;\n    style_tt(5, c(2, 4), colspan = 2) |&gt;\n    theme_tt(\"grid\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  Col Header\n                  Span 1\n                  Span 1\n                  Span 2\n                  Span 2\n                \n                \n                  Item 0\n                  X\n                  Y\n                  X\n                  Y\n                \n                \n                  Item 1\n                  xx\n                  xx\n                  xx\n                  xx\n                \n                \n                  Item 2\n                  xx\n                  xx\n                  xx\n                  xx\n                \n                \n                  Total\n                  xxxx\n                  xxxx\n                  xxxx\n                  xxxx",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#headers",
    "href": "vignettes/style.html#headers",
    "title": "Style",
    "section": "",
    "text": "The header can be omitted from the table by using the colnames argument.\n\ntt(x, colnames = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nThe first is row 0, and higher level headers (ex: column spanning labels) have negative indices like -1. They can be styled as expected:\n\ntt(x) |&gt; style_tt(i = 0, color = \"white\", background = \"black\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen styling columns without specifying i, the headers are styled in accordance with the rest of the column:\n\ntt(x) |&gt; style_tt(j = 2:3, color = \"white\", background = \"black\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#conditional-styling",
    "href": "vignettes/style.html#conditional-styling",
    "title": "Style",
    "section": "",
    "text": "We can use the standard which function from Base R to create indices and apply conditional stying on rows. And we can use a regular expression in j to apply conditional styling on columns:\n\nk &lt;- mtcars[1:10, c(\"mpg\", \"am\", \"vs\")]\n\ntt(k) |&gt;\n  style_tt(\n    i = which(k$am == k$vs),\n    background = \"teal\",\n    color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                am\n                vs\n              \n        \n        \n        \n                \n                  21\n                  1\n                  0\n                \n                \n                  21\n                  1\n                  0\n                \n                \n                  22.8\n                  1\n                  1\n                \n                \n                  21.4\n                  0\n                  1\n                \n                \n                  18.7\n                  0\n                  0\n                \n                \n                  18.1\n                  0\n                  1\n                \n                \n                  14.3\n                  0\n                  0\n                \n                \n                  24.4\n                  0\n                  1\n                \n                \n                  22.8\n                  0\n                  1\n                \n                \n                  19.2\n                  0\n                  1\n                \n        \n      \n    \n\n\n\nUsers can also supply a logical matrix of the same size as x to indicate which cell should be styled. For example, we can change the colors of certain entries in a correlation matrix as follows:\n\ncormat &lt;- data.frame(cor(mtcars[1:5]))\ntt(cormat, digits = 2) |&gt;\n  style_tt(i = abs(cormat) &gt; .8, background = \"black\", color = \"white\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  1\n                  -0.85\n                  -0.85\n                  -0.78\n                  0.68\n                \n                \n                  -0.85\n                  1\n                  0.9\n                  0.83\n                  -0.7\n                \n                \n                  -0.85\n                  0.9\n                  1\n                  0.79\n                  -0.71\n                \n                \n                  -0.78\n                  0.83\n                  0.79\n                  1\n                  -0.45\n                \n                \n                  0.68\n                  -0.7\n                  -0.71\n                  -0.45\n                  1",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#vectorized-styling-heatmaps",
    "href": "vignettes/style.html#vectorized-styling-heatmaps",
    "title": "Style",
    "section": "",
    "text": "The color, background, and fontsize arguments are vectorized. This allows easy specification of different colors in a single call:\n\ntt(x) |&gt;\n  style_tt(\n    i = 1:4,\n    color = c(\"red\", \"blue\", \"green\", \"orange\")\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen using a single value for a vectorized argument, it gets applied to all values:\n\ntt(x) |&gt;\n  style_tt(\n    j = 2:3,\n    color = c(\"orange\", \"green\"),\n    background = \"black\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also produce more complex heatmap-like tables to illustrate different font sizes in em units:\n\n# font sizes\nfs &lt;- seq(.1, 2, length.out = 20)\n\n# headless table\nk &lt;- data.frame(matrix(fs, ncol = 5))\n\n# colors\nbg &lt;- hcl.colors(20, \"Inferno\")\nfg &lt;- ifelse(as.matrix(k) &lt; 1.7, tail(bg, 1), head(bg, 1))\n\n# table\ntt(k, width = .7, theme = \"void\", colnames = FALSE) |&gt;\n  style_tt(j = 1:5, align = \"ccccc\") |&gt;\n  style_tt(\n    i = 1:4,\n    j = 1:5,\n    color = fg,\n    background = bg,\n    fontsize = fs\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  0.1\n                  0.5\n                  0.9\n                  1.3\n                  1.7\n                \n                \n                  0.2\n                  0.6\n                  1\n                  1.4\n                  1.8\n                \n                \n                  0.3\n                  0.7\n                  1.1\n                  1.5\n                  1.9\n                \n                \n                  0.4\n                  0.8\n                  1.2\n                  1.6\n                  2",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#lines-borders",
    "href": "vignettes/style.html#lines-borders",
    "title": "Style",
    "section": "",
    "text": "The style_tt function allows us to customize the borders that surround eacell of a table, as well horizontal and vertical rules. To control these lines, we use the line, line_width, and line_color arguments. Here’s a brief overview of each of these arguments:\n\nline: This argument specifies where solid lines should be drawn. It is a string that can consist of the following characters:\n\n\"t\": Draw a line at the top of the cell, row, or column.\n\"b\": Draw a line at the bottom of the cell, row, or column.\n\"l\": Draw a line at the left side of the cell, row, or column.\n\"r\": Draw a line at the right side of the cell, row, or column.\nYou can combine these characters to draw lines on multiple sides, such as \"tbl\" to draw lines at the top, bottom, and left sides of a cell.\n\nline_width: This argument controls the width of the solid lines in em units (default: 0.1 em). You can adjust this value to make the lines thicker or thinner.\nline_color: Specifies the color of the solid lines. You can use color names, hexadecimal codes, or other color specifications to define the line color.\n\nHere is an example where we draw lines around every border (“t”, “b”, “l”, and “r”) of specified cells.\n\ntt(x, theme = \"void\") |&gt;\n  style_tt(\n    i = 0:3,\n    j = 1:3,\n    line = \"tblr\",\n    line_width = 0.4,\n    line_color = \"orange\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAnd here is an example with horizontal rules:\n\ntt(x, theme = \"void\") |&gt;\n  style_tt(i = 0, line = \"t\", line_color = \"orange\", line_width = 0.4) |&gt;\n  style_tt(i = 1, line = \"t\", line_color = \"purple\", line_width = 0.2) |&gt;\n  style_tt(i = 4, line = \"b\", line_color = \"orange\", line_width = 0.4)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ndat &lt;- data.frame(1:2, 3:4, 5:6, 7:8)\n\ntt(dat, theme = \"void\", colnames = FALSE) |&gt;\n  style_tt(\n    line = \"tblr\", line_color = \"white\", line_width = 0.5,\n    background = \"blue\", color = \"white\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  1\n                  3\n                  5\n                  7\n                \n                \n                  2\n                  4\n                  6\n                  8",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/style.html#markdown-and-word",
    "href": "vignettes/style.html#markdown-and-word",
    "title": "Style",
    "section": "",
    "text": "Styling for Markdown and Word tables is more limited than for the other formats. In particular:\n\nThe only supported arguments are: bold, italic, and strikeout.\nHeaders inserted by group_tt() cannot be styled using the style_tt() function.\n\nThese limitations are due to the fact that there is no markdown syntax for the other options (ex: colors and background), and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\nOne workaround is to style the group headers directly in their definition by using markdown syntax:\n\nmtcars[1:4, 1:4] |&gt;\n  tt() |&gt;\n  group_tt(i = list(\"*Hello*\" = 1, \"__World__\" = 3)) |&gt;\n  print(\"markdown\")\n\n\n+------+-----+------+-----+\n| mpg  | cyl | disp | hp  |\n+======+=====+======+=====+\n| *Hello*                 |\n+------+-----+------+-----+\n| 21   | 6   | 160  | 110 |\n+------+-----+------+-----+\n| 21   | 6   | 160  | 110 |\n+------+-----+------+-----+\n| __World__               |\n+------+-----+------+-----+\n| 22.8 | 4   | 108  | 93  |\n+------+-----+------+-----+\n| 21.4 | 6   | 258  | 110 |\n+------+-----+------+-----+",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Style"
    ]
  },
  {
    "objectID": "vignettes/plot.html",
    "href": "vignettes/plot.html",
    "title": "Plots and images",
    "section": "",
    "text": "The plot_tt() function can embed images and plots in a tinytable. We can insert images by specifying their paths and positions (i/j).\n\nlibrary(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\n\n\nTo insert images in a table, we use the plot_tt() function. The path_img values must be relative to the main document saved by save_tt() or to the Quarto (or Rmarkdown) document in which the code is executed.\n\ndat &lt;- data.frame(\n  Species = c(\"Spider\", \"Squirrel\"),\n  Image = \"\"\n)\n\nimg &lt;- c(\n  \"figures/spider.png\",\n  \"figures/squirrel.png\"\n)\n\ntt(dat) |&gt;\n  plot_tt(j = 2, images = img, height = 3)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Species\n                Image\n              \n        \n        \n        \n                \n                  Spider\n                  \n                \n                \n                  Squirrel\n                  \n                \n        \n      \n    \n\n\n\nIn HTML tables, it is possible to insert tables directly from a web address, but not in LaTeX.\n\ndat &lt;- data.frame(\"R\" = \"\")\nimg &lt;- \"https://cran.r-project.org/Rlogo.svg\"\ntt(dat) |&gt;\n  plot_tt(i = 1, j = 1, images = img, height = 7) |&gt;\n  style_tt(j = 1, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                R\n              \n        \n        \n        \n                \n                  \n                \n        \n      \n    \n\n\n\n\n\n\nWe can draw inline plots three ways, with\n\nBuilt-in templates for histograms, density plots, and bar plots\nCustom plots using base R plots.\nCustom plots using ggplot2.\n\nTo draw custom plots, one simply has to define a custom function, whose structure we illustrate below.\n\n\nThere are several types of inline plots available by default. For example,\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ndat &lt;- data.frame(\n  Variables = c(\"mpg\", \"hp\", \"qsec\"),\n  Histogram = \"\",\n  Density = \"\",\n  Bar = \"\",\n  Line = \"\"\n)\n\n# random data for sparklines\nlines &lt;- lapply(1:3, \\(x) data.frame(x = 1:10, y = rnorm(10)))\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = \"histogram\", data = plot_data) |&gt;\n  plot_tt(j = 3, fun = \"density\", data = plot_data, color = \"darkgreen\") |&gt;\n  plot_tt(j = 4, fun = \"bar\", data = list(2, 3, 6), color = \"orange\") |&gt;\n  plot_tt(j = 5, fun = \"line\", data = lines, color = \"blue\") |&gt;\n  style_tt(j = 2:5, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n                Density\n                Bar\n                Line\n              \n        \n        \n        \n                \n                  mpg\n                  \n                  \n                  \n                  \n                \n                \n                  hp\n                  \n                  \n                  \n                  \n                \n                \n                  qsec\n                  \n                  \n                  \n                  \n                \n        \n      \n    \n\n\n\n\n\n\nImportant: Custom functions must have ... as an argument.\nTo create a custom inline plot using Base R plotting functions, we create a function that returns another function. tinytable will then call that second function internally to generate the plot.\nThis is easier than it sounds! For example:\n\nf &lt;- function(d, ...) {\n  function() hist(d, axes = FALSE, ann = FALSE, col = \"lightblue\")\n}\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ndat &lt;- data.frame(Variables = c(\"mpg\", \"hp\", \"qsec\"), Histogram = \"\")\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = f, data = plot_data)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n              \n        \n        \n        \n                \n                  mpg\n                  \n                \n                \n                  hp\n                  \n                \n                \n                  qsec\n                  \n                \n        \n      \n    \n\n\n\n\n\n\nImportant: Custom functions must have ... as an argument.\nTo create a custom inline plot using ggplot2, we create a function that returns a ggplot object:\n\nlibrary(ggplot2)\n\nf &lt;- function(d, color = \"black\", ...) {\n  d &lt;- data.frame(x = d)\n  ggplot(d, aes(x = x)) +\n    geom_histogram(bins = 30, color = color, fill = color) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_void()\n}\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = f, data = plot_data, color = \"pink\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n              \n        \n        \n        \n                \n                  mpg\n                  \n                \n                \n                  hp\n                  \n                \n                \n                  qsec\n                  \n                \n        \n      \n    \n\n\n\nWe can insert arbitrarily complex plots by customizing the ggplot2 call:\n\npenguins &lt;- read.csv(\n  \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\",\n  na.strings = \"\"\n) |&gt; na.omit()\n\n# split data by species\ndat &lt;- split(penguins, penguins$species)\nbody &lt;- lapply(dat, \\(x) x$body_mass_g)\nflip &lt;- lapply(dat, \\(x) x$flipper_length_mm)\n\n# create nearly empty table\ntab &lt;- data.frame(\n  \"Species\" = names(dat),\n  \"Body Mass\" = \"\",\n  \"Flipper Length\" = \"\",\n  \"Body vs. Flipper\" = \"\",\n  check.names = FALSE\n)\n\n# custom ggplot2 function to create inline plot\nf &lt;- function(d, ...) {\n  ggplot(d, aes(x = flipper_length_mm, y = body_mass_g, color = sex)) +\n    geom_point(size = .2) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    scale_color_manual(values = c(\"#E69F00\", \"#56B4E9\")) +\n    theme_void() +\n    theme(legend.position = \"none\")\n}\n\n# `tinytable` calls\ntt(tab) |&gt;\n  plot_tt(j = 2, fun = \"histogram\", data = body, height = 2) |&gt;\n  plot_tt(j = 3, fun = \"density\", data = flip, height = 2) |&gt;\n  plot_tt(j = 4, fun = f, data = dat, height = 2) |&gt;\n  style_tt(j = 2:4, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Species\n                Body Mass\n                Flipper Length\n                Body vs. Flipper\n              \n        \n        \n        \n                \n                  Adelie\n                  \n                  \n                  \n                \n                \n                  Chinstrap\n                  \n                  \n                  \n                \n                \n                  Gentoo\n                  \n                  \n                  \n                \n        \n      \n    \n\n\n\n\n\n\n\nWe can use the fontawesome package to include fancy icons in HTML tables:\n\nlibrary(fontawesome)\ntmp &lt;- mtcars[1:4, 1:4]\ntmp[1, 1] &lt;- paste(fa(\"r-project\"), \"for statistics\")\ntt(tmp)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                   for statistics\n                  6\n                  160\n                  110\n                \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Plots and images"
    ]
  },
  {
    "objectID": "vignettes/plot.html#inserting-images-in-tables",
    "href": "vignettes/plot.html#inserting-images-in-tables",
    "title": "Plots and images",
    "section": "",
    "text": "To insert images in a table, we use the plot_tt() function. The path_img values must be relative to the main document saved by save_tt() or to the Quarto (or Rmarkdown) document in which the code is executed.\n\ndat &lt;- data.frame(\n  Species = c(\"Spider\", \"Squirrel\"),\n  Image = \"\"\n)\n\nimg &lt;- c(\n  \"figures/spider.png\",\n  \"figures/squirrel.png\"\n)\n\ntt(dat) |&gt;\n  plot_tt(j = 2, images = img, height = 3)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Species\n                Image\n              \n        \n        \n        \n                \n                  Spider\n                  \n                \n                \n                  Squirrel\n                  \n                \n        \n      \n    \n\n\n\nIn HTML tables, it is possible to insert tables directly from a web address, but not in LaTeX.\n\ndat &lt;- data.frame(\"R\" = \"\")\nimg &lt;- \"https://cran.r-project.org/Rlogo.svg\"\ntt(dat) |&gt;\n  plot_tt(i = 1, j = 1, images = img, height = 7) |&gt;\n  style_tt(j = 1, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                R",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Plots and images"
    ]
  },
  {
    "objectID": "vignettes/plot.html#inline-plots",
    "href": "vignettes/plot.html#inline-plots",
    "title": "Plots and images",
    "section": "",
    "text": "We can draw inline plots three ways, with\n\nBuilt-in templates for histograms, density plots, and bar plots\nCustom plots using base R plots.\nCustom plots using ggplot2.\n\nTo draw custom plots, one simply has to define a custom function, whose structure we illustrate below.\n\n\nThere are several types of inline plots available by default. For example,\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ndat &lt;- data.frame(\n  Variables = c(\"mpg\", \"hp\", \"qsec\"),\n  Histogram = \"\",\n  Density = \"\",\n  Bar = \"\",\n  Line = \"\"\n)\n\n# random data for sparklines\nlines &lt;- lapply(1:3, \\(x) data.frame(x = 1:10, y = rnorm(10)))\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = \"histogram\", data = plot_data) |&gt;\n  plot_tt(j = 3, fun = \"density\", data = plot_data, color = \"darkgreen\") |&gt;\n  plot_tt(j = 4, fun = \"bar\", data = list(2, 3, 6), color = \"orange\") |&gt;\n  plot_tt(j = 5, fun = \"line\", data = lines, color = \"blue\") |&gt;\n  style_tt(j = 2:5, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n                Density\n                Bar\n                Line\n              \n        \n        \n        \n                \n                  mpg\n                  \n                  \n                  \n                  \n                \n                \n                  hp\n                  \n                  \n                  \n                  \n                \n                \n                  qsec\n                  \n                  \n                  \n                  \n                \n        \n      \n    \n\n\n\n\n\n\nImportant: Custom functions must have ... as an argument.\nTo create a custom inline plot using Base R plotting functions, we create a function that returns another function. tinytable will then call that second function internally to generate the plot.\nThis is easier than it sounds! For example:\n\nf &lt;- function(d, ...) {\n  function() hist(d, axes = FALSE, ann = FALSE, col = \"lightblue\")\n}\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ndat &lt;- data.frame(Variables = c(\"mpg\", \"hp\", \"qsec\"), Histogram = \"\")\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = f, data = plot_data)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n              \n        \n        \n        \n                \n                  mpg\n                  \n                \n                \n                  hp\n                  \n                \n                \n                  qsec\n                  \n                \n        \n      \n    \n\n\n\n\n\n\nImportant: Custom functions must have ... as an argument.\nTo create a custom inline plot using ggplot2, we create a function that returns a ggplot object:\n\nlibrary(ggplot2)\n\nf &lt;- function(d, color = \"black\", ...) {\n  d &lt;- data.frame(x = d)\n  ggplot(d, aes(x = x)) +\n    geom_histogram(bins = 30, color = color, fill = color) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme_void()\n}\n\nplot_data &lt;- list(mtcars$mpg, mtcars$hp, mtcars$qsec)\n\ntt(dat) |&gt;\n  plot_tt(j = 2, fun = f, data = plot_data, color = \"pink\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Variables\n                Histogram\n              \n        \n        \n        \n                \n                  mpg\n                  \n                \n                \n                  hp\n                  \n                \n                \n                  qsec\n                  \n                \n        \n      \n    \n\n\n\nWe can insert arbitrarily complex plots by customizing the ggplot2 call:\n\npenguins &lt;- read.csv(\n  \"https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv\",\n  na.strings = \"\"\n) |&gt; na.omit()\n\n# split data by species\ndat &lt;- split(penguins, penguins$species)\nbody &lt;- lapply(dat, \\(x) x$body_mass_g)\nflip &lt;- lapply(dat, \\(x) x$flipper_length_mm)\n\n# create nearly empty table\ntab &lt;- data.frame(\n  \"Species\" = names(dat),\n  \"Body Mass\" = \"\",\n  \"Flipper Length\" = \"\",\n  \"Body vs. Flipper\" = \"\",\n  check.names = FALSE\n)\n\n# custom ggplot2 function to create inline plot\nf &lt;- function(d, ...) {\n  ggplot(d, aes(x = flipper_length_mm, y = body_mass_g, color = sex)) +\n    geom_point(size = .2) +\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    scale_color_manual(values = c(\"#E69F00\", \"#56B4E9\")) +\n    theme_void() +\n    theme(legend.position = \"none\")\n}\n\n# `tinytable` calls\ntt(tab) |&gt;\n  plot_tt(j = 2, fun = \"histogram\", data = body, height = 2) |&gt;\n  plot_tt(j = 3, fun = \"density\", data = flip, height = 2) |&gt;\n  plot_tt(j = 4, fun = f, data = dat, height = 2) |&gt;\n  style_tt(j = 2:4, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Species\n                Body Mass\n                Flipper Length\n                Body vs. Flipper\n              \n        \n        \n        \n                \n                  Adelie\n                  \n                  \n                  \n                \n                \n                  Chinstrap\n                  \n                  \n                  \n                \n                \n                  Gentoo",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Plots and images"
    ]
  },
  {
    "objectID": "vignettes/plot.html#fontawesome",
    "href": "vignettes/plot.html#fontawesome",
    "title": "Plots and images",
    "section": "",
    "text": "We can use the fontawesome package to include fancy icons in HTML tables:\n\nlibrary(fontawesome)\ntmp &lt;- mtcars[1:4, 1:4]\ntmp[1, 1] &lt;- paste(fa(\"r-project\"), \"for statistics\")\ntt(tmp)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                   for statistics\n                  6\n                  160\n                  110\n                \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Plots and images"
    ]
  },
  {
    "objectID": "vignettes/custom.html",
    "href": "vignettes/custom.html",
    "title": "Customization",
    "section": "",
    "text": "library(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\n\n\n\n\nThe Bootstrap framework provides a number of built-in themes to style tables, using “classes.” To use them, we call style_tt() with the bootstrap_class argument. A list of available Bootstrap classes can be found here: https://getbootstrap.com/docs/5.3/content/tables/\nTo produce a more condensed or “small” table, we use the table-sm class:\n\ntt(x) |&gt; style_tt(bootstrap_class = \"table table-sm\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nTo produce a “bordered” table, we use the table-bordered class:\n\ntt(x) |&gt; style_tt(bootstrap_class = \"table table-bordered\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also combine several Bootstrap classes. Here, we get a table with the “hover” feature:\n\ntt(x) |&gt; style_tt(\n  bootstrap_class = \"table table-hover\"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nBy default, Bootstrap 5 places captions at the bottom of the table. This can be changed by using a different class:\n\ntt(head(iris), caption = \"A caption on top\") |&gt;\n  style_tt(bootstrap_class = \"table caption-top\")\n\n\n\n    \n\n    \n    \n      \n        \n        A caption on top\n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n        \n      \n    \n\n\n\n\n\n\nThe style_tt() function allows us to declare CSS properties and values for individual cells, columns, or rows of a table. For example, if we want to make the first column bold, we could do:\n\ntt(x) |&gt;\n  style_tt(j = 1, bootstrap_css = \"font-weight: bold; color: red;\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nFor more extensive customization, we can use complete CSS rules. In this example, we define several rules that apply to a new class called mytable. Then, we use the theme argument of the tt() function to ensure that our tiny table is of class mytable. Finally, we call style_bootstrap() to apply the rules with the bootstrap_css_rule argument.\n\ncss_rule &lt;- \"\n.mytable {\n  background: linear-gradient(45deg, #EA8D8D, #A890FE);\n  width: 600px;\n  border-collapse: collapse;\n  overflow: hidden;\n  box-shadow: 0 0 20px rgba(0,0,0,0.1);\n}\n\n.mytable th,\n.mytable td {\n  padding: 5px;\n  background-color: rgba(255,255,255,0.2);\n  color: #fff;\n}\n\n.mytable tbody tr:hover {\n  background-color: rgba(255,255,255,0.3);\n}\n\n.mytable tbody td:hover:before {\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: -9999px;\n  bottom: -9999px;\n  background-color: rgba(255,255,255,0.2);\n  z-index: -1;\n}\n\"\n\ntt(x, width = 2 / 3) |&gt;\n  style_tt(\n    j = 1:5,\n    align = \"ccccc\",\n    bootstrap_class = \"table mytable\",\n    bootstrap_css_rule = css_rule\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAnd here’s another example:\n\ncss &lt;- \"\n.squirreltable {\n  background-size: cover;\n  background-position: center;\n  background-image: url('https://user-images.githubusercontent.com/987057/82732352-b9aabf00-9cda-11ea-92a6-26750cf097d0.png');\n  --bs-table-bg: transparent;\n}\n\"\n\ntt(mtcars[1:10, 1:8]) |&gt;\n  style_tt(\n    bootstrap_class = \"table table-borderless squirreltable\",\n    bootstrap_css_rule = css\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n                \n                  19.2\n                  6\n                  168\n                  123\n                  3.92\n                  3.44\n                  18.3\n                  1\n                \n        \n      \n    \n\n\n\nAnd yet another one. Some Rmarkdown documents like bookdown use older versions of Bootstrap that do not have a caption-top class. We can recreate that functionality with CSS rules and classes. For example,\nrule &lt;- \".bottomcaption {caption-side: bottom;}\"\ntt(head(iris), caption = \"Hello world\") |&gt;\n  style_tt(bootstrap_class = \"table bottomcaption\", bootstrap_css_rule = rule)\n\n\n\n\nThe LaTeX / PDF customization options described in this section are not available for HTML documents. Please refer to the PDF documentation hosted on the website to read this part of the tutorial.\n\n\n\n\n\n\n\n\n\n\n\n\ntinytable is a great complement to Shiny for displaying HTML tables in a web app. The styling in a tinytable is applied by JavaScript functions and CSS. Thus, to ensure that this styling is preserved in a Shiny app, one strategy is to bake the entire page, save it in a temporary file, and load it using the includeHTML function from the shiny package. This approach is illustrated in this minimal example:\n\nlibrary(\"shiny\")\nlibrary(\"tinytable\")\n\nfn &lt;- paste(tempfile(), \".html\")\ntab &lt;- tt(mtcars[1:5, 1:4]) |&gt;\n  style_tt(i = 0:5, color = \"orange\", background = \"black\") |&gt;\n  save_tt(fn)\n\nshinyApp(\n  ui = fluidPage(\n    fluidRow(column(\n      12, h1(\"This is test of tinytable\"),\n      shiny::includeHTML(fn)\n    ))\n  ),\n  server = function(input, output) {\n  }\n)",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Customization"
    ]
  },
  {
    "objectID": "vignettes/custom.html#html",
    "href": "vignettes/custom.html#html",
    "title": "Customization",
    "section": "",
    "text": "The Bootstrap framework provides a number of built-in themes to style tables, using “classes.” To use them, we call style_tt() with the bootstrap_class argument. A list of available Bootstrap classes can be found here: https://getbootstrap.com/docs/5.3/content/tables/\nTo produce a more condensed or “small” table, we use the table-sm class:\n\ntt(x) |&gt; style_tt(bootstrap_class = \"table table-sm\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nTo produce a “bordered” table, we use the table-bordered class:\n\ntt(x) |&gt; style_tt(bootstrap_class = \"table table-bordered\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also combine several Bootstrap classes. Here, we get a table with the “hover” feature:\n\ntt(x) |&gt; style_tt(\n  bootstrap_class = \"table table-hover\"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nBy default, Bootstrap 5 places captions at the bottom of the table. This can be changed by using a different class:\n\ntt(head(iris), caption = \"A caption on top\") |&gt;\n  style_tt(bootstrap_class = \"table caption-top\")\n\n\n\n    \n\n    \n    \n      \n        \n        A caption on top\n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n        \n      \n    \n\n\n\n\n\n\nThe style_tt() function allows us to declare CSS properties and values for individual cells, columns, or rows of a table. For example, if we want to make the first column bold, we could do:\n\ntt(x) |&gt;\n  style_tt(j = 1, bootstrap_css = \"font-weight: bold; color: red;\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nFor more extensive customization, we can use complete CSS rules. In this example, we define several rules that apply to a new class called mytable. Then, we use the theme argument of the tt() function to ensure that our tiny table is of class mytable. Finally, we call style_bootstrap() to apply the rules with the bootstrap_css_rule argument.\n\ncss_rule &lt;- \"\n.mytable {\n  background: linear-gradient(45deg, #EA8D8D, #A890FE);\n  width: 600px;\n  border-collapse: collapse;\n  overflow: hidden;\n  box-shadow: 0 0 20px rgba(0,0,0,0.1);\n}\n\n.mytable th,\n.mytable td {\n  padding: 5px;\n  background-color: rgba(255,255,255,0.2);\n  color: #fff;\n}\n\n.mytable tbody tr:hover {\n  background-color: rgba(255,255,255,0.3);\n}\n\n.mytable tbody td:hover:before {\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: -9999px;\n  bottom: -9999px;\n  background-color: rgba(255,255,255,0.2);\n  z-index: -1;\n}\n\"\n\ntt(x, width = 2 / 3) |&gt;\n  style_tt(\n    j = 1:5,\n    align = \"ccccc\",\n    bootstrap_class = \"table mytable\",\n    bootstrap_css_rule = css_rule\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAnd here’s another example:\n\ncss &lt;- \"\n.squirreltable {\n  background-size: cover;\n  background-position: center;\n  background-image: url('https://user-images.githubusercontent.com/987057/82732352-b9aabf00-9cda-11ea-92a6-26750cf097d0.png');\n  --bs-table-bg: transparent;\n}\n\"\n\ntt(mtcars[1:10, 1:8]) |&gt;\n  style_tt(\n    bootstrap_class = \"table table-borderless squirreltable\",\n    bootstrap_css_rule = css\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n                \n                  19.2\n                  6\n                  168\n                  123\n                  3.92\n                  3.44\n                  18.3\n                  1\n                \n        \n      \n    \n\n\n\nAnd yet another one. Some Rmarkdown documents like bookdown use older versions of Bootstrap that do not have a caption-top class. We can recreate that functionality with CSS rules and classes. For example,\nrule &lt;- \".bottomcaption {caption-side: bottom;}\"\ntt(head(iris), caption = \"Hello world\") |&gt;\n  style_tt(bootstrap_class = \"table bottomcaption\", bootstrap_css_rule = rule)",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Customization"
    ]
  },
  {
    "objectID": "vignettes/custom.html#sec-tabularray",
    "href": "vignettes/custom.html#sec-tabularray",
    "title": "Customization",
    "section": "",
    "text": "The LaTeX / PDF customization options described in this section are not available for HTML documents. Please refer to the PDF documentation hosted on the website to read this part of the tutorial.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Customization"
    ]
  },
  {
    "objectID": "vignettes/custom.html#shiny",
    "href": "vignettes/custom.html#shiny",
    "title": "Customization",
    "section": "",
    "text": "tinytable is a great complement to Shiny for displaying HTML tables in a web app. The styling in a tinytable is applied by JavaScript functions and CSS. Thus, to ensure that this styling is preserved in a Shiny app, one strategy is to bake the entire page, save it in a temporary file, and load it using the includeHTML function from the shiny package. This approach is illustrated in this minimal example:\n\nlibrary(\"shiny\")\nlibrary(\"tinytable\")\n\nfn &lt;- paste(tempfile(), \".html\")\ntab &lt;- tt(mtcars[1:5, 1:4]) |&gt;\n  style_tt(i = 0:5, color = \"orange\", background = \"black\") |&gt;\n  save_tt(fn)\n\nshinyApp(\n  ui = fluidPage(\n    fluidRow(column(\n      12, h1(\"This is test of tinytable\"),\n      shiny::includeHTML(fn)\n    ))\n  ),\n  server = function(input, output) {\n  }\n)",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Customization"
    ]
  },
  {
    "objectID": "vignettes/alternatives.html",
    "href": "vignettes/alternatives.html",
    "title": "Alternative packages",
    "section": "",
    "text": "How does tinytable compare to alternative table-drawing packages in R? There are many fantastic table-drawing packages already out there; some with features that tinytable does not yet support. If you don’t find what you need in tinytable, I recommend you try one of these:\n\ngt\nkableExtra\nhuxtable\nDT\nflextable\nreactable\n\nHere are a few totally biased (and possibly unfair) comments about each of them.\nThe first difference between tinytable and alternatives is that tinytable covers much of the same functionality without loading any other R package by default. I think it is very important for R package developers to have access to a table-drawing package that does not force them to import dozens of other packages, potentially exposing them to breaking changes and upstream bugs. In my view, this service to developers alone justifies writing a new package.\nNow let’s consider alternatives one by one.\ngt (60 dependencies) is an amazingly powerful table-drawing package; possibly the most powerful in R. I like it a lot, and it is the one I recommend if you don’t find the features you need in tinytable. The reasons I don’t personally use gt on a day-to-day basis are entirely subjective. First, and least important, I find its syntax very verbose: customizing any aspect of a table always seems to take many keystrokes. Second, and this is obviously a reflection of my own limitations, but I have never quite figured out how gt actually works; it has so many exported functions (180+!) that I get lost. gt is more powerful than tinytable, but that power comes at the price of complexity. One goal of tinytable is to let you do 98% of what you need by learning 4 simple functions; then you can use a bit of CSS or LaTeX if you need extreme customization.\nkableExtra (48 dependencies) is a very flexible package with amazing documentation. Before writing tinytable, I actually made a few very minor contributions and bug fixes to kableExtra. In the end, however, I concluded that while the package is great, its code base is too hard to maintain and extend. The challenge on the backend is that kableExtra accepts tables drawn as raw strings by the knitr package, and then modifies them using a series of complex regular expressions. The author has done truly amazing work, but it’s just a really difficult strategy to implement, scale, and maintain. (Incidentally, kableExtra is not very actively developed anymore.) Finally, I really like the concept of separating styling from data, and kableExtra modifies the content of every cell to style its content. That sometimes makes LaTeX and HTML code pretty hard to read and edit.\nhuxtable (28 dependencies) is an interesting and powerful-looking package, but I know it less well than the others. The key design decision of the author is that each feature is implemented with a distinct function. I understand that design impulse: going through the documentation of a function with 50 arguments can be daunting. That said, I feel that sifting through a manual with 300+ exported functions also makes for a steep learning curve. In addition, I prefer HTML and LaTeX code to be human-readable, in case I need to tweak them by hand before publication; huxtable tables are not that.\nDT (39 dependencies) is nice, but it only draws HTML table, so that’s a non-starter for me. I need HTML, LaTeX, Word, PNG, PDF, and Typst output, depending on the project I am working on.\nreactable (33 dependencies) is also nice, and also HTML-only. The main benefit of reactable is that it can create interactive tables with filtering, sorting, and pagination.\nflextable (39 dependencies) is nice, but it does not support LaTeX, and I need that format for “real work.”\nAt this point, it’s useful to point out that there are also many packages to compute statistics and build tables (ex: modelsummary, gtsummary, table1). Many of those packages delegate the actual drawing of the tables (ie: lines and colors) to one of the table-drawing packages listed above. In that sense, tinytable should be seen as more of a complement than an alternative to data summary packages. The goal of tinytable is to help users and developers convert data frames into beautiful tables easily. What people put in those tables is outside the scope of tinytable. If you are interested in a package to create data summaries and regression tables/plots, please check out my modelsummary package: https://modelsummary.com\nDid I miss your favorite package? Drop me a note and I’ll add it to the list.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Alternatives"
    ]
  },
  {
    "objectID": "vignettes/theme.html",
    "href": "vignettes/theme.html",
    "title": "Themes",
    "section": "",
    "text": "tinytable offers a very flexible theming framwork, which includes a few basic visual looks, as well as other functions to apply collections of transformations to tinytable objects in a repeatable way. These themes can be applied by supplying a string or function to the theme argument in tt(). Alternatively, users can call the theme_tt() function.\nThe main difference between theme_tt() and the other options in package, is that whereas style_tt() and format_tt() aim to be output agnostic, theme_tt() supplies transformations that can be output-specific, and which can have their own sets of distinct arguments. See below for a few examples.\n\nlibrary(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\n\n\nTo begin, let’s explore a few of the basic looks supplied by themes:\n\ntt(x, theme = \"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x) |&gt; theme_tt(\"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, theme = \"grid\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, theme = \"bootstrap\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nUsers can also define their own themes to apply consistent visual tweaks to tables. For example, this defines a themeing function and sets a global option to apply it to all tables consistently:1\n\ntheme_vincent &lt;- function(x, ...) {\n  out &lt;- x |&gt; \n    style_tt(color = \"teal\") |&gt;\n    theme_tt(\"default\")\n  out@caption &lt;- \"Always use the same caption.\"\n  out@width &lt;- .5\n  return(out)\n}\n\noptions(tinytable_tt_theme = theme_vincent)\n\ntt(mtcars[1:2, 1:2])\n\n\n\n    \n\n    \n    \n      \n        \n        Always use the same caption.\n              \n                mpg\n                cyl\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\ntt(mtcars[1:3, 1:3])\n\n\n\n    \n\n    \n    \n      \n        \n        Always use the same caption.\n              \n                mpg\n                cyl\n                disp\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                \n                \n                  21\n                  6\n                  160\n                \n                \n                  22.8\n                  4\n                  108\n                \n        \n      \n    \n\n\noptions(tinytable_tt_theme = NULL)\n\nHere is a slightly more complex example. The benefit of this approach is that we apply a function via the style_tt() function and its finalize argument, so we can leverage some of the object components that are only available at the printing stage:\n\ntheme_slides &lt;- function(x, ...) {\n  fn &lt;- function(table) {\n    if (isTRUE(table@output == \"typst\")) {\n      table@table_string &lt;- paste0(\"#figure([\\n\", table@table_string, \"\\n])\")\n    }\n    return(table)\n  }\n  x &lt;- style_tt(x, finalize = fn)\n  return(x)\n}\n\ntt(head(iris), theme = theme_slides)\n\nNote: the code above is not evaluated because it only applies to Typst output.\n\n\n\nThe tabular theme is designed to provide a more “raw” table, without a floating table environment in LaTeX, and without CSS or Javascript in HTML.\n\ntt(x) |&gt;\n  theme_tt(\"tabular\") |&gt;\n  print(\"latex\")\n\n\\begin{tabular}{lllll}\n\\hline\nmpg & cyl & disp & hp & drat \\\\ \\hline\n21 & 6 & 160 & 110 & 3.9 \\\\\n21 & 6 & 160 & 110 & 3.9 \\\\\n22.8 & 4 & 108 & 93 & 3.85 \\\\\n21.4 & 6 & 258 & 110 & 3.08 \\\\\n\\hline\n\\end{tabular} \n\n\n\n\n\nLaTeX only.\n\n\n\nLaTeX only.\n\n\n\nLaTeX only.\n\n\n\nLaTeX only.\n\n\n\nThis section provides a few user-written themes that can be used to extend the functionality of tinytable. These themes are not included in the package by default, but they can be easily added to your workflow. If you would like your own custom theme to appear here, please open an issue on the tinytable GitHub repository or submit a pull request.\n\n\nThis theme was written by Kazuharu Yanagimoto. Thanks for your contribution!\nThe MiTeX project aims to bring LaTeX support to Typst documents. This theme replace every instance of matching pairs of dollars signs $..$ by a MiTeX function call: #mitex(...). This allows you to use LaTeX math in Typst documents.\nWarning: The substitution code is very simple and it may not work properly when there are unmatched $ symbols in the document.\ntheme_mitex &lt;- function(x, ...) {\n    fn &lt;- function(table) {\n        if (isTRUE(table@output == \"typst\")) {\n          table@table_string &lt;- gsub(\n            \"\\\\$(.*?)\\\\$\",\n            \"#mitex(`\\\\1`)\",\n            table@table_string)\n        }\n        return(table)\n    }\n    x &lt;- style_tt(x, finalize = fn)\n    return(x)\n}",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#visual-themes",
    "href": "vignettes/theme.html#visual-themes",
    "title": "Themes",
    "section": "",
    "text": "To begin, let’s explore a few of the basic looks supplied by themes:\n\ntt(x, theme = \"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x) |&gt; theme_tt(\"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, theme = \"grid\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, theme = \"bootstrap\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#custom-themes",
    "href": "vignettes/theme.html#custom-themes",
    "title": "Themes",
    "section": "",
    "text": "Users can also define their own themes to apply consistent visual tweaks to tables. For example, this defines a themeing function and sets a global option to apply it to all tables consistently:1\n\ntheme_vincent &lt;- function(x, ...) {\n  out &lt;- x |&gt; \n    style_tt(color = \"teal\") |&gt;\n    theme_tt(\"default\")\n  out@caption &lt;- \"Always use the same caption.\"\n  out@width &lt;- .5\n  return(out)\n}\n\noptions(tinytable_tt_theme = theme_vincent)\n\ntt(mtcars[1:2, 1:2])\n\n\n\n    \n\n    \n    \n      \n        \n        Always use the same caption.\n              \n                mpg\n                cyl\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\ntt(mtcars[1:3, 1:3])\n\n\n\n    \n\n    \n    \n      \n        \n        Always use the same caption.\n              \n                mpg\n                cyl\n                disp\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                \n                \n                  21\n                  6\n                  160\n                \n                \n                  22.8\n                  4\n                  108\n                \n        \n      \n    \n\n\noptions(tinytable_tt_theme = NULL)\n\nHere is a slightly more complex example. The benefit of this approach is that we apply a function via the style_tt() function and its finalize argument, so we can leverage some of the object components that are only available at the printing stage:\n\ntheme_slides &lt;- function(x, ...) {\n  fn &lt;- function(table) {\n    if (isTRUE(table@output == \"typst\")) {\n      table@table_string &lt;- paste0(\"#figure([\\n\", table@table_string, \"\\n])\")\n    }\n    return(table)\n  }\n  x &lt;- style_tt(x, finalize = fn)\n  return(x)\n}\n\ntt(head(iris), theme = theme_slides)\n\nNote: the code above is not evaluated because it only applies to Typst output.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#tabular-latex-and-html",
    "href": "vignettes/theme.html#tabular-latex-and-html",
    "title": "Themes",
    "section": "",
    "text": "The tabular theme is designed to provide a more “raw” table, without a floating table environment in LaTeX, and without CSS or Javascript in HTML.\n\ntt(x) |&gt;\n  theme_tt(\"tabular\") |&gt;\n  print(\"latex\")\n\n\\begin{tabular}{lllll}\n\\hline\nmpg & cyl & disp & hp & drat \\\\ \\hline\n21 & 6 & 160 & 110 & 3.9 \\\\\n21 & 6 & 160 & 110 & 3.9 \\\\\n22.8 & 4 & 108 & 93 & 3.85 \\\\\n21.4 & 6 & 258 & 110 & 3.08 \\\\\n\\hline\n\\end{tabular}",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#resize",
    "href": "vignettes/theme.html#resize",
    "title": "Themes",
    "section": "",
    "text": "LaTeX only.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#placement",
    "href": "vignettes/theme.html#placement",
    "title": "Themes",
    "section": "",
    "text": "LaTeX only.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#rotate",
    "href": "vignettes/theme.html#rotate",
    "title": "Themes",
    "section": "",
    "text": "LaTeX only.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#multipage",
    "href": "vignettes/theme.html#multipage",
    "title": "Themes",
    "section": "",
    "text": "LaTeX only.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#user-written-themes",
    "href": "vignettes/theme.html#user-written-themes",
    "title": "Themes",
    "section": "",
    "text": "This section provides a few user-written themes that can be used to extend the functionality of tinytable. These themes are not included in the package by default, but they can be easily added to your workflow. If you would like your own custom theme to appear here, please open an issue on the tinytable GitHub repository or submit a pull request.\n\n\nThis theme was written by Kazuharu Yanagimoto. Thanks for your contribution!\nThe MiTeX project aims to bring LaTeX support to Typst documents. This theme replace every instance of matching pairs of dollars signs $..$ by a MiTeX function call: #mitex(...). This allows you to use LaTeX math in Typst documents.\nWarning: The substitution code is very simple and it may not work properly when there are unmatched $ symbols in the document.\ntheme_mitex &lt;- function(x, ...) {\n    fn &lt;- function(table) {\n        if (isTRUE(table@output == \"typst\")) {\n          table@table_string &lt;- gsub(\n            \"\\\\$(.*?)\\\\$\",\n            \"#mitex(`\\\\1`)\",\n            table@table_string)\n        }\n        return(table)\n    }\n    x &lt;- style_tt(x, finalize = fn)\n    return(x)\n}",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "vignettes/theme.html#footnotes",
    "href": "vignettes/theme.html#footnotes",
    "title": "Themes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote: Captions must be defined in Quarto chunks for Typst output, which explains why they are not displayed in the Typst version of this document.↩︎",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Themes"
    ]
  },
  {
    "objectID": "man/print.tinytable.html",
    "href": "man/print.tinytable.html",
    "title": "tinytable",
    "section": "",
    "text": "This function is called automatically by R whenever a tinytable object is anprinted to the console or in an HTML viewer pane.\n\n\n\n## S3 method for class 'tinytable'\nprint(x, output = get_option(\"tinytable_print_output\", default = NULL), ...)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\noutput\n\n\nformat in which a Tiny Table is printed: NULL or one of “latex”, “markdown”, “html”, “typst”, “dataframe”, “tabulator”. If NULL, the output is chosen based on these rules:\n\n\nWhen called from a script in non-interactive mode, the default is \"markdown\" (interactive() == FALSE).\n\n\nWhen called interactively in RStudio, the default is to display an HTML table in the viewer pane.\n\n\nWhen called interactively in another development environment, the default is \"markdown\".\n\n\nThe default print output can be changed for an entire R session by calling: options(tinytable_print_output = “html”)\n\n\nThe default print output can be changed for a single tinytable object by modifying the output S4 slot.\n\n\n\n\n\n\n…\n\n\nOther arguments are ignored.\n\n\n\n\n\n\nlaunch a browser window or cat() the table to console.",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`print`"
    ]
  },
  {
    "objectID": "man/print.tinytable.html#print-display-or-convert-a-tinytable-object",
    "href": "man/print.tinytable.html#print-display-or-convert-a-tinytable-object",
    "title": "tinytable",
    "section": "",
    "text": "This function is called automatically by R whenever a tinytable object is anprinted to the console or in an HTML viewer pane.\n\n\n\n## S3 method for class 'tinytable'\nprint(x, output = get_option(\"tinytable_print_output\", default = NULL), ...)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\noutput\n\n\nformat in which a Tiny Table is printed: NULL or one of “latex”, “markdown”, “html”, “typst”, “dataframe”, “tabulator”. If NULL, the output is chosen based on these rules:\n\n\nWhen called from a script in non-interactive mode, the default is \"markdown\" (interactive() == FALSE).\n\n\nWhen called interactively in RStudio, the default is to display an HTML table in the viewer pane.\n\n\nWhen called interactively in another development environment, the default is \"markdown\".\n\n\nThe default print output can be changed for an entire R session by calling: options(tinytable_print_output = “html”)\n\n\nThe default print output can be changed for a single tinytable object by modifying the output S4 slot.\n\n\n\n\n\n\n…\n\n\nOther arguments are ignored.\n\n\n\n\n\n\nlaunch a browser window or cat() the table to console.",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`print`"
    ]
  },
  {
    "objectID": "man/style_tt.html",
    "href": "man/style_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "Style a Tiny Table\n\n\n\nstyle_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  bold = FALSE,\n  italic = FALSE,\n  monospace = FALSE,\n  underline = FALSE,\n  strikeout = FALSE,\n  color = NULL,\n  background = NULL,\n  fontsize = NULL,\n  align = NULL,\n  alignv = NULL,\n  colspan = NULL,\n  rowspan = NULL,\n  indent = NULL,\n  line = NULL,\n  line_color = \"black\",\n  line_width = 0.1,\n  finalize = NULL,\n  tabularray_inner = NULL,\n  tabularray_outer = NULL,\n  bootstrap_class = NULL,\n  bootstrap_css = NULL,\n  bootstrap_css_rule = NULL,\n  output = NULL,\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA table object created by tt().\n\n\n\n\ni\n\n\nNumeric vector, logical matrix, or string.\n\n\nNumeric vector: Row indices where the styling should be applied. Can be a single value or a vector.\n\n\nLogical matrix: A matrix with the same number of rows and columns as x. i=0 is the header, and negative values are higher level headers. Row indices refer to rows after the insertion of row labels by group_tt(), when applicable.\n\n\nString: Table components \"caption\", \"colnames\", \"groupi\" (row group labels), \"~groupi\" (non-group rows), \"groupj\" (column group labels), \"notes\".\n\n\n\n\n\n\nj\n\n\nColumn indices where the styling should be applied. Can be:\n\n\nInteger vectors indicating column positions.\n\n\nCharacter vector indicating column names.\n\n\nA single string specifying a Perl-style regular expression used to match column names.\n\n\n\n\n\n\nbold\n\n\nLogical; if TRUE, text is styled in bold.\n\n\n\n\nitalic\n\n\nLogical; if TRUE, text is styled in italic.\n\n\n\n\nmonospace\n\n\nLogical; if TRUE, text is styled in monospace font.\n\n\n\n\nunderline\n\n\nLogical; if TRUE, text is underlined.\n\n\n\n\nstrikeout\n\n\nLogical; if TRUE, text has a strike through line.\n\n\n\n\ncolor\n\n\nText color. There are several ways to specify colors, depending on the output format.\n\n\nHTML:\n\n\nHex code composed of # and 6 characters, ex: #CC79A7.\n\n\nKeywords: black, silver, gray, white, maroon, red, purple, fuchsia, green, lime, olive, yellow, navy, blue, teal, aqua\n\n\n\n\nLaTeX:\n\n\nHex code composed of # and 6 characters, ex: \"#CC79A7\". See the section below for instructions to add in LaTeX preambles.\n\n\nKeywords: black, blue, brown, cyan, darkgray, gray, green, lightgray, lime, magenta, olive, orange, pink, purple, red, teal, violet, white, yellow.\n\n\nColor blending using xcolor, ex: white!80!blue, green!20!red’.\n\n\nColor names with luminance levels from the ninecolors package (ex: \"azure4\", \"magenta8\", \"teal2\", \"gray1\", \"olive3\").\n\n\n\n\n\n\n\n\nbackground\n\n\nBackground color. Specified as a color name or hexadecimal code. Can be NULL for default color.\n\n\n\n\nfontsize\n\n\nFont size in em units. Can be NULL for default size.\n\n\n\n\nalign\n\n\nA single character or a string with a number of characters equal to the number of columns in j. Valid characters include ‘c’ (center), ‘l’ (left), ‘r’ (right), ‘d’ (decimal). Decimal alignment is only available in LaTeX via the siunitx package. The width of columns is determined by the maximum number of digits to the left and to the right in all cells specified by i and j.\n\n\n\n\nalignv\n\n\nA single character specifying vertical alignment. Valid characters include ‘t’ (top), ‘m’ (middle), ‘b’ (bottom).\n\n\n\n\ncolspan\n\n\nNumber of columns a cell should span. i and j must be of length 1.\n\n\n\n\nrowspan\n\n\nNumber of rows a cell should span. i and j must be of length 1.\n\n\n\n\nindent\n\n\nText indentation in em units. Positive values only.\n\n\n\n\nline\n\n\nString determines if solid lines (rules or borders) should be drawn around the cell, row, or column.\n\n\n\"t\": top\n\n\n\"b\": bottom\n\n\n\"l\": left\n\n\n\"r\": right\n\n\nCan be combined such as: \"lbt\" to draw borders at the left, bottom, and top.\n\n\n\n\n\n\nline_color\n\n\nColor of the line. See the color argument for details.\n\n\n\n\nline_width\n\n\nWidth of the line in em units (default: 0.1).\n\n\n\n\nfinalize\n\n\nA function applied to the table object at the very end of table-building, for post-processing. For example, the function could use regular expressions to add LaTeX commands to the text version of the table hosted in x@table_string, or it could programmatically change the caption in x@caption.\n\n\n\n\ntabularray_inner\n\n\nA string that specifies the \"inner\" settings of a tabularray LaTeX table.\n\n\n\n\ntabularray_outer\n\n\nA string that specifies the \"outer\" settings of a tabularray LaTeX table.\n\n\n\n\nbootstrap_class\n\n\nString. Bootstrap table class such as “table”, “table table-dark” or “table table-dark table-hover”. See the bootstrap documentation.\n\n\n\n\nbootstrap_css\n\n\nCharacter vector. CSS style declarations to be applied to every cell defined by i and j (ex: “font-weight: bold”).\n\n\n\n\nbootstrap_css_rule\n\n\nString. Complete CSS rules (with curly braces, semicolon, etc.) that apply to the table class specified by the bootstrap_class argument.\n\n\n\n\noutput\n\n\nApply style only to the output format specified by this argument. NULL means that we apply to all formats.\n\n\n\n\n…\n\n\nextra arguments are ignored\n\n\n\n\n\n\nThis function applies styling to a table created by tt(). It allows customization of text style (bold, italic, monospace), text and background colors, font size, cell width, text alignment, column span, and indentation. The function also supports passing native instructions to LaTeX (tabularray) and HTML (bootstrap) formats.\n\n\n\nAn object of class tt representing the table.\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\n\nlibrary(\"tinytable\")\n\n\n\nif (knitr::is_html_output()) options(tinytable_print_output = \"html\")\n\nlibrary(tinytable)\n\ntt(mtcars[1:5, 1:6])\n\n# Alignment\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = 1:5, align = \"lcccr\")\n\n# Colors and styles\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(i = 2:3, background = \"black\", color = \"orange\", bold = TRUE)\n\n# column selection with `j``\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = 5:6, background = \"pink\")\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = \"drat|wt\", background = \"pink\")\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = c(\"drat\", \"wt\"), background = \"pink\")\n\ntt(mtcars[1:5, 1:6], theme = \"void\") |&gt;\n  style_tt(\n    i = 2, j = 2,\n    colspan = 3,\n    rowspan = 2,\n    align = \"c\",\n    alignv = \"m\",\n    color = \"white\",\n    background = \"black\",\n    bold = TRUE)\n\ntt(mtcars[1:5, 1:6], theme = \"void\") |&gt;\n  style_tt(\n    i = 0:3,\n    j = 1:3,\n    line = \"tblr\",\n    line_width = 0.4,\n    line_color = \"teal\")\n\ntt(mtcars[1:5, 1:6], theme = \"bootstrap\") |&gt;\n  style_tt(\n    i = c(2, 5),\n    j = 3,\n    strikeout = TRUE,\n    fontsize = 0.7)\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(bootstrap_class = \"table table-dark table-hover\")\n\n\ninner &lt;- \"\ncolumn{1-4}={halign=c},\nhlines = {fg=white},\nvlines = {fg=white},\ncell{1,6}{odd} = {bg=teal7},\ncell{1,6}{even} = {bg=green7},\ncell{2,4}{1,4} = {bg=red7},\ncell{3,5}{1,4} = {bg=purple7},\ncell{2}{2} = {r=4,c=2}{bg=azure7},\n\"\ntt(mtcars[1:5, 1:4], theme = \"void\") |&gt;\n  style_tt(tabularray_inner = inner)\n\n# Style group rows and non-group rows\ndat &lt;- data.frame(x = 1:6, y = letters[1:6])\ndat |&gt;\n  tt() |&gt;\n  group_tt(i = list(\"Group A\" = 3)) |&gt;\n  style_tt(i = \"groupi\", background = \"lightblue\") |&gt;\n  style_tt(i = \"~groupi\", background = \"lightgray\")",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`style_tt`"
    ]
  },
  {
    "objectID": "man/style_tt.html#style-a-tiny-table",
    "href": "man/style_tt.html#style-a-tiny-table",
    "title": "tinytable",
    "section": "",
    "text": "Style a Tiny Table\n\n\n\nstyle_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  bold = FALSE,\n  italic = FALSE,\n  monospace = FALSE,\n  underline = FALSE,\n  strikeout = FALSE,\n  color = NULL,\n  background = NULL,\n  fontsize = NULL,\n  align = NULL,\n  alignv = NULL,\n  colspan = NULL,\n  rowspan = NULL,\n  indent = NULL,\n  line = NULL,\n  line_color = \"black\",\n  line_width = 0.1,\n  finalize = NULL,\n  tabularray_inner = NULL,\n  tabularray_outer = NULL,\n  bootstrap_class = NULL,\n  bootstrap_css = NULL,\n  bootstrap_css_rule = NULL,\n  output = NULL,\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA table object created by tt().\n\n\n\n\ni\n\n\nNumeric vector, logical matrix, or string.\n\n\nNumeric vector: Row indices where the styling should be applied. Can be a single value or a vector.\n\n\nLogical matrix: A matrix with the same number of rows and columns as x. i=0 is the header, and negative values are higher level headers. Row indices refer to rows after the insertion of row labels by group_tt(), when applicable.\n\n\nString: Table components \"caption\", \"colnames\", \"groupi\" (row group labels), \"~groupi\" (non-group rows), \"groupj\" (column group labels), \"notes\".\n\n\n\n\n\n\nj\n\n\nColumn indices where the styling should be applied. Can be:\n\n\nInteger vectors indicating column positions.\n\n\nCharacter vector indicating column names.\n\n\nA single string specifying a Perl-style regular expression used to match column names.\n\n\n\n\n\n\nbold\n\n\nLogical; if TRUE, text is styled in bold.\n\n\n\n\nitalic\n\n\nLogical; if TRUE, text is styled in italic.\n\n\n\n\nmonospace\n\n\nLogical; if TRUE, text is styled in monospace font.\n\n\n\n\nunderline\n\n\nLogical; if TRUE, text is underlined.\n\n\n\n\nstrikeout\n\n\nLogical; if TRUE, text has a strike through line.\n\n\n\n\ncolor\n\n\nText color. There are several ways to specify colors, depending on the output format.\n\n\nHTML:\n\n\nHex code composed of # and 6 characters, ex: #CC79A7.\n\n\nKeywords: black, silver, gray, white, maroon, red, purple, fuchsia, green, lime, olive, yellow, navy, blue, teal, aqua\n\n\n\n\nLaTeX:\n\n\nHex code composed of # and 6 characters, ex: \"#CC79A7\". See the section below for instructions to add in LaTeX preambles.\n\n\nKeywords: black, blue, brown, cyan, darkgray, gray, green, lightgray, lime, magenta, olive, orange, pink, purple, red, teal, violet, white, yellow.\n\n\nColor blending using xcolor, ex: white!80!blue, green!20!red’.\n\n\nColor names with luminance levels from the ninecolors package (ex: \"azure4\", \"magenta8\", \"teal2\", \"gray1\", \"olive3\").\n\n\n\n\n\n\n\n\nbackground\n\n\nBackground color. Specified as a color name or hexadecimal code. Can be NULL for default color.\n\n\n\n\nfontsize\n\n\nFont size in em units. Can be NULL for default size.\n\n\n\n\nalign\n\n\nA single character or a string with a number of characters equal to the number of columns in j. Valid characters include ‘c’ (center), ‘l’ (left), ‘r’ (right), ‘d’ (decimal). Decimal alignment is only available in LaTeX via the siunitx package. The width of columns is determined by the maximum number of digits to the left and to the right in all cells specified by i and j.\n\n\n\n\nalignv\n\n\nA single character specifying vertical alignment. Valid characters include ‘t’ (top), ‘m’ (middle), ‘b’ (bottom).\n\n\n\n\ncolspan\n\n\nNumber of columns a cell should span. i and j must be of length 1.\n\n\n\n\nrowspan\n\n\nNumber of rows a cell should span. i and j must be of length 1.\n\n\n\n\nindent\n\n\nText indentation in em units. Positive values only.\n\n\n\n\nline\n\n\nString determines if solid lines (rules or borders) should be drawn around the cell, row, or column.\n\n\n\"t\": top\n\n\n\"b\": bottom\n\n\n\"l\": left\n\n\n\"r\": right\n\n\nCan be combined such as: \"lbt\" to draw borders at the left, bottom, and top.\n\n\n\n\n\n\nline_color\n\n\nColor of the line. See the color argument for details.\n\n\n\n\nline_width\n\n\nWidth of the line in em units (default: 0.1).\n\n\n\n\nfinalize\n\n\nA function applied to the table object at the very end of table-building, for post-processing. For example, the function could use regular expressions to add LaTeX commands to the text version of the table hosted in x@table_string, or it could programmatically change the caption in x@caption.\n\n\n\n\ntabularray_inner\n\n\nA string that specifies the \"inner\" settings of a tabularray LaTeX table.\n\n\n\n\ntabularray_outer\n\n\nA string that specifies the \"outer\" settings of a tabularray LaTeX table.\n\n\n\n\nbootstrap_class\n\n\nString. Bootstrap table class such as “table”, “table table-dark” or “table table-dark table-hover”. See the bootstrap documentation.\n\n\n\n\nbootstrap_css\n\n\nCharacter vector. CSS style declarations to be applied to every cell defined by i and j (ex: “font-weight: bold”).\n\n\n\n\nbootstrap_css_rule\n\n\nString. Complete CSS rules (with curly braces, semicolon, etc.) that apply to the table class specified by the bootstrap_class argument.\n\n\n\n\noutput\n\n\nApply style only to the output format specified by this argument. NULL means that we apply to all formats.\n\n\n\n\n…\n\n\nextra arguments are ignored\n\n\n\n\n\n\nThis function applies styling to a table created by tt(). It allows customization of text style (bold, italic, monospace), text and background colors, font size, cell width, text alignment, column span, and indentation. The function also supports passing native instructions to LaTeX (tabularray) and HTML (bootstrap) formats.\n\n\n\nAn object of class tt representing the table.\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\n\nlibrary(\"tinytable\")\n\n\n\nif (knitr::is_html_output()) options(tinytable_print_output = \"html\")\n\nlibrary(tinytable)\n\ntt(mtcars[1:5, 1:6])\n\n# Alignment\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = 1:5, align = \"lcccr\")\n\n# Colors and styles\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(i = 2:3, background = \"black\", color = \"orange\", bold = TRUE)\n\n# column selection with `j``\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = 5:6, background = \"pink\")\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = \"drat|wt\", background = \"pink\")\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(j = c(\"drat\", \"wt\"), background = \"pink\")\n\ntt(mtcars[1:5, 1:6], theme = \"void\") |&gt;\n  style_tt(\n    i = 2, j = 2,\n    colspan = 3,\n    rowspan = 2,\n    align = \"c\",\n    alignv = \"m\",\n    color = \"white\",\n    background = \"black\",\n    bold = TRUE)\n\ntt(mtcars[1:5, 1:6], theme = \"void\") |&gt;\n  style_tt(\n    i = 0:3,\n    j = 1:3,\n    line = \"tblr\",\n    line_width = 0.4,\n    line_color = \"teal\")\n\ntt(mtcars[1:5, 1:6], theme = \"bootstrap\") |&gt;\n  style_tt(\n    i = c(2, 5),\n    j = 3,\n    strikeout = TRUE,\n    fontsize = 0.7)\n\ntt(mtcars[1:5, 1:6]) |&gt;\n  style_tt(bootstrap_class = \"table table-dark table-hover\")\n\n\ninner &lt;- \"\ncolumn{1-4}={halign=c},\nhlines = {fg=white},\nvlines = {fg=white},\ncell{1,6}{odd} = {bg=teal7},\ncell{1,6}{even} = {bg=green7},\ncell{2,4}{1,4} = {bg=red7},\ncell{3,5}{1,4} = {bg=purple7},\ncell{2}{2} = {r=4,c=2}{bg=azure7},\n\"\ntt(mtcars[1:5, 1:4], theme = \"void\") |&gt;\n  style_tt(tabularray_inner = inner)\n\n# Style group rows and non-group rows\ndat &lt;- data.frame(x = 1:6, y = letters[1:6])\ndat |&gt;\n  tt() |&gt;\n  group_tt(i = list(\"Group A\" = 3)) |&gt;\n  style_tt(i = \"groupi\", background = \"lightblue\") |&gt;\n  style_tt(i = \"~groupi\", background = \"lightgray\")",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`style_tt`"
    ]
  },
  {
    "objectID": "man/theme_tt.html",
    "href": "man/theme_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "A theme is a function which applies a collection of transformations to a tinytable object. Whereas the other tinytable functions such as format_tt() and style_tt() aim to be output-agnostic, themes can be output-specific, only applying to LaTeX, HTML, or Typst, as needed.\nEach theme can have specific arguments, which are passed to the theme_tt() function. See the \"Arguments\" section below.\n\n\n\ntheme_tt(x, theme, ...)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object\n\n\n\n\ntheme\n\n\nString. Name of the theme to apply. One of:\n\n\n\"bootstrap\": Similar appearance to the default Bootstrap theme in HTML\n\n\n\"grid\": Vertical and horizontal rules around each cell.\n\n\n\"multipage\": Long tables continue on the next page (LaTeX only)\n\n\n\"placement\": Position of the table environment (LaTeX)\n\n\n\"revealjs\": Tables optimized for Reveal.js presentations with light/dark theme support\n\n\n\"rotate\": Rotate a LaTeX or Typst table.\n\n\n\"resize\": Scale a LaTeX tinytable to fit the width argument.\n\n\n\"striped\": Grey stripes on alternating rows\n\n\n\"tabular\": Remove table environment (LaTeX) or Javascript/CSS (HTML)\n\n\n\"tabulator\": Customize Tabulator.js tables Experimental\n\n\n\"void\": No rules\n\n\n\n\n\n\n…\n\n\nAdditional arguments passed the themeing function. See the \"Arguments\" section below for a list of supported arguments for each theme.\n\n\n\n\n\n\nA modified tinytable object\n\n\n\nrevealjs\n\n\ncss: String. \"light\" (default) or \"dark\" for light or dark theme colors.\n\n\noptions(“tinytable_theme_revealjs_css” = “dark”)\n\n\n\n\nfontsize: Numeric. Font size multiplier for table content.\n\n\noptions(“tinytable_theme_revealjs_fontsize” = 0.8)\n\n\n\n\nfontsize_caption: Numeric. Font size multiplier for table captions.\n\n\noptions(“tinytable_theme_revealjs_fontsize_caption” = 1)\n\n\n\n\nmultipage\n\n\nrowhead: Non-negative integer. The number of header rows to repeat on each page.\n\n\noptions(“tinytable_theme_multipage_rowhead” = 1L)\n\n\n\n\nrowfoot: Non-negative integer. The number of footer rows to repeat on each page.\n\n\noptions(“tinytable_theme_multipage_rowfoot” = 1L)\n\n\n\n\nplacement\n\n\nhorizontal (Typst only): \"l\", \"c\", or \"r\" to align the table horizontally in the page.\n\n\noptions(“tinytable_theme_placement_horizontal” = “l”)\n\n\n\n\nlatex_float: String to insert in square brackets after the LaTeX table environment, ex: \"H\", \"htbp\". The default value is controlled by a global option:\n\n\noptions(“tinytable_theme_placement_latex_float” = “H”)\n\n\n\n\nresize\n\n\nwidth: A numeric value between 0.01 and 1, representing the proportion of the line width to use\n\n\noptions(“tinytable_theme_resize_width” = 0.9)\n\n\n\n\ndirection: \"down\", \"up\", \"both\" A string indicating if the table should be scaled in one direction. For example, \"down\" will only resize the table if it exceeds \n\n\noptions(“tinytable_theme_resize_direction” = “down”)\n\n\n\n\nrotate\n\n\nangle: Angle of the rotation. For example, ’angle=90“ applies a half counter-clockwise turn.\n\n\nCaveats:\n\n\nLaTeX and Typst only.\n\n\nTypst: In Quarto documents, rotation does not work because Quarto takes over the figure environment.\n\n\nLaTeX: In Quarto documents, captions must be specified using the caption argument in tt() rather than via Quarto chunk options.\n\n\n\n\ntabular\n\n\nstyle:\n\n\n\"tabular\": Drop all LaTeX dependencies and floating environments, except \\begin{tabular}\n\n\n\"tabularray\": Drop all LaTeX dependencies and floating environments, except \\begin{tblr}\n\n\noptions(“tinytable_theme_tabular_style” = “tblr”)\n\n\n\n\ntabulator\n\n\nstylesheet: String. Tabulator CSS theme. One of: \"default\", \"simple\", \"midnight\", \"modern\", \"site\", \"site_dark\", \"bootstrap3\", \"bootstrap4\", \"bootstrap5\", \"semanticui\", \"bulma\", \"materialize\".\n\n\noptions(“tinytable_theme_tabulator_stylesheet” = “midnight”)\n\n\n\n\nlayout: String. Table layout algorithm. One of: \"fitDataTable\" (default), \"fitData\", \"fitDataFill\", \"fitDataStretch\", \"fitColumns\".\n\n\noptions(“tinytable_theme_tabulator_layout” = “fitColumns”)\n\n\n\n\npagination: Logical or numeric vector. If TRUE, enables pagination with automatic page sizes. If FALSE, disables pagination. If numeric vector, first element is page size, full vector provides page size options.\n\n\noptions(“tinytable_theme_tabulator_pagination” = c(25, 50, 100))\n\n\n\n\nsearch: Logical. Enable/disable search functionality across all columns.\n\n\noptions(“tinytable_theme_tabulator_search” = FALSE)\n\n\n\n\noptions: String or NULL. Custom Tabulator.js configuration options as JavaScript string. Overrides individual arguments when provided.\n\n\noptions(“tinytable_theme_tabulator_options” = “pagination: ‘local’, paginationSize: 50”)\n\n\n\n\ncss_rule: String or NULL. Custom CSS rules that must include $TINYTABLE_ID placeholder for table-specific scoping.\n\n\nExample: “$TINYTABLE_ID .tabulator-header { background: black; }”\n\n\n\n\ncolumns: String or NULL. Custom column definitions as JavaScript array string. Completely overrides default column configuration.\n\n\nExample: ‘[{“title”: “Name”, “field”: “name”, “formatter”: “link”}]’\n\n\n\n\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\n\nx &lt;- mtcars[1:4, 1:4]\n\n# equivalent calls\ntt(x, theme = \"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\ntt(x) |&gt; theme_tt(\"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\n# resize w/ argument\nx &lt;- cbind(mtcars[1:10, ], mtcars[1:10, ])\ntt(x) |&gt;\n  theme_tt(\"resize\", width = .9) |&gt;\n  print(\"latex\")\n\n\\begin{table}\n\\centering\n\\resizebox{\\ifdim\\width&gt;\\linewidth 0.9\\linewidth\\else\\width\\fi}{!}{\n\\begin{tblr}[         %% tabularray outer open\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nmpg & cyl & disp & hp & drat & wt & qsec & vs & am & gear & carb & mpg & cyl & disp & hp & drat & wt & qsec & vs & am & gear & carb \\\\ \\midrule %% TinyTableHeader\n21.0 & 6 & 160.0 & 110 & 3.90 & 2.620 & 16.46 & 0 & 1 & 4 & 4 & 21.0 & 6 & 160.0 & 110 & 3.90 & 2.620 & 16.46 & 0 & 1 & 4 & 4 \\\\\n21.0 & 6 & 160.0 & 110 & 3.90 & 2.875 & 17.02 & 0 & 1 & 4 & 4 & 21.0 & 6 & 160.0 & 110 & 3.90 & 2.875 & 17.02 & 0 & 1 & 4 & 4 \\\\\n22.8 & 4 & 108.0 & 93 & 3.85 & 2.320 & 18.61 & 1 & 1 & 4 & 1 & 22.8 & 4 & 108.0 & 93 & 3.85 & 2.320 & 18.61 & 1 & 1 & 4 & 1 \\\\\n21.4 & 6 & 258.0 & 110 & 3.08 & 3.215 & 19.44 & 1 & 0 & 3 & 1 & 21.4 & 6 & 258.0 & 110 & 3.08 & 3.215 & 19.44 & 1 & 0 & 3 & 1 \\\\\n18.7 & 8 & 360.0 & 175 & 3.15 & 3.440 & 17.02 & 0 & 0 & 3 & 2 & 18.7 & 8 & 360.0 & 175 & 3.15 & 3.440 & 17.02 & 0 & 0 & 3 & 2 \\\\\n18.1 & 6 & 225.0 & 105 & 2.76 & 3.460 & 20.22 & 1 & 0 & 3 & 1 & 18.1 & 6 & 225.0 & 105 & 2.76 & 3.460 & 20.22 & 1 & 0 & 3 & 1 \\\\\n14.3 & 8 & 360.0 & 245 & 3.21 & 3.570 & 15.84 & 0 & 0 & 3 & 4 & 14.3 & 8 & 360.0 & 245 & 3.21 & 3.570 & 15.84 & 0 & 0 & 3 & 4 \\\\\n24.4 & 4 & 146.7 & 62 & 3.69 & 3.190 & 20.00 & 1 & 0 & 4 & 2 & 24.4 & 4 & 146.7 & 62 & 3.69 & 3.190 & 20.00 & 1 & 0 & 4 & 2 \\\\\n22.8 & 4 & 140.8 & 95 & 3.92 & 3.150 & 22.90 & 1 & 0 & 4 & 2 & 22.8 & 4 & 140.8 & 95 & 3.92 & 3.150 & 22.90 & 1 & 0 & 4 & 2 \\\\\n19.2 & 6 & 167.6 & 123 & 3.92 & 3.440 & 18.30 & 1 & 0 & 4 & 4 & 19.2 & 6 & 167.6 & 123 & 3.92 & 3.440 & 18.30 & 1 & 0 & 4 & 4 \\\\\n\\bottomrule\n\\end{tblr}\n}\n\\end{table}",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`theme_tt`"
    ]
  },
  {
    "objectID": "man/theme_tt.html#themes-for-tinytable",
    "href": "man/theme_tt.html#themes-for-tinytable",
    "title": "tinytable",
    "section": "",
    "text": "A theme is a function which applies a collection of transformations to a tinytable object. Whereas the other tinytable functions such as format_tt() and style_tt() aim to be output-agnostic, themes can be output-specific, only applying to LaTeX, HTML, or Typst, as needed.\nEach theme can have specific arguments, which are passed to the theme_tt() function. See the \"Arguments\" section below.\n\n\n\ntheme_tt(x, theme, ...)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object\n\n\n\n\ntheme\n\n\nString. Name of the theme to apply. One of:\n\n\n\"bootstrap\": Similar appearance to the default Bootstrap theme in HTML\n\n\n\"grid\": Vertical and horizontal rules around each cell.\n\n\n\"multipage\": Long tables continue on the next page (LaTeX only)\n\n\n\"placement\": Position of the table environment (LaTeX)\n\n\n\"revealjs\": Tables optimized for Reveal.js presentations with light/dark theme support\n\n\n\"rotate\": Rotate a LaTeX or Typst table.\n\n\n\"resize\": Scale a LaTeX tinytable to fit the width argument.\n\n\n\"striped\": Grey stripes on alternating rows\n\n\n\"tabular\": Remove table environment (LaTeX) or Javascript/CSS (HTML)\n\n\n\"tabulator\": Customize Tabulator.js tables Experimental\n\n\n\"void\": No rules\n\n\n\n\n\n\n…\n\n\nAdditional arguments passed the themeing function. See the \"Arguments\" section below for a list of supported arguments for each theme.\n\n\n\n\n\n\nA modified tinytable object\n\n\n\nrevealjs\n\n\ncss: String. \"light\" (default) or \"dark\" for light or dark theme colors.\n\n\noptions(“tinytable_theme_revealjs_css” = “dark”)\n\n\n\n\nfontsize: Numeric. Font size multiplier for table content.\n\n\noptions(“tinytable_theme_revealjs_fontsize” = 0.8)\n\n\n\n\nfontsize_caption: Numeric. Font size multiplier for table captions.\n\n\noptions(“tinytable_theme_revealjs_fontsize_caption” = 1)\n\n\n\n\nmultipage\n\n\nrowhead: Non-negative integer. The number of header rows to repeat on each page.\n\n\noptions(“tinytable_theme_multipage_rowhead” = 1L)\n\n\n\n\nrowfoot: Non-negative integer. The number of footer rows to repeat on each page.\n\n\noptions(“tinytable_theme_multipage_rowfoot” = 1L)\n\n\n\n\nplacement\n\n\nhorizontal (Typst only): \"l\", \"c\", or \"r\" to align the table horizontally in the page.\n\n\noptions(“tinytable_theme_placement_horizontal” = “l”)\n\n\n\n\nlatex_float: String to insert in square brackets after the LaTeX table environment, ex: \"H\", \"htbp\". The default value is controlled by a global option:\n\n\noptions(“tinytable_theme_placement_latex_float” = “H”)\n\n\n\n\nresize\n\n\nwidth: A numeric value between 0.01 and 1, representing the proportion of the line width to use\n\n\noptions(“tinytable_theme_resize_width” = 0.9)\n\n\n\n\ndirection: \"down\", \"up\", \"both\" A string indicating if the table should be scaled in one direction. For example, \"down\" will only resize the table if it exceeds \n\n\noptions(“tinytable_theme_resize_direction” = “down”)\n\n\n\n\nrotate\n\n\nangle: Angle of the rotation. For example, ’angle=90“ applies a half counter-clockwise turn.\n\n\nCaveats:\n\n\nLaTeX and Typst only.\n\n\nTypst: In Quarto documents, rotation does not work because Quarto takes over the figure environment.\n\n\nLaTeX: In Quarto documents, captions must be specified using the caption argument in tt() rather than via Quarto chunk options.\n\n\n\n\ntabular\n\n\nstyle:\n\n\n\"tabular\": Drop all LaTeX dependencies and floating environments, except \\begin{tabular}\n\n\n\"tabularray\": Drop all LaTeX dependencies and floating environments, except \\begin{tblr}\n\n\noptions(“tinytable_theme_tabular_style” = “tblr”)\n\n\n\n\ntabulator\n\n\nstylesheet: String. Tabulator CSS theme. One of: \"default\", \"simple\", \"midnight\", \"modern\", \"site\", \"site_dark\", \"bootstrap3\", \"bootstrap4\", \"bootstrap5\", \"semanticui\", \"bulma\", \"materialize\".\n\n\noptions(“tinytable_theme_tabulator_stylesheet” = “midnight”)\n\n\n\n\nlayout: String. Table layout algorithm. One of: \"fitDataTable\" (default), \"fitData\", \"fitDataFill\", \"fitDataStretch\", \"fitColumns\".\n\n\noptions(“tinytable_theme_tabulator_layout” = “fitColumns”)\n\n\n\n\npagination: Logical or numeric vector. If TRUE, enables pagination with automatic page sizes. If FALSE, disables pagination. If numeric vector, first element is page size, full vector provides page size options.\n\n\noptions(“tinytable_theme_tabulator_pagination” = c(25, 50, 100))\n\n\n\n\nsearch: Logical. Enable/disable search functionality across all columns.\n\n\noptions(“tinytable_theme_tabulator_search” = FALSE)\n\n\n\n\noptions: String or NULL. Custom Tabulator.js configuration options as JavaScript string. Overrides individual arguments when provided.\n\n\noptions(“tinytable_theme_tabulator_options” = “pagination: ‘local’, paginationSize: 50”)\n\n\n\n\ncss_rule: String or NULL. Custom CSS rules that must include $TINYTABLE_ID placeholder for table-specific scoping.\n\n\nExample: “$TINYTABLE_ID .tabulator-header { background: black; }”\n\n\n\n\ncolumns: String or NULL. Custom column definitions as JavaScript array string. Completely overrides default column configuration.\n\n\nExample: ‘[{“title”: “Name”, “field”: “name”, “formatter”: “link”}]’\n\n\n\n\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\n\nx &lt;- mtcars[1:4, 1:4]\n\n# equivalent calls\ntt(x, theme = \"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\ntt(x) |&gt; theme_tt(\"striped\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\n# resize w/ argument\nx &lt;- cbind(mtcars[1:10, ], mtcars[1:10, ])\ntt(x) |&gt;\n  theme_tt(\"resize\", width = .9) |&gt;\n  print(\"latex\")\n\n\\begin{table}\n\\centering\n\\resizebox{\\ifdim\\width&gt;\\linewidth 0.9\\linewidth\\else\\width\\fi}{!}{\n\\begin{tblr}[         %% tabularray outer open\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nmpg & cyl & disp & hp & drat & wt & qsec & vs & am & gear & carb & mpg & cyl & disp & hp & drat & wt & qsec & vs & am & gear & carb \\\\ \\midrule %% TinyTableHeader\n21.0 & 6 & 160.0 & 110 & 3.90 & 2.620 & 16.46 & 0 & 1 & 4 & 4 & 21.0 & 6 & 160.0 & 110 & 3.90 & 2.620 & 16.46 & 0 & 1 & 4 & 4 \\\\\n21.0 & 6 & 160.0 & 110 & 3.90 & 2.875 & 17.02 & 0 & 1 & 4 & 4 & 21.0 & 6 & 160.0 & 110 & 3.90 & 2.875 & 17.02 & 0 & 1 & 4 & 4 \\\\\n22.8 & 4 & 108.0 & 93 & 3.85 & 2.320 & 18.61 & 1 & 1 & 4 & 1 & 22.8 & 4 & 108.0 & 93 & 3.85 & 2.320 & 18.61 & 1 & 1 & 4 & 1 \\\\\n21.4 & 6 & 258.0 & 110 & 3.08 & 3.215 & 19.44 & 1 & 0 & 3 & 1 & 21.4 & 6 & 258.0 & 110 & 3.08 & 3.215 & 19.44 & 1 & 0 & 3 & 1 \\\\\n18.7 & 8 & 360.0 & 175 & 3.15 & 3.440 & 17.02 & 0 & 0 & 3 & 2 & 18.7 & 8 & 360.0 & 175 & 3.15 & 3.440 & 17.02 & 0 & 0 & 3 & 2 \\\\\n18.1 & 6 & 225.0 & 105 & 2.76 & 3.460 & 20.22 & 1 & 0 & 3 & 1 & 18.1 & 6 & 225.0 & 105 & 2.76 & 3.460 & 20.22 & 1 & 0 & 3 & 1 \\\\\n14.3 & 8 & 360.0 & 245 & 3.21 & 3.570 & 15.84 & 0 & 0 & 3 & 4 & 14.3 & 8 & 360.0 & 245 & 3.21 & 3.570 & 15.84 & 0 & 0 & 3 & 4 \\\\\n24.4 & 4 & 146.7 & 62 & 3.69 & 3.190 & 20.00 & 1 & 0 & 4 & 2 & 24.4 & 4 & 146.7 & 62 & 3.69 & 3.190 & 20.00 & 1 & 0 & 4 & 2 \\\\\n22.8 & 4 & 140.8 & 95 & 3.92 & 3.150 & 22.90 & 1 & 0 & 4 & 2 & 22.8 & 4 & 140.8 & 95 & 3.92 & 3.150 & 22.90 & 1 & 0 & 4 & 2 \\\\\n19.2 & 6 & 167.6 & 123 & 3.92 & 3.440 & 18.30 & 1 & 0 & 4 & 4 & 19.2 & 6 & 167.6 & 123 & 3.92 & 3.440 & 18.30 & 1 & 0 & 4 & 4 \\\\\n\\bottomrule\n\\end{tblr}\n}\n\\end{table}",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`theme_tt`"
    ]
  },
  {
    "objectID": "man/group_tt.html",
    "href": "man/group_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "Spanning labels to identify groups of rows or columns\n\n\n\ngroup_tt(\n  x,\n  i = getOption(\"tinytable_group_i\", default = NULL),\n  j = getOption(\"tinytable_group_j\", default = NULL),\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\ni\n\n\nCharacter vector, named list, or integer vector\n\n\nA character vector of labels with length equal to the number of rows in x\n\n\nA named list of row indices to group. The names of the list will be used as labels. The indices represent the position where labels should be inserted in the original table. For example,\n\n\ni=list(“Hello”=5): insert the \"Hello\" label after the 4th row in the original table.\n\n\ni=list(“Hello”=2, “World”=2): insert the two labels consecutively after the 1st row in the original table.\n\n\ni=list(“Foo Bar”=0): insert the label in the first row after the header.\n\n\n\n\nVector of positive integers: For matrix insertion: i specifies row positions and j must be a character matrix to insert in the table (see below for details).\n\n\n\n\n\n\nj\n\n\nString, named list, or character matrix\n\n\nNamed list of column indices to group, ex: j=list(“A”=1:2,“B”=3:6). The names of the list will be used as labels. See below for more examples. Note: empty labels must be a space: \" \".\n\n\nA single string when column names include the group name as a prefix, ex: group1_column1, group1_column2, etc.\n\n\nCharacter matrix for inserting rows at positions specified by i. The matrix must have the same number of columns as the table, or be a single column with a number of elements that is a multiple of the table’s column count (which will be automatically reshaped). Each row of the matrix matches an element\n\n\n\n\n\n\n…\n\n\nOther arguments are ignored.\n\n\n\n\n\n\nWarning: The style_tt() can normally be used to style the group headers, as expected, but that feature is not available for Markdown and Word tables.\n\n\n\nAn object of class tt representing the table.\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\n\nlibrary(\"tinytable\")\n\n\n# vector of row labels\ndat &lt;- data.frame(\n  label = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"a\", \"a\"),\n  x1 = rnorm(8),\n  x2 = rnorm(8)\n)\ntt(dat[, 2:3]) |&gt; group_tt(i = dat$label)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x1\n                x2\n              \n        \n        \n        \n                \n                  a\n                  \n                \n                \n                  1.6719976\n                  -0.73199127\n                \n                \n                  1.3359471\n                  -0.08225493\n                \n                \n                  1.4530373\n                  -1.76366667\n                \n                \n                  b\n                  \n                \n                \n                  -0.7411312\n                  0.49205283\n                \n                \n                  1.8435174\n                  -1.78548918\n                \n                \n                  c\n                  \n                \n                \n                  0.5618093\n                  -2.50361475\n                \n                \n                  a\n                  \n                \n                \n                  0.4673179\n                  0.60138111\n                \n                \n                  1.5890177\n                  0.76942410\n                \n        \n      \n    \n\n\n# named lists of labels\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nFoo\nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                \n                \n                  Hello\n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                \n                \n                  World\n                  \n                  \n                  \n                  \n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                \n                \n                  19.2\n                  6\n                  167.6\n                  123\n                  3.92\n                \n        \n      \n    \n\n\ndat &lt;- mtcars[1:9, 1:8]\ntt(dat) |&gt;\n  group_tt(i = list(\n    \"I like (fake) hamburgers\" = 3,\n    \"She prefers halloumi\" = 4,\n    \"They love tofu\" = 7\n  ))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.620\n                  16.46\n                  0\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.875\n                  17.02\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                  2.320\n                  18.61\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                  3.215\n                  19.44\n                  1\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                  3.440\n                  17.02\n                  0\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                  3.460\n                  20.22\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                  3.570\n                  15.84\n                  0\n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                  3.190\n                  20.00\n                  1\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                  3.150\n                  22.90\n                  1\n                \n        \n      \n    \n\n\ntt(dat) |&gt;\n  group_tt(\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7\n    )\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.620\n                  16.46\n                  0\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.875\n                  17.02\n                  0\n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                  2.320\n                  18.61\n                  1\n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                  3.215\n                  19.44\n                  1\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                  3.440\n                  17.02\n                  0\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                  3.460\n                  20.22\n                  1\n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                  3.570\n                  15.84\n                  0\n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                  3.190\n                  20.00\n                  1\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                  3.150\n                  22.90\n                  1\n                \n        \n      \n    \n\n\nx &lt;- mtcars[1:5, 1:6]\ntt(x) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 3:4, \"Hello\" = 5:6)) |&gt;\n  group_tt(j = list(\"Foo\" = 1:3, \"Bar\" = 4:6))\n\n\n\n    \n\n    \n    \n      \n        \n\nFoo\nBar\n\n\n \n \nWorld\nHello\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.620\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.875\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.320\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.215\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.440\n                \n        \n      \n    \n\n\n# column names with delimiters\ndat &lt;- data.frame(\n  A_id = 1,\n  A_a1 = 2,\n  A_a2 = \"3\",\n  B_b1 = 4,\n  B_b2 = 5,\n  B_C = 6\n)\ntt(dat) |&gt; group_tt(j = \"_\")\n\n\n\n    \n\n    \n    \n      \n        \n\nA\nB\n\n        \n              \n                id\n                a1\n                a2\n                b1\n                b2\n                C\n              \n        \n        \n        \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                  6\n                \n        \n      \n    \n\n\n# matrix insertion\nrowmat &lt;- matrix(colnames(iris))\ntt(head(iris, 7)) |&gt;\n  group_tt(i = c(2, 5), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  4.9\n                  3.0\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  5.0\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\nrowmat &lt;- matrix(c(\n  \"a\", \"b\", \"c\", \"d\", \"e\",\n  1, 2, 3, 4, 5))\ntt(head(iris, 7)) |&gt;\n  group_tt(i = 2, j = rowmat) |&gt;\n  style_tt(i = \"groupi\", background = \"pink\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  a\n                  b\n                  c\n                  d\n                  e\n                \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                \n                \n                  4.9\n                  3.0\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5.0\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`group_tt`"
    ]
  },
  {
    "objectID": "man/group_tt.html#spanning-labels-to-identify-groups-of-rows-or-columns",
    "href": "man/group_tt.html#spanning-labels-to-identify-groups-of-rows-or-columns",
    "title": "tinytable",
    "section": "",
    "text": "Spanning labels to identify groups of rows or columns\n\n\n\ngroup_tt(\n  x,\n  i = getOption(\"tinytable_group_i\", default = NULL),\n  j = getOption(\"tinytable_group_j\", default = NULL),\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\ni\n\n\nCharacter vector, named list, or integer vector\n\n\nA character vector of labels with length equal to the number of rows in x\n\n\nA named list of row indices to group. The names of the list will be used as labels. The indices represent the position where labels should be inserted in the original table. For example,\n\n\ni=list(“Hello”=5): insert the \"Hello\" label after the 4th row in the original table.\n\n\ni=list(“Hello”=2, “World”=2): insert the two labels consecutively after the 1st row in the original table.\n\n\ni=list(“Foo Bar”=0): insert the label in the first row after the header.\n\n\n\n\nVector of positive integers: For matrix insertion: i specifies row positions and j must be a character matrix to insert in the table (see below for details).\n\n\n\n\n\n\nj\n\n\nString, named list, or character matrix\n\n\nNamed list of column indices to group, ex: j=list(“A”=1:2,“B”=3:6). The names of the list will be used as labels. See below for more examples. Note: empty labels must be a space: \" \".\n\n\nA single string when column names include the group name as a prefix, ex: group1_column1, group1_column2, etc.\n\n\nCharacter matrix for inserting rows at positions specified by i. The matrix must have the same number of columns as the table, or be a single column with a number of elements that is a multiple of the table’s column count (which will be automatically reshaped). Each row of the matrix matches an element\n\n\n\n\n\n\n…\n\n\nOther arguments are ignored.\n\n\n\n\n\n\nWarning: The style_tt() can normally be used to style the group headers, as expected, but that feature is not available for Markdown and Word tables.\n\n\n\nAn object of class tt representing the table.\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\n\nlibrary(\"tinytable\")\n\n\n# vector of row labels\ndat &lt;- data.frame(\n  label = c(\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"a\", \"a\"),\n  x1 = rnorm(8),\n  x2 = rnorm(8)\n)\ntt(dat[, 2:3]) |&gt; group_tt(i = dat$label)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x1\n                x2\n              \n        \n        \n        \n                \n                  a\n                  \n                \n                \n                  1.6719976\n                  -0.73199127\n                \n                \n                  1.3359471\n                  -0.08225493\n                \n                \n                  1.4530373\n                  -1.76366667\n                \n                \n                  b\n                  \n                \n                \n                  -0.7411312\n                  0.49205283\n                \n                \n                  1.8435174\n                  -1.78548918\n                \n                \n                  c\n                  \n                \n                \n                  0.5618093\n                  -2.50361475\n                \n                \n                  a\n                  \n                \n                \n                  0.4673179\n                  0.60138111\n                \n                \n                  1.5890177\n                  0.76942410\n                \n        \n      \n    \n\n\n# named lists of labels\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\n \nFoo\nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                \n                \n                  Hello\n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                \n                \n                  World\n                  \n                  \n                  \n                  \n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                \n                \n                  19.2\n                  6\n                  167.6\n                  123\n                  3.92\n                \n        \n      \n    \n\n\ndat &lt;- mtcars[1:9, 1:8]\ntt(dat) |&gt;\n  group_tt(i = list(\n    \"I like (fake) hamburgers\" = 3,\n    \"She prefers halloumi\" = 4,\n    \"They love tofu\" = 7\n  ))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.620\n                  16.46\n                  0\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.875\n                  17.02\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                  2.320\n                  18.61\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                  3.215\n                  19.44\n                  1\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                  3.440\n                  17.02\n                  0\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                  3.460\n                  20.22\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                  3.570\n                  15.84\n                  0\n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                  3.190\n                  20.00\n                  1\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                  3.150\n                  22.90\n                  1\n                \n        \n      \n    \n\n\ntt(dat) |&gt;\n  group_tt(\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7\n    )\n  )\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.620\n                  16.46\n                  0\n                \n                \n                  21.0\n                  6\n                  160.0\n                  110\n                  3.90\n                  2.875\n                  17.02\n                  0\n                \n                \n                  22.8\n                  4\n                  108.0\n                  93\n                  3.85\n                  2.320\n                  18.61\n                  1\n                \n                \n                  21.4\n                  6\n                  258.0\n                  110\n                  3.08\n                  3.215\n                  19.44\n                  1\n                \n                \n                  18.7\n                  8\n                  360.0\n                  175\n                  3.15\n                  3.440\n                  17.02\n                  0\n                \n                \n                  18.1\n                  6\n                  225.0\n                  105\n                  2.76\n                  3.460\n                  20.22\n                  1\n                \n                \n                  14.3\n                  8\n                  360.0\n                  245\n                  3.21\n                  3.570\n                  15.84\n                  0\n                \n                \n                  24.4\n                  4\n                  146.7\n                  62\n                  3.69\n                  3.190\n                  20.00\n                  1\n                \n                \n                  22.8\n                  4\n                  140.8\n                  95\n                  3.92\n                  3.150\n                  22.90\n                  1\n                \n        \n      \n    \n\n\nx &lt;- mtcars[1:5, 1:6]\ntt(x) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 3:4, \"Hello\" = 5:6)) |&gt;\n  group_tt(j = list(\"Foo\" = 1:3, \"Bar\" = 4:6))\n\n\n\n    \n\n    \n    \n      \n        \n\nFoo\nBar\n\n\n \n \nWorld\nHello\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.620\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.875\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.320\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.215\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.440\n                \n        \n      \n    \n\n\n# column names with delimiters\ndat &lt;- data.frame(\n  A_id = 1,\n  A_a1 = 2,\n  A_a2 = \"3\",\n  B_b1 = 4,\n  B_b2 = 5,\n  B_C = 6\n)\ntt(dat) |&gt; group_tt(j = \"_\")\n\n\n\n    \n\n    \n    \n      \n        \n\nA\nB\n\n        \n              \n                id\n                a1\n                a2\n                b1\n                b2\n                C\n              \n        \n        \n        \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                  6\n                \n        \n      \n    \n\n\n# matrix insertion\nrowmat &lt;- matrix(colnames(iris))\ntt(head(iris, 7)) |&gt;\n  group_tt(i = c(2, 5), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  4.9\n                  3.0\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  5.0\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\nrowmat &lt;- matrix(c(\n  \"a\", \"b\", \"c\", \"d\", \"e\",\n  1, 2, 3, 4, 5))\ntt(head(iris, 7)) |&gt;\n  group_tt(i = 2, j = rowmat) |&gt;\n  style_tt(i = \"groupi\", background = \"pink\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  a\n                  b\n                  c\n                  d\n                  e\n                \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                \n                \n                  4.9\n                  3.0\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5.0\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`group_tt`"
    ]
  },
  {
    "objectID": "man/format_tabulator_column.html",
    "href": "man/format_tabulator_column.html",
    "title": "tinytable",
    "section": "",
    "text": "This function generates Tabulator.js column formatter configurations based on the data type of a column and the same formatting arguments as format_tt(). It inspects the data class of column j in x@data and returns appropriate formatter and formatterParams objects for Tabulator.js.\n\n\n\nformat_tabulator_column(\n  x,\n  j,\n  digits = get_option(\"tinytable_format_digits\", default = NULL),\n  num_fmt = get_option(\"tinytable_format_num_fmt\", default = \"significant\"),\n  num_zero = get_option(\"tinytable_format_num_zero\", default = FALSE),\n  num_suffix = get_option(\"tinytable_format_num_suffix\", default = FALSE),\n  num_mark_big = get_option(\"tinytable_format_num_mark_big\", default = \"\"),\n  num_mark_dec = get_option(\"tinytable_format_num_mark_dec\", default =\n    getOption(\"OutDec\", default = \".\")),\n  date = get_option(\"tinytable_format_date\", default = NULL),\n  bool = get_option(\"tinytable_format_bool\", default = NULL),\n  math = get_option(\"tinytable_format_math\", default = FALSE),\n  other = get_option(\"tinytable_format_other\", default = NULL),\n  replace = get_option(\"tinytable_format_replace\", default = FALSE),\n  escape = get_option(\"tinytable_format_escape\", default = FALSE),\n  markdown = get_option(\"tinytable_format_markdown\", default = FALSE),\n  quarto = get_option(\"tinytable_format_quarto\", default = FALSE),\n  fn = get_option(\"tinytable_format_fn\", default = NULL),\n  sprintf = get_option(\"tinytable_format_sprintf\", default = NULL)\n)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object created by tt().\n\n\n\n\nj\n\n\nColumn index or name to format. Must be a single column.\n\n\n\n\ndigits\n\n\nNumber of significant digits or decimal places.\n\n\n\n\nnum_fmt\n\n\nThe format for numeric values; one of ‘significant’, ‘significant_cell’, ‘decimal’, or ‘scientific’.\n\n\n\n\nnum_zero\n\n\nLogical; if TRUE, trailing zeros are kept in \"decimal\" format (but not in \"significant\" format).\n\n\n\n\nnum_suffix\n\n\nLogical; if TRUE display short numbers with digits significant digits and K (thousands), M (millions), B (billions), or T (trillions) suffixes.\n\n\n\n\nnum_mark_big\n\n\nCharacter to use as a thousands separator.\n\n\n\n\nnum_mark_dec\n\n\nDecimal mark character. Default is the global option ‘OutDec’.\n\n\n\n\ndate\n\n\nA string passed to the format() function, such as \"%Y-%m-%d\". Exception: for tabulator output, this is used directly as the Tabulator.js date format string (e.g., \"MM/DD/YYYY\"). Note: R and Tabulator.js use different date format specifications.\n\n\n\n\nbool\n\n\nA function to format logical columns. Defaults to title case.\n\n\n\n\nmath\n\n\nLogical. If TRUE, wrap cell values in math mode $..$. This is useful for LaTeX output or with HTML MathJax options(tinytable_html_mathjax=TRUE).\n\n\n\n\nother\n\n\nA function to format columns of other types. Defaults to as.character().\n\n\n\n\nreplace\n\n\nLogical, String or Named list of vectors\n\n\nTRUE: Replace NA and NaN by an empty string.\n\n\nFALSE: Print NA and NaN as strings.\n\n\nString: Replace NA and NaN entries by the user-supplied string.\n\n\nNamed list: Replace matching elements of the vectors in the list by theirs names. Example:\n\n\nlist(“-” = c(NA, NaN), “Tiny” = -Inf, “Massive” = Inf)\n\n\n\n\n\n\n\n\nescape\n\n\nLogical or \"latex\" or \"html\". If TRUE, escape special characters to display them as text in the format of the output of a tt() table.\n\n\nIf i and j are both NULL, escape all cells, column names, caption, notes, and spanning labels created by group_tt().\n\n\n\n\n\n\nmarkdown\n\n\nLogical; if TRUE, render markdown syntax in cells. Ex: italicized text is properly italicized in HTML and LaTeX.\n\n\n\n\nquarto\n\n\nLogical. Enable Quarto data processing and wrap cell content in a data-qmd span (HTML) or  macro (LaTeX). See warnings in the Global Options section below.\n\n\n\n\nfn\n\n\nFunction for custom formatting. Accepts a vector and returns a character vector of the same length.\n\n\n\n\nsprintf\n\n\nString passed to the ?sprintf function to format numbers or interpolate strings with a user-defined pattern (similar to the glue package, but using Base R).\n\n\n\n\n\n\nA character string containing complete JavaScript column definition for Tabulator.js including title, field, formatter, and formatterParams\n\n\n\n\nlibrary(\"tinytable\")\n\ndat &lt;- data.frame(\n  price = c(12.34, 56.78, 90.12),\n  count = c(1L, 2L, 3L),\n  active = c(TRUE, FALSE, TRUE),\n  date = as.Date(c(\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"))\n)\nx &lt;- tt(dat, output = \"tabulator\")\n\n# Format numeric column with 3 decimal places\nformat_tabulator_column(x, j = \"price\", digits = 3)\n\n# Format integer column as money\nformat_tabulator_column(x, j = \"count\", num_mark_big = \",\")\n\n# Format date column\nformat_tabulator_column(x, j = \"date\", date = \"%m/%d/%Y\")"
  },
  {
    "objectID": "man/format_tabulator_column.html#format-tabulator-column-based-on-data-type",
    "href": "man/format_tabulator_column.html#format-tabulator-column-based-on-data-type",
    "title": "tinytable",
    "section": "",
    "text": "This function generates Tabulator.js column formatter configurations based on the data type of a column and the same formatting arguments as format_tt(). It inspects the data class of column j in x@data and returns appropriate formatter and formatterParams objects for Tabulator.js.\n\n\n\nformat_tabulator_column(\n  x,\n  j,\n  digits = get_option(\"tinytable_format_digits\", default = NULL),\n  num_fmt = get_option(\"tinytable_format_num_fmt\", default = \"significant\"),\n  num_zero = get_option(\"tinytable_format_num_zero\", default = FALSE),\n  num_suffix = get_option(\"tinytable_format_num_suffix\", default = FALSE),\n  num_mark_big = get_option(\"tinytable_format_num_mark_big\", default = \"\"),\n  num_mark_dec = get_option(\"tinytable_format_num_mark_dec\", default =\n    getOption(\"OutDec\", default = \".\")),\n  date = get_option(\"tinytable_format_date\", default = NULL),\n  bool = get_option(\"tinytable_format_bool\", default = NULL),\n  math = get_option(\"tinytable_format_math\", default = FALSE),\n  other = get_option(\"tinytable_format_other\", default = NULL),\n  replace = get_option(\"tinytable_format_replace\", default = FALSE),\n  escape = get_option(\"tinytable_format_escape\", default = FALSE),\n  markdown = get_option(\"tinytable_format_markdown\", default = FALSE),\n  quarto = get_option(\"tinytable_format_quarto\", default = FALSE),\n  fn = get_option(\"tinytable_format_fn\", default = NULL),\n  sprintf = get_option(\"tinytable_format_sprintf\", default = NULL)\n)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object created by tt().\n\n\n\n\nj\n\n\nColumn index or name to format. Must be a single column.\n\n\n\n\ndigits\n\n\nNumber of significant digits or decimal places.\n\n\n\n\nnum_fmt\n\n\nThe format for numeric values; one of ‘significant’, ‘significant_cell’, ‘decimal’, or ‘scientific’.\n\n\n\n\nnum_zero\n\n\nLogical; if TRUE, trailing zeros are kept in \"decimal\" format (but not in \"significant\" format).\n\n\n\n\nnum_suffix\n\n\nLogical; if TRUE display short numbers with digits significant digits and K (thousands), M (millions), B (billions), or T (trillions) suffixes.\n\n\n\n\nnum_mark_big\n\n\nCharacter to use as a thousands separator.\n\n\n\n\nnum_mark_dec\n\n\nDecimal mark character. Default is the global option ‘OutDec’.\n\n\n\n\ndate\n\n\nA string passed to the format() function, such as \"%Y-%m-%d\". Exception: for tabulator output, this is used directly as the Tabulator.js date format string (e.g., \"MM/DD/YYYY\"). Note: R and Tabulator.js use different date format specifications.\n\n\n\n\nbool\n\n\nA function to format logical columns. Defaults to title case.\n\n\n\n\nmath\n\n\nLogical. If TRUE, wrap cell values in math mode $..$. This is useful for LaTeX output or with HTML MathJax options(tinytable_html_mathjax=TRUE).\n\n\n\n\nother\n\n\nA function to format columns of other types. Defaults to as.character().\n\n\n\n\nreplace\n\n\nLogical, String or Named list of vectors\n\n\nTRUE: Replace NA and NaN by an empty string.\n\n\nFALSE: Print NA and NaN as strings.\n\n\nString: Replace NA and NaN entries by the user-supplied string.\n\n\nNamed list: Replace matching elements of the vectors in the list by theirs names. Example:\n\n\nlist(“-” = c(NA, NaN), “Tiny” = -Inf, “Massive” = Inf)\n\n\n\n\n\n\n\n\nescape\n\n\nLogical or \"latex\" or \"html\". If TRUE, escape special characters to display them as text in the format of the output of a tt() table.\n\n\nIf i and j are both NULL, escape all cells, column names, caption, notes, and spanning labels created by group_tt().\n\n\n\n\n\n\nmarkdown\n\n\nLogical; if TRUE, render markdown syntax in cells. Ex: italicized text is properly italicized in HTML and LaTeX.\n\n\n\n\nquarto\n\n\nLogical. Enable Quarto data processing and wrap cell content in a data-qmd span (HTML) or  macro (LaTeX). See warnings in the Global Options section below.\n\n\n\n\nfn\n\n\nFunction for custom formatting. Accepts a vector and returns a character vector of the same length.\n\n\n\n\nsprintf\n\n\nString passed to the ?sprintf function to format numbers or interpolate strings with a user-defined pattern (similar to the glue package, but using Base R).\n\n\n\n\n\n\nA character string containing complete JavaScript column definition for Tabulator.js including title, field, formatter, and formatterParams\n\n\n\n\nlibrary(\"tinytable\")\n\ndat &lt;- data.frame(\n  price = c(12.34, 56.78, 90.12),\n  count = c(1L, 2L, 3L),\n  active = c(TRUE, FALSE, TRUE),\n  date = as.Date(c(\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"))\n)\nx &lt;- tt(dat, output = \"tabulator\")\n\n# Format numeric column with 3 decimal places\nformat_tabulator_column(x, j = \"price\", digits = 3)\n\n# Format integer column as money\nformat_tabulator_column(x, j = \"count\", num_mark_big = \",\")\n\n# Format date column\nformat_tabulator_column(x, j = \"date\", date = \"%m/%d/%Y\")"
  },
  {
    "objectID": "man/format_tt.html",
    "href": "man/format_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "This function formats the columns of a data frame based on the column type (logical, date, numeric). It allows various formatting options like significant digits, decimal points, and scientific notation. It also includes custom formatting for date and boolean values. If this function is applied several times to the same cell, the last transformation is retained and the previous calls are ignored, except for the escape argument which can be applied to previously transformed data.\n\n\n\nformat_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  digits = get_option(\"tinytable_format_digits\", default = NULL),\n  num_fmt = get_option(\"tinytable_format_num_fmt\", default = \"significant\"),\n  num_zero = get_option(\"tinytable_format_num_zero\", default = FALSE),\n  num_suffix = get_option(\"tinytable_format_num_suffix\", default = FALSE),\n  num_mark_big = get_option(\"tinytable_format_num_mark_big\", default = \"\"),\n  num_mark_dec = get_option(\"tinytable_format_num_mark_dec\", default =\n    getOption(\"OutDec\", default = \".\")),\n  date = get_option(\"tinytable_format_date\", default = NULL),\n  bool = get_option(\"tinytable_format_bool\", default = NULL),\n  math = get_option(\"tinytable_format_math\", default = FALSE),\n  other = get_option(\"tinytable_format_other\", default = NULL),\n  replace = get_option(\"tinytable_format_replace\", default = FALSE),\n  escape = get_option(\"tinytable_format_escape\", default = FALSE),\n  markdown = get_option(\"tinytable_format_markdown\", default = FALSE),\n  quarto = get_option(\"tinytable_format_quarto\", default = FALSE),\n  fn = get_option(\"tinytable_format_fn\", default = NULL),\n  sprintf = get_option(\"tinytable_format_sprintf\", default = NULL)\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or a vector to be formatted.\n\n\n\n\ni\n\n\nNumeric vector or string.\n\n\nNumeric vector: Row indices where the styling should be applied. Can be a single value or a vector.\n\n\nString: Table components to format \"caption\", \"colnames\", \"groupi\" (row group labels), \"~groupi\" (non-group rows), \"groupj\" (column group labels), \"notes\".\n\n\nIf both the i and j are omitted (default: NULL), formatting is applied to all table elements, including caption, notes, and group labels.\n\n\n\n\n\n\nj\n\n\nColumn indices where the styling should be applied. Can be:\n\n\nInteger vectors indicating column positions.\n\n\nCharacter vector indicating column names.\n\n\nA single string specifying a Perl-style regular expression used to match column names.\n\n\n\n\n\n\ndigits\n\n\nNumber of significant digits or decimal places.\n\n\n\n\nnum_fmt\n\n\nThe format for numeric values; one of ‘significant’, ‘significant_cell’, ‘decimal’, or ‘scientific’.\n\n\n\n\nnum_zero\n\n\nLogical; if TRUE, trailing zeros are kept in \"decimal\" format (but not in \"significant\" format).\n\n\n\n\nnum_suffix\n\n\nLogical; if TRUE display short numbers with digits significant digits and K (thousands), M (millions), B (billions), or T (trillions) suffixes.\n\n\n\n\nnum_mark_big\n\n\nCharacter to use as a thousands separator.\n\n\n\n\nnum_mark_dec\n\n\nDecimal mark character. Default is the global option ‘OutDec’.\n\n\n\n\ndate\n\n\nA string passed to the format() function, such as \"%Y-%m-%d\". See the \"Details\" section in ?strptime\n\n\n\n\nbool\n\n\nA function to format logical columns. Defaults to title case.\n\n\n\n\nmath\n\n\nLogical. If TRUE, wrap cell values in math mode $..$. This is useful for LaTeX output or with HTML MathJax options(tinytable_html_mathjax=TRUE).\n\n\n\n\nother\n\n\nA function to format columns of other types. Defaults to as.character().\n\n\n\n\nreplace\n\n\nLogical, String or Named list of vectors\n\n\nTRUE: Replace NA and NaN by an empty string.\n\n\nFALSE: Print NA and NaN as strings.\n\n\nString: Replace NA and NaN entries by the user-supplied string.\n\n\nNamed list: Replace matching elements of the vectors in the list by theirs names. Example:\n\n\nlist(“-” = c(NA, NaN), “Tiny” = -Inf, “Massive” = Inf)\n\n\n\n\n\n\n\n\nescape\n\n\nLogical or \"latex\" or \"html\". If TRUE, escape special characters to display them as text in the format of the output of a tt() table.\n\n\nIf i and j are both NULL, escape all cells, column names, caption, notes, and spanning labels created by group_tt().\n\n\n\n\n\n\nmarkdown\n\n\nLogical; if TRUE, render markdown syntax in cells. Ex: italicized text is properly italicized in HTML and LaTeX.\n\n\n\n\nquarto\n\n\nLogical. Enable Quarto data processing and wrap cell content in a data-qmd span (HTML) or  macro (LaTeX). See warnings in the Global Options section below.\n\n\n\n\nfn\n\n\nFunction for custom formatting. Accepts a vector and returns a character vector of the same length.\n\n\n\n\nsprintf\n\n\nString passed to the ?sprintf function to format numbers or interpolate strings with a user-defined pattern (similar to the glue package, but using Base R).\n\n\n\n\n\n\nA data frame with formatted columns.\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\n\nlibrary(\"tinytable\")\n\ndat &lt;- data.frame(\n  a = rnorm(3, mean = 10000),\n  b = rnorm(3, 10000)\n)\ntab &lt;- tt(dat)\nformat_tt(tab,\n  digits = 2,\n  num_mark_dec = \",\",\n  num_mark_big = \" \"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  10 000\n                  10 000\n                \n                \n                  9 999\n                  10 001\n                \n                \n                  10 002\n                  9 999\n                \n        \n      \n    \n\n\nk &lt;- tt(data.frame(x = c(0.000123456789, 12.4356789)))\nformat_tt(k, digits = 2, num_fmt = \"significant_cell\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12\n                \n        \n      \n    \n\n\ndat &lt;- data.frame(\n  a = c(\"Burger\", \"Halloumi\", \"Tofu\", \"Beans\"),\n  b = c(1.43202, 201.399, 0.146188, 0.0031),\n  c = c(98938272783457, 7288839482, 29111727, 93945)\n)\ntt(dat) |&gt;\n  format_tt(j = \"a\", sprintf = \"Food: %s\") |&gt;\n  format_tt(j = 2, digits = 1, num_fmt = \"decimal\", num_zero = TRUE) |&gt;\n  format_tt(j = \"c\", digits = 2, num_suffix = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  Food: Burger\n                  1.4\n                  99T\n                \n                \n                  Food: Halloumi\n                  201.4\n                  7.3B\n                \n                \n                  Food: Tofu\n                  0.1\n                  29M\n                \n                \n                  Food: Beans\n                  0.0\n                  94K\n                \n        \n      \n    \n\n\ny &lt;- tt(data.frame(x = c(123456789.678, 12435.6789)))\nformat_tt(y, digits = 3, num_mark_big = \" \")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  123 456 790\n                \n                \n                  12 436\n                \n        \n      \n    \n\n\nx &lt;- tt(data.frame(Text = c(\"_italicized text_\", \"__bold text__\")))\nformat_tt(x, markdown = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Text\n              \n        \n        \n        \n                \n                  italicized text\n                \n                \n                  bold text\n                \n        \n      \n    \n\n\ntab &lt;- data.frame(a = c(NA, 1, 2), b = c(3, NA, 5))\ntt(tab) |&gt; format_tt(replace = \"-\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  -\n                  3\n                \n                \n                  1\n                  -\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\ndat &lt;- data.frame(\n  \"LaTeX\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\"),\n  \"HTML\" = c(\"&lt;br&gt;\", \"&lt;sup&gt;4&lt;/sup&gt;\", \"&lt;emph&gt;blah&lt;/emph&gt;\")\n)\ntt(dat) |&gt; format_tt(escape = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n              \n        \n        \n        \n                \n                  Dollars $\n                  &lt;br&gt;\n                \n                \n                  Percent %\n                  &lt;sup&gt;4&lt;/sup&gt;\n                \n                \n                  Underscore _\n                  &lt;emph&gt;blah&lt;/emph&gt;",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`format_tt`"
    ]
  },
  {
    "objectID": "man/format_tt.html#format-columns-of-a-data-frame",
    "href": "man/format_tt.html#format-columns-of-a-data-frame",
    "title": "tinytable",
    "section": "",
    "text": "This function formats the columns of a data frame based on the column type (logical, date, numeric). It allows various formatting options like significant digits, decimal points, and scientific notation. It also includes custom formatting for date and boolean values. If this function is applied several times to the same cell, the last transformation is retained and the previous calls are ignored, except for the escape argument which can be applied to previously transformed data.\n\n\n\nformat_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  digits = get_option(\"tinytable_format_digits\", default = NULL),\n  num_fmt = get_option(\"tinytable_format_num_fmt\", default = \"significant\"),\n  num_zero = get_option(\"tinytable_format_num_zero\", default = FALSE),\n  num_suffix = get_option(\"tinytable_format_num_suffix\", default = FALSE),\n  num_mark_big = get_option(\"tinytable_format_num_mark_big\", default = \"\"),\n  num_mark_dec = get_option(\"tinytable_format_num_mark_dec\", default =\n    getOption(\"OutDec\", default = \".\")),\n  date = get_option(\"tinytable_format_date\", default = NULL),\n  bool = get_option(\"tinytable_format_bool\", default = NULL),\n  math = get_option(\"tinytable_format_math\", default = FALSE),\n  other = get_option(\"tinytable_format_other\", default = NULL),\n  replace = get_option(\"tinytable_format_replace\", default = FALSE),\n  escape = get_option(\"tinytable_format_escape\", default = FALSE),\n  markdown = get_option(\"tinytable_format_markdown\", default = FALSE),\n  quarto = get_option(\"tinytable_format_quarto\", default = FALSE),\n  fn = get_option(\"tinytable_format_fn\", default = NULL),\n  sprintf = get_option(\"tinytable_format_sprintf\", default = NULL)\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or a vector to be formatted.\n\n\n\n\ni\n\n\nNumeric vector or string.\n\n\nNumeric vector: Row indices where the styling should be applied. Can be a single value or a vector.\n\n\nString: Table components to format \"caption\", \"colnames\", \"groupi\" (row group labels), \"~groupi\" (non-group rows), \"groupj\" (column group labels), \"notes\".\n\n\nIf both the i and j are omitted (default: NULL), formatting is applied to all table elements, including caption, notes, and group labels.\n\n\n\n\n\n\nj\n\n\nColumn indices where the styling should be applied. Can be:\n\n\nInteger vectors indicating column positions.\n\n\nCharacter vector indicating column names.\n\n\nA single string specifying a Perl-style regular expression used to match column names.\n\n\n\n\n\n\ndigits\n\n\nNumber of significant digits or decimal places.\n\n\n\n\nnum_fmt\n\n\nThe format for numeric values; one of ‘significant’, ‘significant_cell’, ‘decimal’, or ‘scientific’.\n\n\n\n\nnum_zero\n\n\nLogical; if TRUE, trailing zeros are kept in \"decimal\" format (but not in \"significant\" format).\n\n\n\n\nnum_suffix\n\n\nLogical; if TRUE display short numbers with digits significant digits and K (thousands), M (millions), B (billions), or T (trillions) suffixes.\n\n\n\n\nnum_mark_big\n\n\nCharacter to use as a thousands separator.\n\n\n\n\nnum_mark_dec\n\n\nDecimal mark character. Default is the global option ‘OutDec’.\n\n\n\n\ndate\n\n\nA string passed to the format() function, such as \"%Y-%m-%d\". See the \"Details\" section in ?strptime\n\n\n\n\nbool\n\n\nA function to format logical columns. Defaults to title case.\n\n\n\n\nmath\n\n\nLogical. If TRUE, wrap cell values in math mode $..$. This is useful for LaTeX output or with HTML MathJax options(tinytable_html_mathjax=TRUE).\n\n\n\n\nother\n\n\nA function to format columns of other types. Defaults to as.character().\n\n\n\n\nreplace\n\n\nLogical, String or Named list of vectors\n\n\nTRUE: Replace NA and NaN by an empty string.\n\n\nFALSE: Print NA and NaN as strings.\n\n\nString: Replace NA and NaN entries by the user-supplied string.\n\n\nNamed list: Replace matching elements of the vectors in the list by theirs names. Example:\n\n\nlist(“-” = c(NA, NaN), “Tiny” = -Inf, “Massive” = Inf)\n\n\n\n\n\n\n\n\nescape\n\n\nLogical or \"latex\" or \"html\". If TRUE, escape special characters to display them as text in the format of the output of a tt() table.\n\n\nIf i and j are both NULL, escape all cells, column names, caption, notes, and spanning labels created by group_tt().\n\n\n\n\n\n\nmarkdown\n\n\nLogical; if TRUE, render markdown syntax in cells. Ex: italicized text is properly italicized in HTML and LaTeX.\n\n\n\n\nquarto\n\n\nLogical. Enable Quarto data processing and wrap cell content in a data-qmd span (HTML) or  macro (LaTeX). See warnings in the Global Options section below.\n\n\n\n\nfn\n\n\nFunction for custom formatting. Accepts a vector and returns a character vector of the same length.\n\n\n\n\nsprintf\n\n\nString passed to the ?sprintf function to format numbers or interpolate strings with a user-defined pattern (similar to the glue package, but using Base R).\n\n\n\n\n\n\nA data frame with formatted columns.\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\n\nlibrary(\"tinytable\")\n\ndat &lt;- data.frame(\n  a = rnorm(3, mean = 10000),\n  b = rnorm(3, 10000)\n)\ntab &lt;- tt(dat)\nformat_tt(tab,\n  digits = 2,\n  num_mark_dec = \",\",\n  num_mark_big = \" \"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  10 000\n                  10 000\n                \n                \n                  9 999\n                  10 001\n                \n                \n                  10 002\n                  9 999\n                \n        \n      \n    \n\n\nk &lt;- tt(data.frame(x = c(0.000123456789, 12.4356789)))\nformat_tt(k, digits = 2, num_fmt = \"significant_cell\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12\n                \n        \n      \n    \n\n\ndat &lt;- data.frame(\n  a = c(\"Burger\", \"Halloumi\", \"Tofu\", \"Beans\"),\n  b = c(1.43202, 201.399, 0.146188, 0.0031),\n  c = c(98938272783457, 7288839482, 29111727, 93945)\n)\ntt(dat) |&gt;\n  format_tt(j = \"a\", sprintf = \"Food: %s\") |&gt;\n  format_tt(j = 2, digits = 1, num_fmt = \"decimal\", num_zero = TRUE) |&gt;\n  format_tt(j = \"c\", digits = 2, num_suffix = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  Food: Burger\n                  1.4\n                  99T\n                \n                \n                  Food: Halloumi\n                  201.4\n                  7.3B\n                \n                \n                  Food: Tofu\n                  0.1\n                  29M\n                \n                \n                  Food: Beans\n                  0.0\n                  94K\n                \n        \n      \n    \n\n\ny &lt;- tt(data.frame(x = c(123456789.678, 12435.6789)))\nformat_tt(y, digits = 3, num_mark_big = \" \")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  123 456 790\n                \n                \n                  12 436\n                \n        \n      \n    \n\n\nx &lt;- tt(data.frame(Text = c(\"_italicized text_\", \"__bold text__\")))\nformat_tt(x, markdown = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Text\n              \n        \n        \n        \n                \n                  italicized text\n                \n                \n                  bold text\n                \n        \n      \n    \n\n\ntab &lt;- data.frame(a = c(NA, 1, 2), b = c(3, NA, 5))\ntt(tab) |&gt; format_tt(replace = \"-\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  -\n                  3\n                \n                \n                  1\n                  -\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\ndat &lt;- data.frame(\n  \"LaTeX\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\"),\n  \"HTML\" = c(\"&lt;br&gt;\", \"&lt;sup&gt;4&lt;/sup&gt;\", \"&lt;emph&gt;blah&lt;/emph&gt;\")\n)\ntt(dat) |&gt; format_tt(escape = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n              \n        \n        \n        \n                \n                  Dollars $\n                  &lt;br&gt;\n                \n                \n                  Percent %\n                  &lt;sup&gt;4&lt;/sup&gt;\n                \n                \n                  Underscore _\n                  &lt;emph&gt;blah&lt;/emph&gt;",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`format_tt`"
    ]
  },
  {
    "objectID": "man/plot_tt.html",
    "href": "man/plot_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "The plot_tt() function allows for the insertion of images and inline plots into tinytable objects. This function can handle both local and web-based images.\n\n\n\nplot_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  fun = NULL,\n  data = NULL,\n  color = \"black\",\n  xlim = NULL,\n  height = 1,\n  asp = 1/3,\n  images = NULL,\n  assets = \"tinytable_assets\",\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object.\n\n\n\n\ni\n\n\nInteger vector, the row indices where images are to be inserted. If NULL, images will be inserted in all rows.\n\n\n\n\nj\n\n\nInteger vector, the column indices where images are to be inserted. If NULL, images will be inserted in all columns.\n\n\n\n\nfun\n\n\nString or function to generate inline plots.\n\n\nString: \"histogram\", \"density\", \"bar\", \"line\"\n\n\nFunctions that return ggplot2 objects.\n\n\nFunctions that return another function which generates a base R plot, ex: function(x) {function() hist(x)}\n\n\nSee the tutorial on the tinytable website for more information.\n\n\n\n\n\n\ndata\n\n\na list of data frames or vectors to be used by the plotting functions in fun.\n\n\n\n\ncolor\n\n\nstring Name of color to use for inline plots (passed to the col argument base graphics plots in R).\n\n\n\n\nxlim\n\n\nNumeric vector of length 2.\n\n\n\n\nheight\n\n\nNumeric, the height of the images in the table in em units.\n\n\n\n\nasp\n\n\nNumeric, aspect ratio of the plots (height / width).\n\n\n\n\nimages\n\n\nCharacter vector, the paths to the images to be inserted. Paths are relative to the main table file or Quarto (Rmarkdown) document.\n\n\n\n\nassets\n\n\nPath to the directory where generated assets are stored. This path is relative to the location where a table is saved.\n\n\n\n\n…\n\n\nExtra arguments are passed to the function in fun. Important: Custom plotting functions must always have … as an argument.\n\n\n\n\n\n\nThe plot_tt() can insert images and inline plots into tables.\n\n\n\nA modified tinytable object with images or plots inserted.",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`plot_tt`"
    ]
  },
  {
    "objectID": "man/plot_tt.html#insert-images-and-inline-plots-into-tinytable-objects",
    "href": "man/plot_tt.html#insert-images-and-inline-plots-into-tinytable-objects",
    "title": "tinytable",
    "section": "",
    "text": "The plot_tt() function allows for the insertion of images and inline plots into tinytable objects. This function can handle both local and web-based images.\n\n\n\nplot_tt(\n  x,\n  i = NULL,\n  j = NULL,\n  fun = NULL,\n  data = NULL,\n  color = \"black\",\n  xlim = NULL,\n  height = 1,\n  asp = 1/3,\n  images = NULL,\n  assets = \"tinytable_assets\",\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA tinytable object.\n\n\n\n\ni\n\n\nInteger vector, the row indices where images are to be inserted. If NULL, images will be inserted in all rows.\n\n\n\n\nj\n\n\nInteger vector, the column indices where images are to be inserted. If NULL, images will be inserted in all columns.\n\n\n\n\nfun\n\n\nString or function to generate inline plots.\n\n\nString: \"histogram\", \"density\", \"bar\", \"line\"\n\n\nFunctions that return ggplot2 objects.\n\n\nFunctions that return another function which generates a base R plot, ex: function(x) {function() hist(x)}\n\n\nSee the tutorial on the tinytable website for more information.\n\n\n\n\n\n\ndata\n\n\na list of data frames or vectors to be used by the plotting functions in fun.\n\n\n\n\ncolor\n\n\nstring Name of color to use for inline plots (passed to the col argument base graphics plots in R).\n\n\n\n\nxlim\n\n\nNumeric vector of length 2.\n\n\n\n\nheight\n\n\nNumeric, the height of the images in the table in em units.\n\n\n\n\nasp\n\n\nNumeric, aspect ratio of the plots (height / width).\n\n\n\n\nimages\n\n\nCharacter vector, the paths to the images to be inserted. Paths are relative to the main table file or Quarto (Rmarkdown) document.\n\n\n\n\nassets\n\n\nPath to the directory where generated assets are stored. This path is relative to the location where a table is saved.\n\n\n\n\n…\n\n\nExtra arguments are passed to the function in fun. Important: Custom plotting functions must always have … as an argument.\n\n\n\n\n\n\nThe plot_tt() can insert images and inline plots into tables.\n\n\n\nA modified tinytable object with images or plots inserted.",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`plot_tt`"
    ]
  },
  {
    "objectID": "man/tt.html",
    "href": "man/tt.html",
    "title": "tinytable",
    "section": "",
    "text": "The tt function renders a table in different formats with various styling options: HTML, Markdown, LaTeX, Word, PDF, PNG, or Typst. The table can be customized with additional functions:\n\n\nstyle_tt(): style fonts, colors, alignment, etc.\n\n\nformat_tt(): format numbers, dates, strings, etc.\n\n\ngroup_tt(): row or column group labels.\n\n\ntheme_tt(): apply a collection of transformations to a tinytable.\n\n\nsave_tt(): save the table to a file or return the table as a string.\n\n\nprint(): print to a specific format, ex: print(x, “latex”)\n\n\ntinytable attempts to determine the appropriate way to print the table based on interactive use, RStudio availability, and output format in RMarkdown or Quarto documents. Users can call print(x, output=“markdown”) to print the table in a specific format. Alternatively, they can set a global option: options(“tinytable_print_output”=“markdown”)\n\n\n\ntt(\n  x,\n  digits = get_option(\"tinytable_tt_digits\", default = NULL),\n  caption = get_option(\"tinytable_tt_caption\", default = NULL),\n  notes = get_option(\"tinytable_tt_notes\", default = NULL),\n  width = get_option(\"tinytable_tt_width\", default = NULL),\n  height = get_option(\"tinytable_tt_height\", default = NULL),\n  theme = get_option(\"tinytable_tt_theme\", default = \"default\"),\n  colnames = get_option(\"tinytable_tt_colnames\", default = TRUE),\n  rownames = get_option(\"tinytable_tt_rownames\", default = FALSE),\n  escape = get_option(\"tinytable_tt_escape\", default = FALSE),\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\ndigits\n\n\nNumber of significant digits to keep for numeric variables. When digits is an integer, tt() calls format_tt(x, digits = digits) before proceeding to draw the table. Note that this will apply all default argument values of format_tt(), such as replacing NA by \"\". Users who need more control can use the format_tt() function instead.\n\n\n\n\ncaption\n\n\nA string that will be used as the caption of the table. This argument should not be used in Quarto or Rmarkdown documents. In that context, please use the appropriate chunk options.\n\n\n\n\nnotes\n\n\nNotes to append to the bottom of the table. This argument accepts several different inputs:\n\n\nSingle string insert a single note: “blah blah”\n\n\nMultiple strings insert multiple notes sequentially: list(“Hello world”, “Foo bar”)\n\n\nA named list inserts a list with the name as superscript: list(“a” = list(“Hello World”))\n\n\nA named list with positions inserts markers as superscripts inside table cells: list(“a” = list(i = 0:1, j = 2, text = “Hello World”))\n\n\n\n\n\n\nwidth\n\n\nTable or column width.\n\n\nSingle numeric value smaller than or equal to 1 determines the full table width, in proportion of line width.\n\n\nNumeric vector of length equal to the number of columns in x determines the width of each column, in proportion of line width. If the sum of width exceeds 1, each element is divided by sum(width). This makes the table full-width with relative column sizes.\n\n\n\n\n\n\nheight\n\n\nRow height in em units. Single numeric value greater than zero that determines the row height spacing.\n\n\n\n\ntheme\n\n\nFunction or string.\n\n\nString: bootstrap, grid, multipage, placement, revealjs, resize, rotate, striped, tabular, tabulator, void\n\n\nFunction: Applied to the tinytable object.\n\n\n\n\n\n\ncolnames\n\n\nLogical. If FALSE, column names are omitted.\n\n\n\n\nrownames\n\n\nLogical. If TRUE, rownames are included as the first column\n\n\n\n\nescape\n\n\nLogical. If TRUE, escape special characters in the table. Equivalent to format_tt(tt(x), escape = TRUE).\n\n\n\n\n…\n\n\nAdditional arguments are ignored\n\n\n\n\n\n\nAn object of class tt representing the table.\nThe table object has S4 slots which hold information about the structure of the table. For example, the table@group_index_i slot includes the row indices for grouping labels added by group_tt().\nWarning: Relying on or modifying the contents of these slots is strongly discouraged. Their names and contents could change at any time, and the tinytable developers do not consider changes to the internal structure of the output object to be a \"breaking change\" for versioning or changelog purposes.\n\n\n\n\n\n.pdf output requires a full LaTeX installation on the local computer.\n\n\n.png output requires the webshot2 package.\n\n\n.html self-contained files require the base64enc package.\n\n\n\n\n\ntinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, uses the special tblr, talltblr, and longtblr environments.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages. For standalone LaTeX documents, these commands should be inserted in the preamble manually:\nNote: Your document will fail to compile to PDF in Quarto if you enable caching and you use tinytable due to missing LaTeX headers. To avoid this problem, set the option #| cache: false for the chunk(s) where you use tinytable.\n\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\nExperimental Feature: The Tabulator.js integration is experimental and the API may change in future versions.\nThe Tabulator.js library provides powerful interactive table features including sorting, filtering, pagination, data export, and real-time editing capabilities. This theme customizes the appearance and behavior of Tabulator tables.\nFeatures:\n\n\nSorting and filtering of all columns\n\n\nPagination with configurable page sizes\n\n\nSearch functionality across all columns\n\n\nMultiple CSS themes and custom styling\n\n\nReal-time data export options\n\n\nAccessibility features (ARIA compliant)\n\n\nLimitations:\n\n\nLimited style_tt() support (only align and alignv)\n\n\nRow-based formatting (format_tt() with i argument) not supported\n\n\nGlobal stylesheets affect all tables in multi-table documents\n\n\nDate formatting uses Luxon tokens, not R’s strptime format\n\n\nBoolean formatting requires format_tt() with bool argument for custom display\n\n\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- mtcars[1:4, 1:5]\n\ntt(x)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x,\n  theme = \"striped\",\n  width = 0.5,\n  caption = \"Data about cars.\"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        Data about cars.\n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x, notes = \"Hello World!\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        Hello World!\n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\nfn &lt;- list(i = 0:1, j = 2, text = \"Hello World!\")\ntab &lt;- tt(x, notes = list(\"*\" = fn))\nprint(tab, \"latex\")\n\n\\begin{table}\n\\centering\n\\begin{talltblr}[         %% tabularray outer open\nentry=none,label=none,\nnote{*}={Hello World!},\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nmpg & cyl\\textsuperscript{*} & disp & hp & drat \\\\ \\midrule %% TinyTableHeader\n21.0 & 6\\textsuperscript{*} & 160 & 110 & 3.90 \\\\\n21.0 & 6 & 160 & 110 & 3.90 \\\\\n22.8 & 4 & 108 & 93 & 3.85 \\\\\n21.4 & 6 & 258 & 110 & 3.08 \\\\\n\\bottomrule\n\\end{talltblr}\n\\end{table} \n\nk &lt;- data.frame(x = c(0.000123456789, 12.4356789))\ntt(k, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12.43568",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`tt`"
    ]
  },
  {
    "objectID": "man/tt.html#draw-a-tiny-table",
    "href": "man/tt.html#draw-a-tiny-table",
    "title": "tinytable",
    "section": "",
    "text": "The tt function renders a table in different formats with various styling options: HTML, Markdown, LaTeX, Word, PDF, PNG, or Typst. The table can be customized with additional functions:\n\n\nstyle_tt(): style fonts, colors, alignment, etc.\n\n\nformat_tt(): format numbers, dates, strings, etc.\n\n\ngroup_tt(): row or column group labels.\n\n\ntheme_tt(): apply a collection of transformations to a tinytable.\n\n\nsave_tt(): save the table to a file or return the table as a string.\n\n\nprint(): print to a specific format, ex: print(x, “latex”)\n\n\ntinytable attempts to determine the appropriate way to print the table based on interactive use, RStudio availability, and output format in RMarkdown or Quarto documents. Users can call print(x, output=“markdown”) to print the table in a specific format. Alternatively, they can set a global option: options(“tinytable_print_output”=“markdown”)\n\n\n\ntt(\n  x,\n  digits = get_option(\"tinytable_tt_digits\", default = NULL),\n  caption = get_option(\"tinytable_tt_caption\", default = NULL),\n  notes = get_option(\"tinytable_tt_notes\", default = NULL),\n  width = get_option(\"tinytable_tt_width\", default = NULL),\n  height = get_option(\"tinytable_tt_height\", default = NULL),\n  theme = get_option(\"tinytable_tt_theme\", default = \"default\"),\n  colnames = get_option(\"tinytable_tt_colnames\", default = TRUE),\n  rownames = get_option(\"tinytable_tt_rownames\", default = FALSE),\n  escape = get_option(\"tinytable_tt_escape\", default = FALSE),\n  ...\n)\n\n\n\n\n\n\n\nx\n\n\nA data frame or data table to be rendered as a table.\n\n\n\n\ndigits\n\n\nNumber of significant digits to keep for numeric variables. When digits is an integer, tt() calls format_tt(x, digits = digits) before proceeding to draw the table. Note that this will apply all default argument values of format_tt(), such as replacing NA by \"\". Users who need more control can use the format_tt() function instead.\n\n\n\n\ncaption\n\n\nA string that will be used as the caption of the table. This argument should not be used in Quarto or Rmarkdown documents. In that context, please use the appropriate chunk options.\n\n\n\n\nnotes\n\n\nNotes to append to the bottom of the table. This argument accepts several different inputs:\n\n\nSingle string insert a single note: “blah blah”\n\n\nMultiple strings insert multiple notes sequentially: list(“Hello world”, “Foo bar”)\n\n\nA named list inserts a list with the name as superscript: list(“a” = list(“Hello World”))\n\n\nA named list with positions inserts markers as superscripts inside table cells: list(“a” = list(i = 0:1, j = 2, text = “Hello World”))\n\n\n\n\n\n\nwidth\n\n\nTable or column width.\n\n\nSingle numeric value smaller than or equal to 1 determines the full table width, in proportion of line width.\n\n\nNumeric vector of length equal to the number of columns in x determines the width of each column, in proportion of line width. If the sum of width exceeds 1, each element is divided by sum(width). This makes the table full-width with relative column sizes.\n\n\n\n\n\n\nheight\n\n\nRow height in em units. Single numeric value greater than zero that determines the row height spacing.\n\n\n\n\ntheme\n\n\nFunction or string.\n\n\nString: bootstrap, grid, multipage, placement, revealjs, resize, rotate, striped, tabular, tabulator, void\n\n\nFunction: Applied to the tinytable object.\n\n\n\n\n\n\ncolnames\n\n\nLogical. If FALSE, column names are omitted.\n\n\n\n\nrownames\n\n\nLogical. If TRUE, rownames are included as the first column\n\n\n\n\nescape\n\n\nLogical. If TRUE, escape special characters in the table. Equivalent to format_tt(tt(x), escape = TRUE).\n\n\n\n\n…\n\n\nAdditional arguments are ignored\n\n\n\n\n\n\nAn object of class tt representing the table.\nThe table object has S4 slots which hold information about the structure of the table. For example, the table@group_index_i slot includes the row indices for grouping labels added by group_tt().\nWarning: Relying on or modifying the contents of these slots is strongly discouraged. Their names and contents could change at any time, and the tinytable developers do not consider changes to the internal structure of the output object to be a \"breaking change\" for versioning or changelog purposes.\n\n\n\n\n\n.pdf output requires a full LaTeX installation on the local computer.\n\n\n.png output requires the webshot2 package.\n\n\n.html self-contained files require the base64enc package.\n\n\n\n\n\ntinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, uses the special tblr, talltblr, and longtblr environments.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages. For standalone LaTeX documents, these commands should be inserted in the preamble manually:\nNote: Your document will fail to compile to PDF in Quarto if you enable caching and you use tinytable due to missing LaTeX headers. To avoid this problem, set the option #| cache: false for the chunk(s) where you use tinytable.\n\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\n\n\nMarkdown and Word tables only support these styles: italic, bold, strikeout. The width argument is also unavailable Moreover, the style_tt() function cannot be used to style headers inserted by the group_tt() function; instead, you should style the headers directly in the header definition using markdown syntax: group_tt(i = list(“italic header” = 2)). These limitations are due to the fact that there is no markdown syntax for the other options, and that we create Word documents by converting a markdown table to .docx via the Pandoc software.\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\nExperimental Feature: The Tabulator.js integration is experimental and the API may change in future versions.\nThe Tabulator.js library provides powerful interactive table features including sorting, filtering, pagination, data export, and real-time editing capabilities. This theme customizes the appearance and behavior of Tabulator tables.\nFeatures:\n\n\nSorting and filtering of all columns\n\n\nPagination with configurable page sizes\n\n\nSearch functionality across all columns\n\n\nMultiple CSS themes and custom styling\n\n\nReal-time data export options\n\n\nAccessibility features (ARIA compliant)\n\n\nLimitations:\n\n\nLimited style_tt() support (only align and alignv)\n\n\nRow-based formatting (format_tt() with i argument) not supported\n\n\nGlobal stylesheets affect all tables in multi-table documents\n\n\nDate formatting uses Luxon tokens, not R’s strptime format\n\n\nBoolean formatting requires format_tt() with bool argument for custom display\n\n\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- mtcars[1:4, 1:5]\n\ntt(x)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x,\n  theme = \"striped\",\n  width = 0.5,\n  caption = \"Data about cars.\"\n)\n\n\n\n    \n\n    \n    \n      \n        \n        Data about cars.\n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\ntt(x, notes = \"Hello World!\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        Hello World!\n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\nfn &lt;- list(i = 0:1, j = 2, text = \"Hello World!\")\ntab &lt;- tt(x, notes = list(\"*\" = fn))\nprint(tab, \"latex\")\n\n\\begin{table}\n\\centering\n\\begin{talltblr}[         %% tabularray outer open\nentry=none,label=none,\nnote{*}={Hello World!},\n]                     %% tabularray outer close\n{                     %% tabularray inner open\ncolspec={Q[]Q[]Q[]Q[]Q[]},\n}                     %% tabularray inner close\n\\toprule\nmpg & cyl\\textsuperscript{*} & disp & hp & drat \\\\ \\midrule %% TinyTableHeader\n21.0 & 6\\textsuperscript{*} & 160 & 110 & 3.90 \\\\\n21.0 & 6 & 160 & 110 & 3.90 \\\\\n22.8 & 4 & 108 & 93 & 3.85 \\\\\n21.4 & 6 & 258 & 110 & 3.08 \\\\\n\\bottomrule\n\\end{talltblr}\n\\end{table} \n\nk &lt;- data.frame(x = c(0.000123456789, 12.4356789))\ntt(k, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12.43568",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`tt`"
    ]
  },
  {
    "objectID": "man/save_tt.html",
    "href": "man/save_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "This function saves an object of class tinytable to a specified file and format, with an option to overwrite existing files.\n\n\n\nsave_tt(\n  x,\n  output = get_option(\"tinytable_save_output\", default = NULL),\n  overwrite = get_option(\"tinytable_save_overwrite\", default = FALSE)\n)\n\n\n\n\n\n\n\nx\n\n\nThe tinytable object to be saved.\n\n\n\n\noutput\n\n\nString or file path.\n\n\nIf output is \"markdown\", \"latex\", \"html\", \"html_portable\", \"typst\", or \"tabulator\", the table is returned in a string as an R object.\n\n\nIf output is a valid file path, the table is saved to file. The supported extensions are: .docx, .html, .png, .pdf, .tex, .typ, and .md (with aliases .txt, .Rmd and .qmd).\n\n\nIf output is \"html_portable\" or the global option tinytable_html_portable is TRUE, the images are included in the HTML as base64 encoded string instead of link to a local file.\n\n\n\n\n\n\noverwrite\n\n\nA logical value indicating whether to overwrite an existing file.\n\n\n\n\n\n\nA string with the table when output is a format, and the file path when output is a valid path.\n\n\n\n\n\n.pdf output requires a full LaTeX installation on the local computer.\n\n\n.png output requires the webshot2 package.\n\n\n.html self-contained files require the base64enc package.\n\n\n\n\n\ntinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, uses the special tblr, talltblr, and longtblr environments.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages. For standalone LaTeX documents, these commands should be inserted in the preamble manually:\nNote: Your document will fail to compile to PDF in Quarto if you enable caching and you use tinytable due to missing LaTeX headers. To avoid this problem, set the option #| cache: false for the chunk(s) where you use tinytable.\n\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- mtcars[1:4, 1:5]\n\nfn &lt;- file.path(tempdir(), \"test.html\")\ntt(x) |&gt; save_tt(fn, overwrite = TRUE)\n\nlibrary(tinytable)\nfilename &lt;- file.path(tempdir(), \"table.tex\")\ntt(mtcars[1:4, 1:4]) |&gt; save_tt(filename)",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`save_tt`"
    ]
  },
  {
    "objectID": "man/save_tt.html#save-a-tiny-table-to-file",
    "href": "man/save_tt.html#save-a-tiny-table-to-file",
    "title": "tinytable",
    "section": "",
    "text": "This function saves an object of class tinytable to a specified file and format, with an option to overwrite existing files.\n\n\n\nsave_tt(\n  x,\n  output = get_option(\"tinytable_save_output\", default = NULL),\n  overwrite = get_option(\"tinytable_save_overwrite\", default = FALSE)\n)\n\n\n\n\n\n\n\nx\n\n\nThe tinytable object to be saved.\n\n\n\n\noutput\n\n\nString or file path.\n\n\nIf output is \"markdown\", \"latex\", \"html\", \"html_portable\", \"typst\", or \"tabulator\", the table is returned in a string as an R object.\n\n\nIf output is a valid file path, the table is saved to file. The supported extensions are: .docx, .html, .png, .pdf, .tex, .typ, and .md (with aliases .txt, .Rmd and .qmd).\n\n\nIf output is \"html_portable\" or the global option tinytable_html_portable is TRUE, the images are included in the HTML as base64 encoded string instead of link to a local file.\n\n\n\n\n\n\noverwrite\n\n\nA logical value indicating whether to overwrite an existing file.\n\n\n\n\n\n\nA string with the table when output is a format, and the file path when output is a valid path.\n\n\n\n\n\n.pdf output requires a full LaTeX installation on the local computer.\n\n\n.png output requires the webshot2 package.\n\n\n.html self-contained files require the base64enc package.\n\n\n\n\n\ntinytable uses the tabularray package from your LaTeX distribution to draw tables. tabularray, in turn, uses the special tblr, talltblr, and longtblr environments.\nWhen rendering a document from Quarto or Rmarkdown directly to PDF, tinytable will populate the LaTeX preamble automatically with all the required packages. For standalone LaTeX documents, these commands should be inserted in the preamble manually:\nNote: Your document will fail to compile to PDF in Quarto if you enable caching and you use tinytable due to missing LaTeX headers. To avoid this problem, set the option #| cache: false for the chunk(s) where you use tinytable.\n\n\\usepackage{tabularray}\n\\usepackage{float}\n\\usepackage{graphicx}\n\\usepackage{rotating}\n\\usepackage[normalem]{ulem}\n\\UseTblrLibrary{booktabs}\n\\UseTblrLibrary{siunitx}\n\\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n\\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n\\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n\n\n\n\n\nOptions can be set with options() and change the default behavior of tinytable. For example:\n\noptions(tinytable_tt_digits = 4)\ntt(head(iris))\n\n\nYou can set options in a script or via .Rprofile. Note: be cautious with .Rprofile settings as they may affect reproducibility.\n\n\n\n\ntinytable_tt_digits\n\n\ntinytable_tt_caption\n\n\ntinytable_tt_notes\n\n\ntinytable_tt_width\n\n\ntinytable_tt_theme\n\n\ntinytable_tt_rownames\n\n\n\n\n\ntinytable_format_digits\n\n\ntinytable_format_num_fmt\n\n\ntinytable_format_num_zero\n\n\ntinytable_format_num_suffix\n\n\ntinytable_format_num_mark_big\n\n\ntinytable_format_num_mark_dec\n\n\ntinytable_format_date\n\n\ntinytable_format_bool\n\n\ntinytable_format_other\n\n\ntinytable_format_replace\n\n\ntinytable_format_escape\n\n\ntinytable_format_markdown\n\n\ntinytable_format_quarto\n\n\ntinytable_format_fn\n\n\ntinytable_format_sprintf\n\n\n\n\n\ntinytable_save_overwrite\n\n\n\nPlacement:\n\n\ntinytable_theme_placement_float\n\n\ntinytable_theme_placement_horizontal\n\n\nResize:\n\n\ntinytable_theme_resize_width\n\n\ntinytable_theme_resize_direction\n\n\nMultipage:\n\n\ntinytable_theme_multipage_rowhead\n\n\ntinytable_theme_multipage_rowfoot\n\n\nTabular:\n\n\ntinytable_theme_tabular_style\n\n\n\n\n\ntinytable_print_output\n\n\n\n\n\n\ntinytable_html_mathjax: Insert MathJax scripts (warning: may conflict if MathJax is loaded elsewhere)\n\n\ntinytable_html_portable: Insert base64 encoded images directly in HTML for plot_tt()\n\n\ntinytable_html_engine: Default HTML engine (default: \"bootstrap\"). Set to \"tabulator\" to use interactive tables by default in HTML documents instead of static Bootstrap tables.\n\n\n\n\n\ntinytable_pdf_clean: Delete temporary and log files\n\n\ntinytable_pdf_engine: Choose between \"xelatex\", \"pdflatex\", \"lualatex\"\n\n\n\n\n\ntinytable_color_name_normalization: Enable/disable automatic color name processing (default: TRUE). When enabled, R color names recognized by col2rgb() are converted to hex format for consistent rendering across HTML, LaTeX, and Typst formats. If R color conversion fails, LaTeX color names are used as fallback. Colors explicitly supplied as hex values with \"#\" prefix are passed through unchanged. Set to FALSE to disable processing and pass color names unchanged.\n\n\n\nThe format_tt(quarto=TRUE) argument enables Quarto data processing with some limitations:\n\n\nThe  LaTeX macro may not process references and markdown as expected\n\n\nQuarto processing may conflict with tinytable styling/formatting\n\n\nOptions:\n\n\ntinytable_quarto_disable_processing: Disable Quarto cell processing\n\n\ntinytable_print_rstudio_notebook: Display tables \"inline\" or in \"viewer\" for RStudio notebooks\n\n\ntinytable_quarto_figure: Control Typst figure environment in Quarto\n\n\nExample of Quarto-specific code in cells:\n\nx &lt;- data.frame(Math = \"x^2^\", Citation = \"@Lovelace1842\")\nfn &lt;- function(z) sprintf(\"&lt;span data-qmd='%s'&gt;&lt;/span&gt;\", z)\ntt(x) |&gt; format_tt(i = 1, fn = fn)\n\n\nFor more details on Quarto table processing: https://quarto.org/docs/authoring/tables.html#disabling-quarto-table-processing\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- mtcars[1:4, 1:5]\n\nfn &lt;- file.path(tempdir(), \"test.html\")\ntt(x) |&gt; save_tt(fn, overwrite = TRUE)\n\nlibrary(tinytable)\nfilename &lt;- file.path(tempdir(), \"table.tex\")\ntt(mtcars[1:4, 1:4]) |&gt; save_tt(filename)",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`save_tt`"
    ]
  },
  {
    "objectID": "man/strip_tt.html",
    "href": "man/strip_tt.html",
    "title": "tinytable",
    "section": "",
    "text": "Strip elements from a Tiny Table\n\n\n\nstrip_tt(\n  x,\n  style = FALSE,\n  format = FALSE,\n  theme = FALSE,\n  notes = FALSE,\n  caption = FALSE,\n  group = FALSE,\n  bold = FALSE,\n  italic = FALSE,\n  monospace = FALSE,\n  underline = FALSE,\n  strikeout = FALSE,\n  color = FALSE,\n  background = FALSE,\n  fontsize = FALSE,\n  align = FALSE,\n  alignv = FALSE,\n  colspan = FALSE,\n  rowspan = FALSE,\n  indent = FALSE,\n  line = FALSE,\n  bootstrap_class = FALSE,\n  bootstrap_css = FALSE,\n  bootstrap_css_rule = FALSE,\n  tabularray_inner = FALSE,\n  tabularray_outer = FALSE,\n  width = FALSE\n)\n\n\n\n\n\n\n\nx\n\n\nA table object created by tt().\n\n\n\n\nstyle\n\n\nTRUE reverts style_tt().\n\n\n\n\nformat\n\n\nTRUE reverts format_tt().\n\n\n\n\ntheme\n\n\nTRUE reverts theme_tt().\n\n\n\n\nnotes\n\n\nTRUE reverts the effect of the notes argument from tt().\n\n\n\n\ncaption\n\n\nTRUE reverts the effect of the caption argument from tt().\n\n\n\n\ngroup\n\n\nTRUE reverts group_tt().\n\n\n\n\nbold\n\n\nTRUE reverts the effect of the bold argument from style_tt().\n\n\n\n\nitalic\n\n\nTRUE reverts the effect of the italic argument from style_tt().\n\n\n\n\nmonospace\n\n\nTRUE reverts the effect of the monospace argument from style_tt().\n\n\n\n\nunderline\n\n\nTRUE reverts the effect of the underline argument from style_tt().\n\n\n\n\nstrikeout\n\n\nTRUE reverts the effect of the strikeout argument from style_tt().\n\n\n\n\ncolor\n\n\nTRUE reverts the effect of the color argument from style_tt().\n\n\n\n\nbackground\n\n\nTRUE reverts the effect of the background argument from style_tt().\n\n\n\n\nfontsize\n\n\nTRUE reverts the effect of the fontsize argument from style_tt().\n\n\n\n\nalign\n\n\nTRUE reverts the effect of the align argument from style_tt().\n\n\n\n\nalignv\n\n\nTRUE reverts the effect of the alignv argument from style_tt().\n\n\n\n\ncolspan\n\n\nTRUE reverts the effect of the colspan argument from style_tt().\n\n\n\n\nrowspan\n\n\nTRUE reverts the effect of the rowspan argument from style_tt().\n\n\n\n\nindent\n\n\nTRUE reverts the effect of the indent argument from style_tt().\n\n\n\n\nline\n\n\nTRUE reverts the effect of the line argument from style_tt().\n\n\n\n\nbootstrap_class\n\n\nTRUE reverts the effect of the bootstrap_class argument from style_tt().\n\n\n\n\nbootstrap_css\n\n\nTRUE reverts the effect of the bootstrap_css argument from style_tt().\n\n\n\n\nbootstrap_css_rule\n\n\nTRUE reverts the effect of the bootstrap_css_rule argument from style_tt().\n\n\n\n\ntabularray_inner\n\n\nTRUE reverts the effect of the tabularray_inner argument from style_tt().\n\n\n\n\ntabularray_outer\n\n\nTRUE reverts the effect of the tabularray_outer argument from style_tt().\n\n\n\n\nwidth\n\n\nTRUE reverts the effect of the width argument from tt().\n\n\n\n\n\n\nAn object of class tt representing the table with stripped styling."
  },
  {
    "objectID": "man/strip_tt.html#strip-elements-from-a-tiny-table",
    "href": "man/strip_tt.html#strip-elements-from-a-tiny-table",
    "title": "tinytable",
    "section": "",
    "text": "Strip elements from a Tiny Table\n\n\n\nstrip_tt(\n  x,\n  style = FALSE,\n  format = FALSE,\n  theme = FALSE,\n  notes = FALSE,\n  caption = FALSE,\n  group = FALSE,\n  bold = FALSE,\n  italic = FALSE,\n  monospace = FALSE,\n  underline = FALSE,\n  strikeout = FALSE,\n  color = FALSE,\n  background = FALSE,\n  fontsize = FALSE,\n  align = FALSE,\n  alignv = FALSE,\n  colspan = FALSE,\n  rowspan = FALSE,\n  indent = FALSE,\n  line = FALSE,\n  bootstrap_class = FALSE,\n  bootstrap_css = FALSE,\n  bootstrap_css_rule = FALSE,\n  tabularray_inner = FALSE,\n  tabularray_outer = FALSE,\n  width = FALSE\n)\n\n\n\n\n\n\n\nx\n\n\nA table object created by tt().\n\n\n\n\nstyle\n\n\nTRUE reverts style_tt().\n\n\n\n\nformat\n\n\nTRUE reverts format_tt().\n\n\n\n\ntheme\n\n\nTRUE reverts theme_tt().\n\n\n\n\nnotes\n\n\nTRUE reverts the effect of the notes argument from tt().\n\n\n\n\ncaption\n\n\nTRUE reverts the effect of the caption argument from tt().\n\n\n\n\ngroup\n\n\nTRUE reverts group_tt().\n\n\n\n\nbold\n\n\nTRUE reverts the effect of the bold argument from style_tt().\n\n\n\n\nitalic\n\n\nTRUE reverts the effect of the italic argument from style_tt().\n\n\n\n\nmonospace\n\n\nTRUE reverts the effect of the monospace argument from style_tt().\n\n\n\n\nunderline\n\n\nTRUE reverts the effect of the underline argument from style_tt().\n\n\n\n\nstrikeout\n\n\nTRUE reverts the effect of the strikeout argument from style_tt().\n\n\n\n\ncolor\n\n\nTRUE reverts the effect of the color argument from style_tt().\n\n\n\n\nbackground\n\n\nTRUE reverts the effect of the background argument from style_tt().\n\n\n\n\nfontsize\n\n\nTRUE reverts the effect of the fontsize argument from style_tt().\n\n\n\n\nalign\n\n\nTRUE reverts the effect of the align argument from style_tt().\n\n\n\n\nalignv\n\n\nTRUE reverts the effect of the alignv argument from style_tt().\n\n\n\n\ncolspan\n\n\nTRUE reverts the effect of the colspan argument from style_tt().\n\n\n\n\nrowspan\n\n\nTRUE reverts the effect of the rowspan argument from style_tt().\n\n\n\n\nindent\n\n\nTRUE reverts the effect of the indent argument from style_tt().\n\n\n\n\nline\n\n\nTRUE reverts the effect of the line argument from style_tt().\n\n\n\n\nbootstrap_class\n\n\nTRUE reverts the effect of the bootstrap_class argument from style_tt().\n\n\n\n\nbootstrap_css\n\n\nTRUE reverts the effect of the bootstrap_css argument from style_tt().\n\n\n\n\nbootstrap_css_rule\n\n\nTRUE reverts the effect of the bootstrap_css_rule argument from style_tt().\n\n\n\n\ntabularray_inner\n\n\nTRUE reverts the effect of the tabularray_inner argument from style_tt().\n\n\n\n\ntabularray_outer\n\n\nTRUE reverts the effect of the tabularray_outer argument from style_tt().\n\n\n\n\nwidth\n\n\nTRUE reverts the effect of the width argument from tt().\n\n\n\n\n\n\nAn object of class tt representing the table with stripped styling."
  },
  {
    "objectID": "man/rbind2-tinytable-tinytable-method.html",
    "href": "man/rbind2-tinytable-tinytable-method.html",
    "title": "tinytable",
    "section": "",
    "text": "Combine tinytable objects by rows (vertically)\n\n\n\n## S4 method for signature 'tinytable,tinytable'\nrbind2(x, y, use_names = TRUE, headers = TRUE, ...)\n\n\n\n\n\n\n\nx\n\n\ntinytable object\n\n\n\n\ny\n\n\ntinytable object\n\n\n\n\nuse_names\n\n\n‘TRUE’ binds by matching column name, ‘FALSE’ by position\n\n\n\n\nheaders\n\n\nLogical. TRUE inserts the colnames of y as an extra row between the two tables.\n\n\n\n\n…\n\n\nAdditional arguments are ignored.\n\n\n\n\n\n\nformat_tt() calls applied to x or y are evaluated before binding, to allow distinct formatting for each panel.\nCalls to other tinytable functions such as style_tt() or group_tt() are ignored when applied to x or y. These functions should be applied to the final table instead.\nInformation in these S4 slots is carried over from x to the combined table:\n\n\nx@output\n\n\nx@caption\n\n\nx@width\n\n\nInformation in these S4 slots is concatenated and carried over to the combined table:\n\n\nc(x@notes, y@notes)\n\n\nThis function relies on the rbindlist() function from the data.table package.\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- tt(mtcars[1:3, 1:2], caption = \"Combine two tiny tables.\")\ny &lt;- tt(mtcars[4:5, 8:10])\n\n# rbind() does not support additional aarguments\n# rbind2() supports additional arguments\n\n# basic combination\nrbind(x, y)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  vs\n                  am\n                  gear\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\nrbind(x, y) |&gt; format_tt(replace = \"\")\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                   \n                   \n                   \n                \n                \n                  21.0\n                  6\n                   \n                   \n                   \n                \n                \n                  22.8\n                  4\n                   \n                   \n                   \n                \n                \n                   \n                   \n                  vs\n                  am\n                  gear\n                \n                \n                   \n                   \n                  1\n                  0\n                  3\n                \n                \n                   \n                   \n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n# omit y header\nrbind2(x, y, headers = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n# bind by position rather than column names\nrbind2(x, y, use_names = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                \n                \n                  vs\n                  am\n                  gear\n                \n                \n                  1\n                  0\n                  3\n                \n                \n                  0\n                  0\n                  3",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`rbind2`"
    ]
  },
  {
    "objectID": "man/rbind2-tinytable-tinytable-method.html#combine-tinytable-objects-by-rows-vertically",
    "href": "man/rbind2-tinytable-tinytable-method.html#combine-tinytable-objects-by-rows-vertically",
    "title": "tinytable",
    "section": "",
    "text": "Combine tinytable objects by rows (vertically)\n\n\n\n## S4 method for signature 'tinytable,tinytable'\nrbind2(x, y, use_names = TRUE, headers = TRUE, ...)\n\n\n\n\n\n\n\nx\n\n\ntinytable object\n\n\n\n\ny\n\n\ntinytable object\n\n\n\n\nuse_names\n\n\n‘TRUE’ binds by matching column name, ‘FALSE’ by position\n\n\n\n\nheaders\n\n\nLogical. TRUE inserts the colnames of y as an extra row between the two tables.\n\n\n\n\n…\n\n\nAdditional arguments are ignored.\n\n\n\n\n\n\nformat_tt() calls applied to x or y are evaluated before binding, to allow distinct formatting for each panel.\nCalls to other tinytable functions such as style_tt() or group_tt() are ignored when applied to x or y. These functions should be applied to the final table instead.\nInformation in these S4 slots is carried over from x to the combined table:\n\n\nx@output\n\n\nx@caption\n\n\nx@width\n\n\nInformation in these S4 slots is concatenated and carried over to the combined table:\n\n\nc(x@notes, y@notes)\n\n\nThis function relies on the rbindlist() function from the data.table package.\n\n\n\n\nlibrary(\"tinytable\")\n\nlibrary(tinytable)\nx &lt;- tt(mtcars[1:3, 1:2], caption = \"Combine two tiny tables.\")\ny &lt;- tt(mtcars[4:5, 8:10])\n\n# rbind() does not support additional aarguments\n# rbind2() supports additional arguments\n\n# basic combination\nrbind(x, y)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  vs\n                  am\n                  gear\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\nrbind(x, y) |&gt; format_tt(replace = \"\")\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                   \n                   \n                   \n                \n                \n                  21.0\n                  6\n                   \n                   \n                   \n                \n                \n                  22.8\n                  4\n                   \n                   \n                   \n                \n                \n                   \n                   \n                  vs\n                  am\n                  gear\n                \n                \n                   \n                   \n                  1\n                  0\n                  3\n                \n                \n                   \n                   \n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n# omit y header\nrbind2(x, y, headers = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n# bind by position rather than column names\nrbind2(x, y, use_names = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                gear\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  NA\n                \n                \n                  21.0\n                  6\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                \n                \n                  vs\n                  am\n                  gear\n                \n                \n                  1\n                  0\n                  3\n                \n                \n                  0\n                  0\n                  3",
    "crumbs": [
      "Tutorial (PDF)",
      "Functions",
      "`rbind2`"
    ]
  },
  {
    "objectID": "vignettes/interactive.html",
    "href": "vignettes/interactive.html",
    "title": "Interactive tables",
    "section": "",
    "text": "Experimental Feature\n\n\n\nThe Tabulator.js integration is experimental and the API may change in future versions. Please report any issues on GitHub.\n\n\nThe tinytable package supports creating interactive tables using the Tabulator.js library. Tabulator is a powerful JavaScript library that provides features like\n\nSorting\nFiltering\nPagination\nThemes\nData export\nReal-time data editing in the browser\nAccessibility features (ARIA compliant)\n\n\n\nTo create an interactive table, use output = \"tabulator\" when printing your table:\n\nlibrary(tinytable)\ndat &lt;- head(iris)\ntt(dat) |&gt; print(\"tabulator\")\n\nTo save the table to file, we can use the save_tt() function. One issue to consider, however, is that tinytable supports two types of HTML output: tabulator and bootstrap. To select the default HTML engine, users can set a global option:\n\noptions(tinytable_html_engine = \"tabulator\")\ntt(dat) |&gt; save_tt(\"/path/to/your/file.html\")\n\nIn notebooks like Quarto or R markdown, tinytable will automatically create an HTML when appropriate. Whenn the tinytable_html_engine option is set to \"tabulator\", the table will be rendered using Tabulator.js.\n\ndat &lt;- data.frame(\n  city = c(\"Montréal\", \"Toronto\", \"Vancouver\"),\n  salary = c(14002.22, 201399.11, 80188.38),\n  random = c(1.43402, 201.399, 0.134588),\n  date = as.Date(sample(1:1000, 3), origin = \"1970-01-01\"),\n  best = c(TRUE, FALSE, FALSE)\n)\n\ntt(dat)\n\n\n\n\n  \n    \n    \n    tinytable_9oyknxk6zpdb4p4ifptm\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\n\n\n\ntinytable includes a built-in theme to add pagination, sorting, and filtering capabilities to a Tabulator table. This is particularly useful for large datasets.\nTo apply a theme, call the theme_tt() function with the \"tabulator\" argument. See ?theme_tt for a list of arguments that can be used to customize the number of pagination rows, behaviour of the search bar, and various other elements.\nTry typing the letters “vir” in the search box to filter the iris dataset and find the Virginica flowers.\n\ntt(iris) |&gt; theme_tt(\"tabulator\", pagination = c(5, 10, 50))\n\n\n\n\n  \n    \n    \n    tinytable_myyrvm710ypv0xhdc86x\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\n\n\n\nFormatting numeric and date columns in Tabulator tables requires us to use the Javascript functionality rather than tinytable’s internals, if we want to preserve functionality like sorting.\nIn particular, for numeric values, format_tt() is always set to num_fmt=\"decimal\".\n\ntt(dat) |&gt;\n  format_tt(j = \"salary\", digits = 2, num_mark_big = \",\") |&gt;\n  format_tt(j = \"random\", digits = 4)\n\n\n\n\n  \n    \n    \n    tinytable_2at9hs6awrvurqgwdfiw\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nFor dates,\n\ntt(dat) |&gt; format_tt(j = \"date\", date = \"M/d/yyyy\")\n\n\n\n\n  \n    \n    \n    tinytable_ovqbsf3mqbvnucclltlx\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nFor dates, tabulator uses Luxon date format tokens, not R’s strptime format. Common patterns include:\n\n\n\n\n\n  \n    \n    \n    tinytable_755lvha8tpk6c0er0chr\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\n\n\n\nSupport for style_tt() is very limited in interactive tables. For now, only the align and alignv arguments of that function are supported.\n\ntt(dat) |&gt; style_tt(align = \"r\")\n\n\n\n\n  \n    \n    \n    tinytable_3z6drx2mt7fm8eyvszie\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\n\n\n\nFor more advanced styling, you can add custom CSS rules using the css_rule argument in theme_tt(). The CSS rule must include at least one $TINYTABLE_ID placeholder, which gets replaced with the unique table identifier to ensure styles only apply to that specific table.\n\ncss_rule &lt;- \"\n$TINYTABLE_ID .tabulator-header .tabulator-col {\n  background-color: black;\n  color: white;\n}\n\"\ntt(dat) |&gt; \n  theme_tt(\"tabulator\", css_rule = css_rule)\n\n\n\n\n  \n    \n    \n    tinytable_ug5n0uzd127cn9zemrfm\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\n\n\n\nTabulator ships with multiple complete CSS style sheets. The default in tinytable is Bootstrap 5, but you can customize the appearance using the theme_tt() function (when available). Alternatives include \"default\", \"simple\", \"midnight\", \"modern\", \"site\", \"site_dark\", \"bootstrap3\", \"bootstrap4\", \"bootstrap5\", \"semanticui\", \"bulma\", and \"materialize\".\n\ntt(iris) |&gt; theme_tt(\"tabulator\", stylesheet = \"semanticui\")\n\n\n\n\n\n\n\nNote\n\n\n\nTo use a theme, the HTML file must load a style sheet globally in the document. Unfortunately, this means that tinytable cannot apply a Tabulator style sheet to a single table in documents with multiple tables. The style that applies is always the last one loaded in the document.\n\n\n\n\n\nThe theme_tt() function accepts options and columns arguments for advanced customization of Tabulator tables.\nThe options argument allows you to override any default Tabulator configuration. The columns argument lets you completely customize column definitions, including formatters, styling, and behavior.\nIn this example, we redefine how columns are formatted.\n\ndat &lt;- data.frame(\n  city = c(\"Toronto\", \"Montreal\", \"Vancouver\"),\n  salary = c(75000, 68000, 82000),\n  best = c(FALSE, TRUE, FALSE)\n)\n\ncustom_columns &lt;- '\n[\n  {\n    \"title\": \"City\", \n    \"field\": \"city\"\n  }, \n  {\n    \"title\": \"Best city\", \n    \"field\": \"best\", \n    \"formatter\": \"tickCross\"\n  }, \n  {\n    \"title\": \"Salary\", \n    \"field\": \"salary\", \n    \"formatter\": \"money\", \n    \"formatterParams\": {\"precision\": 0, \"symbol\": \"$\"}\n  },\n]'\n\ntt(dat) |&gt; theme_tt(\"tabulator\", columns = custom_columns)\n\n\n\n\n  \n    \n    \n    tinytable_rufcjg7jqhobwwjff4eb\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nAnd now we change more options, such as the layout and height of the table:\n\nopts &lt;- \"\n  layout: 'fitColumns',\n  height: '200px'\n\"\n\ntt(dat) |&gt; theme_tt(\"tabulator\", options = opts)\n\n\n\n\n  \n    \n    \n    tinytable_actsa7u0mkcsbcckul06",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#drawing-printing-and-saving",
    "href": "vignettes/interactive.html#drawing-printing-and-saving",
    "title": "Interactive tables",
    "section": "",
    "text": "To create an interactive table, use output = \"tabulator\" when printing your table:\n\nlibrary(tinytable)\ndat &lt;- head(iris)\ntt(dat) |&gt; print(\"tabulator\")\n\nTo save the table to file, we can use the save_tt() function. One issue to consider, however, is that tinytable supports two types of HTML output: tabulator and bootstrap. To select the default HTML engine, users can set a global option:\n\noptions(tinytable_html_engine = \"tabulator\")\ntt(dat) |&gt; save_tt(\"/path/to/your/file.html\")\n\nIn notebooks like Quarto or R markdown, tinytable will automatically create an HTML when appropriate. Whenn the tinytable_html_engine option is set to \"tabulator\", the table will be rendered using Tabulator.js.\n\ndat &lt;- data.frame(\n  city = c(\"Montréal\", \"Toronto\", \"Vancouver\"),\n  salary = c(14002.22, 201399.11, 80188.38),\n  random = c(1.43402, 201.399, 0.134588),\n  date = as.Date(sample(1:1000, 3), origin = \"1970-01-01\"),\n  best = c(TRUE, FALSE, FALSE)\n)\n\ntt(dat)\n\n\n\n\n  \n    \n    \n    tinytable_9oyknxk6zpdb4p4ifptm",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#pagination-and-filtering",
    "href": "vignettes/interactive.html#pagination-and-filtering",
    "title": "Interactive tables",
    "section": "",
    "text": "tinytable includes a built-in theme to add pagination, sorting, and filtering capabilities to a Tabulator table. This is particularly useful for large datasets.\nTo apply a theme, call the theme_tt() function with the \"tabulator\" argument. See ?theme_tt for a list of arguments that can be used to customize the number of pagination rows, behaviour of the search bar, and various other elements.\nTry typing the letters “vir” in the search box to filter the iris dataset and find the Virginica flowers.\n\ntt(iris) |&gt; theme_tt(\"tabulator\", pagination = c(5, 10, 50))\n\n\n\n\n  \n    \n    \n    tinytable_myyrvm710ypv0xhdc86x",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#format",
    "href": "vignettes/interactive.html#format",
    "title": "Interactive tables",
    "section": "",
    "text": "Formatting numeric and date columns in Tabulator tables requires us to use the Javascript functionality rather than tinytable’s internals, if we want to preserve functionality like sorting.\nIn particular, for numeric values, format_tt() is always set to num_fmt=\"decimal\".\n\ntt(dat) |&gt;\n  format_tt(j = \"salary\", digits = 2, num_mark_big = \",\") |&gt;\n  format_tt(j = \"random\", digits = 4)\n\n\n\n\n  \n    \n    \n    tinytable_2at9hs6awrvurqgwdfiw\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nFor dates,\n\ntt(dat) |&gt; format_tt(j = \"date\", date = \"M/d/yyyy\")\n\n\n\n\n  \n    \n    \n    tinytable_ovqbsf3mqbvnucclltlx\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nFor dates, tabulator uses Luxon date format tokens, not R’s strptime format. Common patterns include:\n\n\n\n\n\n  \n    \n    \n    tinytable_755lvha8tpk6c0er0chr",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#style",
    "href": "vignettes/interactive.html#style",
    "title": "Interactive tables",
    "section": "",
    "text": "Support for style_tt() is very limited in interactive tables. For now, only the align and alignv arguments of that function are supported.\n\ntt(dat) |&gt; style_tt(align = \"r\")\n\n\n\n\n  \n    \n    \n    tinytable_3z6drx2mt7fm8eyvszie",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#css",
    "href": "vignettes/interactive.html#css",
    "title": "Interactive tables",
    "section": "",
    "text": "For more advanced styling, you can add custom CSS rules using the css_rule argument in theme_tt(). The CSS rule must include at least one $TINYTABLE_ID placeholder, which gets replaced with the unique table identifier to ensure styles only apply to that specific table.\n\ncss_rule &lt;- \"\n$TINYTABLE_ID .tabulator-header .tabulator-col {\n  background-color: black;\n  color: white;\n}\n\"\ntt(dat) |&gt; \n  theme_tt(\"tabulator\", css_rule = css_rule)\n\n\n\n\n  \n    \n    \n    tinytable_ug5n0uzd127cn9zemrfm",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#style-sheets",
    "href": "vignettes/interactive.html#style-sheets",
    "title": "Interactive tables",
    "section": "",
    "text": "Tabulator ships with multiple complete CSS style sheets. The default in tinytable is Bootstrap 5, but you can customize the appearance using the theme_tt() function (when available). Alternatives include \"default\", \"simple\", \"midnight\", \"modern\", \"site\", \"site_dark\", \"bootstrap3\", \"bootstrap4\", \"bootstrap5\", \"semanticui\", \"bulma\", and \"materialize\".\n\ntt(iris) |&gt; theme_tt(\"tabulator\", stylesheet = \"semanticui\")\n\n\n\n\n\n\n\nNote\n\n\n\nTo use a theme, the HTML file must load a style sheet globally in the document. Unfortunately, this means that tinytable cannot apply a Tabulator style sheet to a single table in documents with multiple tables. The style that applies is always the last one loaded in the document.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/interactive.html#options-and-columns",
    "href": "vignettes/interactive.html#options-and-columns",
    "title": "Interactive tables",
    "section": "",
    "text": "The theme_tt() function accepts options and columns arguments for advanced customization of Tabulator tables.\nThe options argument allows you to override any default Tabulator configuration. The columns argument lets you completely customize column definitions, including formatters, styling, and behavior.\nIn this example, we redefine how columns are formatted.\n\ndat &lt;- data.frame(\n  city = c(\"Toronto\", \"Montreal\", \"Vancouver\"),\n  salary = c(75000, 68000, 82000),\n  best = c(FALSE, TRUE, FALSE)\n)\n\ncustom_columns &lt;- '\n[\n  {\n    \"title\": \"City\", \n    \"field\": \"city\"\n  }, \n  {\n    \"title\": \"Best city\", \n    \"field\": \"best\", \n    \"formatter\": \"tickCross\"\n  }, \n  {\n    \"title\": \"Salary\", \n    \"field\": \"salary\", \n    \"formatter\": \"money\", \n    \"formatterParams\": {\"precision\": 0, \"symbol\": \"$\"}\n  },\n]'\n\ntt(dat) |&gt; theme_tt(\"tabulator\", columns = custom_columns)\n\n\n\n\n  \n    \n    \n    tinytable_rufcjg7jqhobwwjff4eb\n    \n  \n  \n\n\n    \n      \n      \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n\n  \n\n\n\n\n\nAnd now we change more options, such as the layout and height of the table:\n\nopts &lt;- \"\n  layout: 'fitColumns',\n  height: '200px'\n\"\n\ntt(dat) |&gt; theme_tt(\"tabulator\", options = opts)\n\n\n\n\n  \n    \n    \n    tinytable_actsa7u0mkcsbcckul06",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Interactive tables"
    ]
  },
  {
    "objectID": "vignettes/notebooks.html",
    "href": "vignettes/notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "library(tinytable)\n\n\n\n\n\nTo define cross-references in Quarto notebooks, users should not use the caption argument. Instead, they should use the label and tbl-cap Quarto chunk options. This is a minimal example:\n---\nformat: html\n---\n\nWe see in @tbl-iris the first few rows of the iris dataset.\n\n```{r}\n#| label: tbl-iris\n#| tbl-cap: First few rows of the iris dataset.\nlibrary(tinytable)\ntt(head(iris))\n```\n\n\n\nIn Quarto, it is possible to create a custom crossref type for things like appendix tables. One challenge, is that LaTeX will not allow users to nest a tblr environment, inside a table environment, inside the new environment that Quarto creates for the crossref. Therefore, when rendering a table to LaTeX/PDF, it is important to drop the \\begin{table} environment. This can be done using the theme_tt() function.\nIn the example below, we call theme_tt() explicitly for a single table, but the themes vignette shows how to set a global theme using the tinytable_tt_theme option.\n---\ntitle: \"Crossref Example\"\nformat:\n  pdf: default\n  html: default\ncrossref:\n  custom:\n    - kind: float\n      key: apptbl\n      latex-env: apptbl\n      reference-prefix: Table A\n      space-before-numbering: false\n      latex-list-of-description: Appendix Table\napptbl-cap-location: top\n---\n\nSee @apptbl-testing\n\n::: {#apptbl-testing}\n\n```{r}\nlibrary(tinytable)\n\ntt(mtcars[1:5, ]) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\n```\n\nCaption goes here.\n\n:::\n\n\n\nQuarto automatically applies some data processing to the content of the tables it renders. By default, tinytable disables this processing, because it can enter in conflict with styling and formatting features of the package.\nTo enable Quarto data processing, we can use the quarto argument of the format_tt() function. This argument allows users to mark certain cells explicitly for processing by Quarto, by wrapping them in a special “span” called “data-qmd”, supported by Quarto:\n\nk &lt;- data.frame(Thing = \"qwerty\", Citation = \"@Lovelace1842\")\n\ntt(k) |&gt; format_tt(quarto = TRUE)\n\n\n\n    \n\n    \n    \n      \n\n\n\nThing\nCitation\n\n\n\n\nqwerty\n@Lovelace1842\n\n\n\n\n    \n\n\n\nSome users may want to apply Quarto data processing to all tables. This can be done with themes:\n\ntheme_quarto &lt;- function(x) format_tt(x, quarto = TRUE)\noptions(tinytable_tt_theme = theme_quarto)\n\ntt(k)\n\n\n\n    \n\n    \n    \n      \n\n\n\nThing\nCitation\n\n\n\n\nqwerty\n@Lovelace1842\n\n\n\n\n    \n\n\n\nBack to normal:\n\noptions(tinytable_tt_theme = NULL)\n\nAlternatively, users can set a global option to process all tables in Quarto, but they will then have to mark each cell with special content using format_tt(quarto):\n\noptions(tinytable_quarto_disable_processing = FALSE)\n\nx &lt;- mtcars[1:5, 1:5]\ntt(x)\n\n\n\n    \n\n    \n    \n      \n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\n\n\n\n\n21.0\n6\n160\n110\n3.90\n\n\n21.0\n6\n160\n110\n3.90\n\n\n22.8\n4\n108\n93\n3.85\n\n\n21.4\n6\n258\n110\n3.08\n\n\n18.7\n8\n360\n175\n3.15\n\n\n\n\n    \n\n\n\nNotice that Quarto is now processing the table, so we lose the default tinytable theme and get the default striped Quarto look.\nBack to normal:\n\noptions(tinytable_quarto_disable_processing = TRUE)\n\n\n\n\nWith version 0.4.0 of tinytable and versions above 1.6 of Quarto—only available as a pre-release build at the time of writing— users can specify sub-captions for tables. This is done by adding a tbl-subcap chunk option to the table chunk. We also need to use a tinytable theme to remove built-in table structure and let Quarto handle the table construction. Here is a simple example document:\n---\nformat: pdf\n---\n\nSee @tbl-example, @tbl-example-1, or @tbl-example-2.\n\n```{r}\n#| label: tbl-example\n#| tbl-cap: \"Example\"\n#| tbl-subcap:\n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n\nlibrary(tinytable)\ntt(head(cars)) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\ntt(head(pressure)) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\n```\n\n\n\nQuarto can create slides using the RevealJS framework. Unfortunately, RevealJS does not include Bootstrap, so tinytable will not be as pretty as in other HTML documents, and the font size will often be too big.\nA good workaround is to use the theme_revealjs() function. For a one time use:\n```{r}\nlibrary(tinytable)\ntt(head(iris)) |&gt; theme_tt(\"revealjs\")\n```\nTo style all tables in a slide show, use a global option:\n```{r}\noptions(tinytable_tt_theme = \"revealjs\")\ntt(head(iris))\n```\nTo select a specific font size, use the fontsize argument:\n# Slide title\n\nThis is a nice table:\n\n```{r}\nlibrary(tinytable)\noptions(tinytable_tt_theme = \\(x) theme_tt(x, \"revealjs\", fontsize = .5))\ntt(head(iris))\n```\n\n\n\nIn some cases, the user wants to print a single table multiple times with different styles in a single HTML document. This will sometimes cause issues, because the style_tt() function inserts several javascript functions to modify the same table, thus creating conflicts. A simple solution is to change the unique ID of the table object manually.\nConsider this RevalJS slideshow in which we sequentially highlight different rows of the data frame:\n---\nformat: revealjs\n---\n\n## Page 1\n\n```{r}\nlibrary(tinytable)\n\ntab &lt;- tt(head(iris))\ntab\n```\n\n## Page 2\n\n```{r}\ntab@id &lt;- \"table_01\"\ntab |&gt; style_tt(i = 3, background = \"skyblue\")\n```\n\n## Page 3\n\n```{r}\ntab@id &lt;- \"table_02\"\ntab |&gt; style_tt(i = 5, background = \"orange\")\n```\n\n\n\nSee the Tips and Tricks on Typst for important notes on using Typst in Quarto documents.\n\n\n\n\n\n\nIn some cases, Rmarkdown automatically modifies the URL that tinytable uses to load MathJax and render mathematical content. One alternative is to call the MathJax script manually as described in the math section of the documentation.\nAlternatively, you can specify the MathJax URL in the YAML header of your notebook, and use an appropriate global option.\n---\noutput:\n  html_document:\n    self_contained: true\n    math_method:\n      engine: mathjax\n      url: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n---\n\n```{r}\nlibrary(tinytable)\noptions(tinytable_html_mathjax = TRUE)\n\ntbl &lt;- tibble::tribble(\n  ~Mathematics, ~Physics,\n  \"function, $f (x)$\", \"potential energy, $P(x)$\",\n  \"derivative, $f\\\\prime (x)$\", \"force, $F(x) = -P\\\\prime(x)$\",\n  \"$\\\\min_x f(x) \\\\implies f\\\\prime (x) = 0$\",\n  \"equilibrium, $\\\\min_x P(x) \\\\implies F (x) = 0$\"\n)\n\ntt(tbl)\n```\n\n\n\npapaja is a package to assist in the preparation of APA manuscripts. Cross-references can be a bit challenging to implement when using this package with tinytable. When the target format is PDF, one workaround is to use raw LaTeX code to make renferences and labels.\nFor example:\n---\noutput            : \n  papaja::apa6_pdf:\n    latex_engine: xelatex\n    fig_caption: yes\n    keep_tex: false\nheader-includes   :\n  - \\usepackage{tabularray}\n  - \\usepackage{graphicx}\n  - \\UseTblrLibrary{booktabs}\n  - \\UseTblrLibrary{siunitx}\n  - \\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n  - \\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n  - \\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n  - \\usepackage{caption,fixltx2e}\n  - \\usepackage[table]{xcolor}\n---\n\n# tidytable\n\nTable \\ref{tab:tinytableref}\n\n```{r}\nlibrary(tinytable)\ntt(head(iris), caption = \"\\\\label{tab:tinytableref} Hello world!\") |&gt;\n  style_tt(color = \"blue\")\n```\n```{r}\n\n\n\n\n\n\nThe bookdown package uses a special syntax to handle cross-references, and it does not recognize tinytable objects as tables automatically. To include cross-references to tables, it is thus necessary to use the caption argument of tinytable::tt(), and to insert a bookdown label in that caption. Here is an example:\nTable \\@ref(tab:tinytableref)\n\n```{r}\nlibrary(tinytable)\ntt(head(iris), caption = \"(#tab:tinytableref) Hello world!\") |&gt;\n  style_tt(color = \"blue\")\n```\n\n\n\n\nlitedown is a lightweight version of R Markdown designed by Yihui Xie. tinytable supports litedown output in HTML, LaTeX, and Markdown formats.\n\n\n\n\n\n\nLaTeX Preamble\n\n\n\nLaTeX packages are not loaded automatically, so the user needs to add them manually to the YAML header, to ensure they get inserted in the preamble. See the “LaTeX preamble” section of ?tt for details.\n\n\n\nlibrary(tinytable)\nhead(iris) |&gt;\n    tt() |&gt;\n    style_tt(background = \"black\", color = \"white\")",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Notebooks"
    ]
  },
  {
    "objectID": "vignettes/notebooks.html#quarto",
    "href": "vignettes/notebooks.html#quarto",
    "title": "Notebooks",
    "section": "",
    "text": "To define cross-references in Quarto notebooks, users should not use the caption argument. Instead, they should use the label and tbl-cap Quarto chunk options. This is a minimal example:\n---\nformat: html\n---\n\nWe see in @tbl-iris the first few rows of the iris dataset.\n\n```{r}\n#| label: tbl-iris\n#| tbl-cap: First few rows of the iris dataset.\nlibrary(tinytable)\ntt(head(iris))\n```\n\n\n\nIn Quarto, it is possible to create a custom crossref type for things like appendix tables. One challenge, is that LaTeX will not allow users to nest a tblr environment, inside a table environment, inside the new environment that Quarto creates for the crossref. Therefore, when rendering a table to LaTeX/PDF, it is important to drop the \\begin{table} environment. This can be done using the theme_tt() function.\nIn the example below, we call theme_tt() explicitly for a single table, but the themes vignette shows how to set a global theme using the tinytable_tt_theme option.\n---\ntitle: \"Crossref Example\"\nformat:\n  pdf: default\n  html: default\ncrossref:\n  custom:\n    - kind: float\n      key: apptbl\n      latex-env: apptbl\n      reference-prefix: Table A\n      space-before-numbering: false\n      latex-list-of-description: Appendix Table\napptbl-cap-location: top\n---\n\nSee @apptbl-testing\n\n::: {#apptbl-testing}\n\n```{r}\nlibrary(tinytable)\n\ntt(mtcars[1:5, ]) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\n```\n\nCaption goes here.\n\n:::\n\n\n\nQuarto automatically applies some data processing to the content of the tables it renders. By default, tinytable disables this processing, because it can enter in conflict with styling and formatting features of the package.\nTo enable Quarto data processing, we can use the quarto argument of the format_tt() function. This argument allows users to mark certain cells explicitly for processing by Quarto, by wrapping them in a special “span” called “data-qmd”, supported by Quarto:\n\nk &lt;- data.frame(Thing = \"qwerty\", Citation = \"@Lovelace1842\")\n\ntt(k) |&gt; format_tt(quarto = TRUE)\n\n\n\n    \n\n    \n    \n      \n\n\n\nThing\nCitation\n\n\n\n\nqwerty\n@Lovelace1842\n\n\n\n\n    \n\n\n\nSome users may want to apply Quarto data processing to all tables. This can be done with themes:\n\ntheme_quarto &lt;- function(x) format_tt(x, quarto = TRUE)\noptions(tinytable_tt_theme = theme_quarto)\n\ntt(k)\n\n\n\n    \n\n    \n    \n      \n\n\n\nThing\nCitation\n\n\n\n\nqwerty\n@Lovelace1842\n\n\n\n\n    \n\n\n\nBack to normal:\n\noptions(tinytable_tt_theme = NULL)\n\nAlternatively, users can set a global option to process all tables in Quarto, but they will then have to mark each cell with special content using format_tt(quarto):\n\noptions(tinytable_quarto_disable_processing = FALSE)\n\nx &lt;- mtcars[1:5, 1:5]\ntt(x)\n\n\n\n    \n\n    \n    \n      \n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\n\n\n\n\n21.0\n6\n160\n110\n3.90\n\n\n21.0\n6\n160\n110\n3.90\n\n\n22.8\n4\n108\n93\n3.85\n\n\n21.4\n6\n258\n110\n3.08\n\n\n18.7\n8\n360\n175\n3.15\n\n\n\n\n    \n\n\n\nNotice that Quarto is now processing the table, so we lose the default tinytable theme and get the default striped Quarto look.\nBack to normal:\n\noptions(tinytable_quarto_disable_processing = TRUE)\n\n\n\n\nWith version 0.4.0 of tinytable and versions above 1.6 of Quarto—only available as a pre-release build at the time of writing— users can specify sub-captions for tables. This is done by adding a tbl-subcap chunk option to the table chunk. We also need to use a tinytable theme to remove built-in table structure and let Quarto handle the table construction. Here is a simple example document:\n---\nformat: pdf\n---\n\nSee @tbl-example, @tbl-example-1, or @tbl-example-2.\n\n```{r}\n#| label: tbl-example\n#| tbl-cap: \"Example\"\n#| tbl-subcap:\n#|   - \"Cars\"\n#|   - \"Pressure\"\n#| layout-ncol: 2\n\nlibrary(tinytable)\ntt(head(cars)) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\ntt(head(pressure)) |&gt; theme_tt(\"tabular\", style = \"tabularray\")\n```\n\n\n\nQuarto can create slides using the RevealJS framework. Unfortunately, RevealJS does not include Bootstrap, so tinytable will not be as pretty as in other HTML documents, and the font size will often be too big.\nA good workaround is to use the theme_revealjs() function. For a one time use:\n```{r}\nlibrary(tinytable)\ntt(head(iris)) |&gt; theme_tt(\"revealjs\")\n```\nTo style all tables in a slide show, use a global option:\n```{r}\noptions(tinytable_tt_theme = \"revealjs\")\ntt(head(iris))\n```\nTo select a specific font size, use the fontsize argument:\n# Slide title\n\nThis is a nice table:\n\n```{r}\nlibrary(tinytable)\noptions(tinytable_tt_theme = \\(x) theme_tt(x, \"revealjs\", fontsize = .5))\ntt(head(iris))\n```\n\n\n\nIn some cases, the user wants to print a single table multiple times with different styles in a single HTML document. This will sometimes cause issues, because the style_tt() function inserts several javascript functions to modify the same table, thus creating conflicts. A simple solution is to change the unique ID of the table object manually.\nConsider this RevalJS slideshow in which we sequentially highlight different rows of the data frame:\n---\nformat: revealjs\n---\n\n## Page 1\n\n```{r}\nlibrary(tinytable)\n\ntab &lt;- tt(head(iris))\ntab\n```\n\n## Page 2\n\n```{r}\ntab@id &lt;- \"table_01\"\ntab |&gt; style_tt(i = 3, background = \"skyblue\")\n```\n\n## Page 3\n\n```{r}\ntab@id &lt;- \"table_02\"\ntab |&gt; style_tt(i = 5, background = \"orange\")\n```\n\n\n\nSee the Tips and Tricks on Typst for important notes on using Typst in Quarto documents.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Notebooks"
    ]
  },
  {
    "objectID": "vignettes/notebooks.html#rmarkdown",
    "href": "vignettes/notebooks.html#rmarkdown",
    "title": "Notebooks",
    "section": "",
    "text": "In some cases, Rmarkdown automatically modifies the URL that tinytable uses to load MathJax and render mathematical content. One alternative is to call the MathJax script manually as described in the math section of the documentation.\nAlternatively, you can specify the MathJax URL in the YAML header of your notebook, and use an appropriate global option.\n---\noutput:\n  html_document:\n    self_contained: true\n    math_method:\n      engine: mathjax\n      url: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n---\n\n```{r}\nlibrary(tinytable)\noptions(tinytable_html_mathjax = TRUE)\n\ntbl &lt;- tibble::tribble(\n  ~Mathematics, ~Physics,\n  \"function, $f (x)$\", \"potential energy, $P(x)$\",\n  \"derivative, $f\\\\prime (x)$\", \"force, $F(x) = -P\\\\prime(x)$\",\n  \"$\\\\min_x f(x) \\\\implies f\\\\prime (x) = 0$\",\n  \"equilibrium, $\\\\min_x P(x) \\\\implies F (x) = 0$\"\n)\n\ntt(tbl)\n```\n\n\n\npapaja is a package to assist in the preparation of APA manuscripts. Cross-references can be a bit challenging to implement when using this package with tinytable. When the target format is PDF, one workaround is to use raw LaTeX code to make renferences and labels.\nFor example:\n---\noutput            : \n  papaja::apa6_pdf:\n    latex_engine: xelatex\n    fig_caption: yes\n    keep_tex: false\nheader-includes   :\n  - \\usepackage{tabularray}\n  - \\usepackage{graphicx}\n  - \\UseTblrLibrary{booktabs}\n  - \\UseTblrLibrary{siunitx}\n  - \\newcommand{\\tinytableTabularrayUnderline}[1]{\\underline{#1}}\n  - \\newcommand{\\tinytableTabularrayStrikeout}[1]{\\sout{#1}}\n  - \\NewTableCommand{\\tinytableDefineColor}[3]{\\definecolor{#1}{#2}{#3}}\n  - \\usepackage{caption,fixltx2e}\n  - \\usepackage[table]{xcolor}\n---\n\n# tidytable\n\nTable \\ref{tab:tinytableref}\n\n```{r}\nlibrary(tinytable)\ntt(head(iris), caption = \"\\\\label{tab:tinytableref} Hello world!\") |&gt;\n  style_tt(color = \"blue\")\n```\n```{r}",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Notebooks"
    ]
  },
  {
    "objectID": "vignettes/notebooks.html#bookdown",
    "href": "vignettes/notebooks.html#bookdown",
    "title": "Notebooks",
    "section": "",
    "text": "The bookdown package uses a special syntax to handle cross-references, and it does not recognize tinytable objects as tables automatically. To include cross-references to tables, it is thus necessary to use the caption argument of tinytable::tt(), and to insert a bookdown label in that caption. Here is an example:\nTable \\@ref(tab:tinytableref)\n\n```{r}\nlibrary(tinytable)\ntt(head(iris), caption = \"(#tab:tinytableref) Hello world!\") |&gt;\n  style_tt(color = \"blue\")\n```",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Notebooks"
    ]
  },
  {
    "objectID": "vignettes/notebooks.html#litedown",
    "href": "vignettes/notebooks.html#litedown",
    "title": "Notebooks",
    "section": "",
    "text": "litedown is a lightweight version of R Markdown designed by Yihui Xie. tinytable supports litedown output in HTML, LaTeX, and Markdown formats.\n\n\n\n\n\n\nLaTeX Preamble\n\n\n\nLaTeX packages are not loaded automatically, so the user needs to add them manually to the YAML header, to ensure they get inserted in the preamble. See the “LaTeX preamble” section of ?tt for details.\n\n\n\nlibrary(tinytable)\nhead(iris) |&gt;\n    tt() |&gt;\n    style_tt(background = \"black\", color = \"white\")",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Notebooks"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html",
    "href": "vignettes/tinytable.html",
    "title": "Tiny Tables",
    "section": "",
    "text": "tinytable is a small but powerful R package to draw HTML, LaTeX, Word, PDF, Markdown, and Typst tables. The interface is minimalist, but it gives users direct and convenient access to powerful frameworks to create endlessly customizable tables.\nInstall the latest version from R-Universe or CRAN:\n\ninstall.packages(\"tinytable\",\n  repos = c(\"https://vincentarelbundock.r-universe.dev\", \"https://cran.r-project.org\")\n)\n\nThis tutorial introduces the main functions of the package. It is also available as a single PDF document.\nLoad the library and set some global options:\n\nlibrary(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\n\nDraw a first table:\n\nx &lt;- mtcars[1:4, 1:5]\ntt(x)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\nThe width arguments indicating what proportion of the line width the table should cover. This argument accepts a number between 0 and 1 to control the whole table width, or a vector of numeric values between 0 and 1, representing each column.\n\ntt(x, width = 0.5)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, width = 1)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can control individual columns by supplying a vector. In that case, the sum of width elements determines the full table width. For example, this table takes 70% of available width, with the first column 3 times as large as the other ones.\n\ntt(x, width = c(.3, .1, .1, .1, .1))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen the sum of the width vector exceeds 1, it is automatically normalized to full-width. This is convenient when we only want to specify column width in relative terms:\n\ntt(x, width = c(3, 2, 1, 1, 1))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen specifying a table width, the text is automatically wrapped to appropriate size:\n\nlorem &lt;- data.frame(\n  Lorem = \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\",\n  Ipsum = \" Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\"\n)\n\ntt(lorem, width = 3 / 4)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Lorem\n                Ipsum\n              \n        \n        \n        \n                \n                  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n                  Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\n                \n        \n      \n    \n\n\n\nThe height argument controls the height of each row in em units:\n\ntt(mtcars[1:4, 1:5], height = 3)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nThe notes argument accepts single strings or named lists of strings:\n\nn &lt;- \"Fusce id ipsum consequat ante pellentesque iaculis eu a ipsum. Mauris id ex in nulla consectetur aliquam. In nec tempus diam. Aliquam arcu nibh, dapibus id ex vestibulum, feugiat consequat erat. Morbi feugiat dapibus malesuada. Quisque vel ullamcorper felis. Aenean a sem at nisi tempor pretium sit amet quis lacus.\"\n\ntt(lorem, notes = n, width = 1)\n\n\n\n    \n\n    \n    \n      A full-width table with wrapped text in cells and a footnote.\n        \n        \n              \n                Lorem\n                Ipsum\n              \n        \n        Fusce id ipsum consequat ante pellentesque iaculis eu a ipsum. Mauris id ex in nulla consectetur aliquam. In nec tempus diam. Aliquam arcu nibh, dapibus id ex vestibulum, feugiat consequat erat. Morbi feugiat dapibus malesuada. Quisque vel ullamcorper felis. Aenean a sem at nisi tempor pretium sit amet quis lacus.\n        \n                \n                  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n                  Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\n                \n        \n      \n    \n\n\n\nWhen notes is a named list, the names are used as identifiers and displayed as superscripts:\n\ntt(x, notes = list(a = \"Blah.\", b = \"Blah blah.\"))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        a Blah.\nb Blah blah.\n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also add markers in individual cells by providing coordinates:\n\ntt(x, notes = list(\n  a = list(i = 0:1, j = 1, text = \"Blah.\"),\n  b = \"Blah blah.\"\n))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpga\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        a Blah.\nb Blah blah.\n        \n                \n                  21a\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\n\nIn Quarto, one should always specify captions cross-references using chunk options, and should not use the caption argument. This is because Quarto automatically post-processes tables, and may introduce conflict with the captions inserted by tinytable. For example:\n@tbl-blah shows that...\n\n```{r}\n#| label: tbl-blah\n#| tbl-cap: \"Blah blah blah\"\nlibrary(tinytable)\ntt(mtcars[1:4, 1:4])\n```\nAnd here is the rendered version of the code chunk above:\nTable 1 shows that…\n\nlibrary(tinytable)\ntt(mtcars[1:4, 1:4])\n\n\n\nTable 1: Blah blah blah\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\n\n\n\n\nOne exception to the injunction above is when rendering a Quarto document to LaTeX using theme_tt(\"multipage\")\". In that case, one must avoid using the Quarto chunk option, because these options trigger Quarto post-processing that will conflict with the longtblr environment used to split long tables across multiple pages.\nThe alternative is to use to refer to tables using standard LaTeX syntax: \\ref{tbl-ex-multipage}. Then, use the caption argument in tt() to specify both the label and the caption:\n\ntt(iris, caption = \"Example table.\\\\label{tbl-ex-multipage}\") |&gt;\n  theme_tt(\"multipage\")\n\nFor standalone tables in any format (i.e., outside Quarto), you can use the caption argument like so:\n\ntt(x, caption = \"Blah blah.\\\\label{tbl-blah}\")\n\n\n\n\nManual line breaks work sligthly different in LaTeX (PDF), HTML, and Typst. This table shows the three strategies. For HTML, we insert a &lt;br&gt; tag. For LaTeX, we wrap the string in curly braces {}, and then insert two (escaped) backslashes: \\\\\\\\. For Typst, we insert an escaped backslash followed by a space.\n\nd &lt;- data.frame(\n  \"{Sed ut \\\\\\\\ perspiciatis unde}\",\n  \"dicta sunt&lt;br&gt; explicabo. Nemo\",\n  \"bacon\\\\ baconator\"\n) |&gt; setNames(c(\"LaTeX\", \"HTML\", \"Typst\"))\ntt(d, width = 1)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n                Typst\n              \n        \n        \n        \n                \n                  {Sed ut \\\\ perspiciatis unde}\n                  dicta sunt explicabo. Nemo\n                  bacon\\ baconator\n                \n        \n      \n    \n\n\n\n\n\n\ntinytable can produce tables in HTML, Word, Markdown, LaTeX, Typst, PDF, or PNG format. An appropriate output format for printing is automatically selected based on (1) whether the function is called interactively, (2) is called within RStudio, and (3) the output format of the Rmarkdown or Quarto document, if applicable. Alternatively, users can specify the print format in print() or by setting a global option:\n\ntt(x) |&gt; print(\"markdown\")\ntt(x) |&gt; print(\"html\")\ntt(x) |&gt; print(\"latex\")\n\noptions(tinytable_print_output = \"markdown\")\n\nWith the save_tt() function, users can also save tables directly to PNG (images), PDF or Word documents, and to any of the basic formats. All we need to do is supply a valid file name with the appropriate extension (ex: .png, .html, .pdf, etc.):\ntt(x) |&gt; save_tt(\"path/to/file.png\")\ntt(x) |&gt; save_tt(\"path/to/file.pdf\")\ntt(x) |&gt; save_tt(\"path/to/file.docx\")\ntt(x) |&gt; save_tt(\"path/to/file.html\")\ntt(x) |&gt; save_tt(\"path/to/file.tex\")\ntt(x) |&gt; save_tt(\"path/to/file.md\")\nsave_tt() can also return a string with the table in it, for further processing in R. In the first case, the table is printed to console with cat(). In the second case, it returns as a single string as an R object.\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  ) |&gt;\n  print(\"markdown\")\n\n+------+-----+------+-----+------+\n|      | Foo        | Bar        |\n+------+-----+------+-----+------+\n| mpg  | cyl | disp | hp  | drat |\n+======+=====+======+=====+======+\n| 21   | 6   | 160  | 110 | 3.9  |\n+------+-----+------+-----+------+\n| 21   | 6   | 160  | 110 | 3.9  |\n+------+-----+------+-----+------+\n| Hello                          |\n+------+-----+------+-----+------+\n| 22.8 | 4   | 108  | 93  | 3.85 |\n+------+-----+------+-----+------+\n| 21.4 | 6   | 258  | 110 | 3.08 |\n+------+-----+------+-----+------+\n| 18.7 | 8   | 360  | 175 | 3.15 |\n+------+-----+------+-----+------+\n| 18.1 | 6   | 225  | 105 | 2.76 |\n+------+-----+------+-----+------+\n| 14.3 | 8   | 360  | 245 | 3.21 |\n+------+-----+------+-----+------+\n| World                          |\n+------+-----+------+-----+------+\n| 24.4 | 4   | 147  | 62  | 3.69 |\n+------+-----+------+-----+------+\n| 22.8 | 4   | 141  | 95  | 3.92 |\n+------+-----+------+-----+------+\n| 19.2 | 6   | 168  | 123 | 3.92 |\n+------+-----+------+-----+------+ \n\n\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  ) |&gt;\n  save_tt(\"markdown\")\n\n[1] \"+------+-----+------+-----+------+\\n|      | Foo        | Bar        |\\n+------+-----+------+-----+------+\\n| mpg  | cyl | disp | hp  | drat |\\n+======+=====+======+=====+======+\\n| 21   | 6   | 160  | 110 | 3.9  |\\n+------+-----+------+-----+------+\\n| 21   | 6   | 160  | 110 | 3.9  |\\n+------+-----+------+-----+------+\\n| Hello                          |\\n+------+-----+------+-----+------+\\n| 22.8 | 4   | 108  | 93  | 3.85 |\\n+------+-----+------+-----+------+\\n| 21.4 | 6   | 258  | 110 | 3.08 |\\n+------+-----+------+-----+------+\\n| 18.7 | 8   | 360  | 175 | 3.15 |\\n+------+-----+------+-----+------+\\n| 18.1 | 6   | 225  | 105 | 2.76 |\\n+------+-----+------+-----+------+\\n| 14.3 | 8   | 360  | 245 | 3.21 |\\n+------+-----+------+-----+------+\\n| World                          |\\n+------+-----+------+-----+------+\\n| 24.4 | 4   | 147  | 62  | 3.69 |\\n+------+-----+------+-----+------+\\n| 22.8 | 4   | 141  | 95  | 3.92 |\\n+------+-----+------+-----+------+\\n| 19.2 | 6   | 168  | 123 | 3.92 |\\n+------+-----+------+-----+------+\"\n\n\n\n\n\nTables can be explored, modified, and combined using many of the usual base R functions:\n\na &lt;- tt(mtcars[1:2, 1:2])\na\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\ndim(a)\n\n[1] 2 2\n\nncol(a)\n\n[1] 2\n\nnrow(a)\n\n[1] 2\n\ncolnames(a)\n\n[1] \"mpg\" \"cyl\"\n\n\nTables can be combined with the usual rbind() function:\n\na &lt;- tt(mtcars[1:3, 1:2], caption = \"Combine two tiny tables.\")\nb &lt;- tt(mtcars[4:5, 8:10])\n\nrbind(a, b)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  vs\n                  am\n                  gear\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\nrbind(a, b) |&gt; format_tt(replace = \"\")\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                   \n                   \n                   \n                \n                \n                  21\n                  6\n                   \n                   \n                   \n                \n                \n                  22.8\n                  4\n                   \n                   \n                   \n                \n                \n                   \n                   \n                  vs\n                  am\n                  gear\n                \n                \n                   \n                   \n                  1\n                  0\n                  3\n                \n                \n                   \n                   \n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n\nThe rbind2() S4 method is slightly more flexible than rbind(), as it supports arguments headers and use_names.\nOmit y header:\n\nrbind2(a, b, headers = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n\nBind tables by position rather than column names:\n\nrbind2(a, b, use_names = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                \n                \n                  vs\n                  am\n                  gear\n                \n                \n                  1\n                  0\n                  3\n                \n                \n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n\n\n\n\nAs noted above, tinytable tries to be standards-compliant, by defining methods for many base R functions. The benefit of this approach is that instead of having to learn a tinytable-specific syntax, users can rename columns using all the tools they already know:\n\na &lt;- tt(mtcars[1:2, 1:2])\ncolnames(a) &lt;- c(\"a\", \"b\")\na\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\n\nIn a pipe-based workflow, we can use the setNames() function from base R:\n\nmtcars[1:2, 1:2] |&gt;\n  tt() |&gt;\n  setNames(c(\"a\", \"b\"))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#width-and-height",
    "href": "vignettes/tinytable.html#width-and-height",
    "title": "Tiny Tables",
    "section": "",
    "text": "The width arguments indicating what proportion of the line width the table should cover. This argument accepts a number between 0 and 1 to control the whole table width, or a vector of numeric values between 0 and 1, representing each column.\n\ntt(x, width = 0.5)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\ntt(x, width = 1)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can control individual columns by supplying a vector. In that case, the sum of width elements determines the full table width. For example, this table takes 70% of available width, with the first column 3 times as large as the other ones.\n\ntt(x, width = c(.3, .1, .1, .1, .1))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen the sum of the width vector exceeds 1, it is automatically normalized to full-width. This is convenient when we only want to specify column width in relative terms:\n\ntt(x, width = c(3, 2, 1, 1, 1))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWhen specifying a table width, the text is automatically wrapped to appropriate size:\n\nlorem &lt;- data.frame(\n  Lorem = \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\",\n  Ipsum = \" Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\"\n)\n\ntt(lorem, width = 3 / 4)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Lorem\n                Ipsum\n              \n        \n        \n        \n                \n                  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n                  Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\n                \n        \n      \n    \n\n\n\nThe height argument controls the height of each row in em units:\n\ntt(mtcars[1:4, 1:5], height = 3)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#footnotes",
    "href": "vignettes/tinytable.html#footnotes",
    "title": "Tiny Tables",
    "section": "",
    "text": "The notes argument accepts single strings or named lists of strings:\n\nn &lt;- \"Fusce id ipsum consequat ante pellentesque iaculis eu a ipsum. Mauris id ex in nulla consectetur aliquam. In nec tempus diam. Aliquam arcu nibh, dapibus id ex vestibulum, feugiat consequat erat. Morbi feugiat dapibus malesuada. Quisque vel ullamcorper felis. Aenean a sem at nisi tempor pretium sit amet quis lacus.\"\n\ntt(lorem, notes = n, width = 1)\n\n\n\n    \n\n    \n    \n      A full-width table with wrapped text in cells and a footnote.\n        \n        \n              \n                Lorem\n                Ipsum\n              \n        \n        Fusce id ipsum consequat ante pellentesque iaculis eu a ipsum. Mauris id ex in nulla consectetur aliquam. In nec tempus diam. Aliquam arcu nibh, dapibus id ex vestibulum, feugiat consequat erat. Morbi feugiat dapibus malesuada. Quisque vel ullamcorper felis. Aenean a sem at nisi tempor pretium sit amet quis lacus.\n        \n                \n                  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n                  Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos.\n                \n        \n      \n    \n\n\n\nWhen notes is a named list, the names are used as identifiers and displayed as superscripts:\n\ntt(x, notes = list(a = \"Blah.\", b = \"Blah blah.\"))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        a Blah.\nb Blah blah.\n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nWe can also add markers in individual cells by providing coordinates:\n\ntt(x, notes = list(\n  a = list(i = 0:1, j = 1, text = \"Blah.\"),\n  b = \"Blah blah.\"\n))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpga\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        a Blah.\nb Blah blah.\n        \n                \n                  21a\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#captions-and-cross-references",
    "href": "vignettes/tinytable.html#captions-and-cross-references",
    "title": "Tiny Tables",
    "section": "",
    "text": "In Quarto, one should always specify captions cross-references using chunk options, and should not use the caption argument. This is because Quarto automatically post-processes tables, and may introduce conflict with the captions inserted by tinytable. For example:\n@tbl-blah shows that...\n\n```{r}\n#| label: tbl-blah\n#| tbl-cap: \"Blah blah blah\"\nlibrary(tinytable)\ntt(mtcars[1:4, 1:4])\n```\nAnd here is the rendered version of the code chunk above:\nTable 1 shows that…\n\nlibrary(tinytable)\ntt(mtcars[1:4, 1:4])\n\n\n\nTable 1: Blah blah blah\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  21\n                  6\n                  160\n                  110\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                \n        \n      \n    \n\n\n\n\n\n\nOne exception to the injunction above is when rendering a Quarto document to LaTeX using theme_tt(\"multipage\")\". In that case, one must avoid using the Quarto chunk option, because these options trigger Quarto post-processing that will conflict with the longtblr environment used to split long tables across multiple pages.\nThe alternative is to use to refer to tables using standard LaTeX syntax: \\ref{tbl-ex-multipage}. Then, use the caption argument in tt() to specify both the label and the caption:\n\ntt(iris, caption = \"Example table.\\\\label{tbl-ex-multipage}\") |&gt;\n  theme_tt(\"multipage\")\n\nFor standalone tables in any format (i.e., outside Quarto), you can use the caption argument like so:\n\ntt(x, caption = \"Blah blah.\\\\label{tbl-blah}\")",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#line-breaks-and-text-wrapping",
    "href": "vignettes/tinytable.html#line-breaks-and-text-wrapping",
    "title": "Tiny Tables",
    "section": "",
    "text": "Manual line breaks work sligthly different in LaTeX (PDF), HTML, and Typst. This table shows the three strategies. For HTML, we insert a &lt;br&gt; tag. For LaTeX, we wrap the string in curly braces {}, and then insert two (escaped) backslashes: \\\\\\\\. For Typst, we insert an escaped backslash followed by a space.\n\nd &lt;- data.frame(\n  \"{Sed ut \\\\\\\\ perspiciatis unde}\",\n  \"dicta sunt&lt;br&gt; explicabo. Nemo\",\n  \"bacon\\\\ baconator\"\n) |&gt; setNames(c(\"LaTeX\", \"HTML\", \"Typst\"))\ntt(d, width = 1)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n                Typst\n              \n        \n        \n        \n                \n                  {Sed ut \\\\ perspiciatis unde}\n                  dicta sunt explicabo. Nemo\n                  bacon\\ baconator",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#output-formats",
    "href": "vignettes/tinytable.html#output-formats",
    "title": "Tiny Tables",
    "section": "",
    "text": "tinytable can produce tables in HTML, Word, Markdown, LaTeX, Typst, PDF, or PNG format. An appropriate output format for printing is automatically selected based on (1) whether the function is called interactively, (2) is called within RStudio, and (3) the output format of the Rmarkdown or Quarto document, if applicable. Alternatively, users can specify the print format in print() or by setting a global option:\n\ntt(x) |&gt; print(\"markdown\")\ntt(x) |&gt; print(\"html\")\ntt(x) |&gt; print(\"latex\")\n\noptions(tinytable_print_output = \"markdown\")\n\nWith the save_tt() function, users can also save tables directly to PNG (images), PDF or Word documents, and to any of the basic formats. All we need to do is supply a valid file name with the appropriate extension (ex: .png, .html, .pdf, etc.):\ntt(x) |&gt; save_tt(\"path/to/file.png\")\ntt(x) |&gt; save_tt(\"path/to/file.pdf\")\ntt(x) |&gt; save_tt(\"path/to/file.docx\")\ntt(x) |&gt; save_tt(\"path/to/file.html\")\ntt(x) |&gt; save_tt(\"path/to/file.tex\")\ntt(x) |&gt; save_tt(\"path/to/file.md\")\nsave_tt() can also return a string with the table in it, for further processing in R. In the first case, the table is printed to console with cat(). In the second case, it returns as a single string as an R object.\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  ) |&gt;\n  print(\"markdown\")\n\n+------+-----+------+-----+------+\n|      | Foo        | Bar        |\n+------+-----+------+-----+------+\n| mpg  | cyl | disp | hp  | drat |\n+======+=====+======+=====+======+\n| 21   | 6   | 160  | 110 | 3.9  |\n+------+-----+------+-----+------+\n| 21   | 6   | 160  | 110 | 3.9  |\n+------+-----+------+-----+------+\n| Hello                          |\n+------+-----+------+-----+------+\n| 22.8 | 4   | 108  | 93  | 3.85 |\n+------+-----+------+-----+------+\n| 21.4 | 6   | 258  | 110 | 3.08 |\n+------+-----+------+-----+------+\n| 18.7 | 8   | 360  | 175 | 3.15 |\n+------+-----+------+-----+------+\n| 18.1 | 6   | 225  | 105 | 2.76 |\n+------+-----+------+-----+------+\n| 14.3 | 8   | 360  | 245 | 3.21 |\n+------+-----+------+-----+------+\n| World                          |\n+------+-----+------+-----+------+\n| 24.4 | 4   | 147  | 62  | 3.69 |\n+------+-----+------+-----+------+\n| 22.8 | 4   | 141  | 95  | 3.92 |\n+------+-----+------+-----+------+\n| 19.2 | 6   | 168  | 123 | 3.92 |\n+------+-----+------+-----+------+ \n\n\n\ntt(mtcars[1:10, 1:5]) |&gt;\n  group_tt(\n    i = list(\n      \"Hello\" = 3,\n      \"World\" = 8\n    ),\n    j = list(\n      \"Foo\" = 2:3,\n      \"Bar\" = 4:5\n    )\n  ) |&gt;\n  save_tt(\"markdown\")\n\n[1] \"+------+-----+------+-----+------+\\n|      | Foo        | Bar        |\\n+------+-----+------+-----+------+\\n| mpg  | cyl | disp | hp  | drat |\\n+======+=====+======+=====+======+\\n| 21   | 6   | 160  | 110 | 3.9  |\\n+------+-----+------+-----+------+\\n| 21   | 6   | 160  | 110 | 3.9  |\\n+------+-----+------+-----+------+\\n| Hello                          |\\n+------+-----+------+-----+------+\\n| 22.8 | 4   | 108  | 93  | 3.85 |\\n+------+-----+------+-----+------+\\n| 21.4 | 6   | 258  | 110 | 3.08 |\\n+------+-----+------+-----+------+\\n| 18.7 | 8   | 360  | 175 | 3.15 |\\n+------+-----+------+-----+------+\\n| 18.1 | 6   | 225  | 105 | 2.76 |\\n+------+-----+------+-----+------+\\n| 14.3 | 8   | 360  | 245 | 3.21 |\\n+------+-----+------+-----+------+\\n| World                          |\\n+------+-----+------+-----+------+\\n| 24.4 | 4   | 147  | 62  | 3.69 |\\n+------+-----+------+-----+------+\\n| 22.8 | 4   | 141  | 95  | 3.92 |\\n+------+-----+------+-----+------+\\n| 19.2 | 6   | 168  | 123 | 3.92 |\\n+------+-----+------+-----+------+\"",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#combination-and-exploration",
    "href": "vignettes/tinytable.html#combination-and-exploration",
    "title": "Tiny Tables",
    "section": "",
    "text": "Tables can be explored, modified, and combined using many of the usual base R functions:\n\na &lt;- tt(mtcars[1:2, 1:2])\na\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\ndim(a)\n\n[1] 2 2\n\nncol(a)\n\n[1] 2\n\nnrow(a)\n\n[1] 2\n\ncolnames(a)\n\n[1] \"mpg\" \"cyl\"\n\n\nTables can be combined with the usual rbind() function:\n\na &lt;- tt(mtcars[1:3, 1:2], caption = \"Combine two tiny tables.\")\nb &lt;- tt(mtcars[4:5, 8:10])\n\nrbind(a, b)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  vs\n                  am\n                  gear\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\nrbind(a, b) |&gt; format_tt(replace = \"\")\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                   \n                   \n                   \n                \n                \n                  21\n                  6\n                   \n                   \n                   \n                \n                \n                  22.8\n                  4\n                   \n                   \n                   \n                \n                \n                   \n                   \n                  vs\n                  am\n                  gear\n                \n                \n                   \n                   \n                  1\n                  0\n                  3\n                \n                \n                   \n                   \n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n\nThe rbind2() S4 method is slightly more flexible than rbind(), as it supports arguments headers and use_names.\nOmit y header:\n\nrbind2(a, b, headers = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                vs\n                am\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                  NA\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                  NA\n                  NA\n                \n                \n                  NA\n                  NA\n                  1\n                  0\n                  3\n                \n                \n                  NA\n                  NA\n                  0\n                  0\n                  3\n                \n        \n      \n    \n\n\n\nBind tables by position rather than column names:\n\nrbind2(a, b, use_names = FALSE)\n\n\n\n    \n\n    \n    \n      \n        \n        Combine two tiny tables.\n              \n                mpg\n                cyl\n                gear\n              \n        \n        \n        \n                \n                  21\n                  6\n                  NA\n                \n                \n                  21\n                  6\n                  NA\n                \n                \n                  22.8\n                  4\n                  NA\n                \n                \n                  vs\n                  am\n                  gear\n                \n                \n                  1\n                  0\n                  3\n                \n                \n                  0\n                  0\n                  3",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/tinytable.html#renaming-columns",
    "href": "vignettes/tinytable.html#renaming-columns",
    "title": "Tiny Tables",
    "section": "",
    "text": "As noted above, tinytable tries to be standards-compliant, by defining methods for many base R functions. The benefit of this approach is that instead of having to learn a tinytable-specific syntax, users can rename columns using all the tools they already know:\n\na &lt;- tt(mtcars[1:2, 1:2])\ncolnames(a) &lt;- c(\"a\", \"b\")\na\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6\n                \n        \n      \n    \n\n\n\nIn a pipe-based workflow, we can use the setNames() function from base R:\n\nmtcars[1:2, 1:2] |&gt;\n  tt() |&gt;\n  setNames(c(\"a\", \"b\"))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  21\n                  6\n                \n                \n                  21\n                  6",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Tiny tables"
    ]
  },
  {
    "objectID": "vignettes/group.html",
    "href": "vignettes/group.html",
    "title": "Groups and labels",
    "section": "",
    "text": "library(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\nThe group_tt() function can label groups of rows (i) or columns (j).\n\n\nThe i argument accepts a named list of integers. The numbers identify the positions where row group labels are to be inserted. The names includes the text that should be inserted:\n\ndat &lt;- mtcars[1:9, 1:8]\n\ntt(dat) |&gt;\n  group_tt(i = list(\n    \"I like (fake) hamburgers\" = 3,\n    \"She prefers halloumi\" = 4,\n    \"They love tofu\" = 7))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nThe numbers in the i list indicate that a label must be inserted at position # in the original table (without row groups). For example,\n\ntt(head(iris)) |&gt;\n  group_tt(i = list(\"After 0\" = 1, \"After 3a\" = 4, \"After 3b\" = 4, \"After 5\" = 6))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  After 0\n                  \n                  \n                  \n                  \n                \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  After 3a\n                  \n                  \n                  \n                  \n                \n                \n                  After 3b\n                  \n                  \n                  \n                  \n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  After 5\n                  \n                  \n                  \n                  \n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n        \n      \n    \n\n\n\n\n\nWe can style group rows in the same way as regular rows (caveat: not in Word or Markdown):\n\ntab &lt;- tt(dat) |&gt;\n  group_tt(i = list(\n      \"I like (fake) hamburgers\" = 3,\n      \"She prefers halloumi\" = 4,\n      \"They love tofu\" = 7))\n\ntab |&gt; style_tt(\n    i = c(3, 5, 9),\n    align = \"c\",\n    color = \"white\",\n    background = \"gray\",\n    bold = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nCalculating the location of rows can be cumbersome. Instead of doing this by hand, we can use the “groupi” shortcut to style rows and “~groupi” (the complement) to style all non-group rows.\n\ntab |&gt; \n  style_tt(\"groupi\", color = \"white\", background = \"teal\") |&gt;\n  style_tt(\"~groupi\", j = 1, indent = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nWe can use the group_tt() function to group rows and label them using spanners (almost) automatically. For example,\n\n# subset and sort data\ndf &lt;- mtcars |&gt; \n  head(10) |&gt;\n  sort_by(~am)\n\n# draw table\ntt(df) |&gt; group_tt(i = df$am)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n                am\n                gear\n                carb\n              \n        \n        \n        \n                \n                  0\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                  0\n                  3\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                  0\n                  3\n                  2\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                  0\n                  3\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                  0\n                  3\n                  4\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                  0\n                  4\n                  2\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                  0\n                  4\n                  2\n                \n                \n                  19.2\n                  6\n                  168\n                  123\n                  3.92\n                  3.44\n                  18.3\n                  1\n                  0\n                  4\n                  4\n                \n                \n                  1\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                  1\n                  4\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nWhile the traditional group_tt(i = list(...)) approach is useful for adding individual labeled rows, sometimes you need to insert multiple rows of data at specific positions. The matrix insertion feature provides a more efficient way to do this.\nInstead of creating multiple named list entries, you can specify row positions as an integer vector in i and provide a character matrix in j. This is particularly useful when you want to insert the same content (like headers or separators) at multiple positions:\n\nrowmat &lt;- matrix(colnames(iris))\n\ntt(head(iris, 7)) |&gt;\n  group_tt(i = c(2, 5), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\n\nThe matrix is expected to have the same number of columns as the table. However, if you provide a single-column matrix with a number of elements that is a multiple of the table’s column count, it will be automatically reshaped to match the table structure. This makes it easy to provide data in a linear format:\n\nrowmat &lt;- matrix(c(\n  \"-\", \"-\", \"-\", \"-\", \"-\",\n  \"/\", \"/\", \"/\", \"/\", \"/\"))\n\ntt(head(iris, 7)) |&gt; group_tt(i = 2, j = rowmat) \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  -\n                  -\n                  -\n                  -\n                  -\n                \n                \n                  /\n                  /\n                  /\n                  /\n                  /\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\n\nWe can also insert rows of the group matrix in different positions:\n\ntt(head(iris, 7)) |&gt; group_tt(i = c(1, 8), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  -\n                  -\n                  -\n                  -\n                  -\n                \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n                \n                  /\n                  /\n                  /\n                  /\n                  /\n                \n        \n      \n    \n\n\n\n\n\n\n\nThe syntax for column groups is very similar, but we use the j argument instead. The named list specifies the labels to appear in column-spanning labels, and the values must be a vector of consecutive and non-overlapping integers that indicate which columns are associated to which labels:\n\ntt(dat) |&gt;\n  group_tt(\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7))\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nWe can stack several extra headers on top of one another:\n\nx &lt;- mtcars[1:4, 1:5]\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5))\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\nTo style column headers, we use zero or negative indices:\n\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5)) |&gt;\n  style_tt(i = 0, color = \"orange\") |&gt;\n  style_tt(i = -1, color = \"teal\") |&gt;\n  style_tt(i = -2, color = \"yellow\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAlternatively, we can use string shortcuts:\n\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5)) |&gt;\n  style_tt(\"groupj\", color = \"orange\") |&gt;\n  style_tt(\"colnames\", color = \"teal\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere is a table with both row and column headers, as well as some styling:\n\ndat &lt;- mtcars[1:9, 1:8]\ntt(dat) |&gt;\n  group_tt(\n    i = list(\n      \"I like (fake) hamburgers\" = 3,\n      \"She prefers halloumi\" = 4,\n      \"They love tofu\" = 7\n    ),\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7\n    )\n  ) |&gt;\n  style_tt(\n    i = c(3, 5, 9),\n    align = \"c\",\n    background = \"teal\",\n    color = \"white\"\n  ) |&gt;\n  style_tt(i = -1, color = \"teal\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nGroup labels can be specified using column names with delimiters. For example, some of the columns in this data frame have group identifiers. Note that the first column does not have a group identifier, and that the last column has a group identifier but no column name.\n\ndat &lt;- data.frame(\n  id = 1, \n  A_a1 = 2, \n  A_a2 = \"3\", \n  B_b1 = 4, \n  B_b2 = 5,  \n  C_ = 6)\n\ntt(dat) |&gt; group_tt(j = \"_\")\n\n\n\n    \n\n    \n    \n      \n        \n\n \nA\nB\nC\n\n        \n              \n                id\n                a1\n                a2\n                b1\n                b2\n                \n              \n        \n        \n        \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                  6\n                \n        \n      \n    \n\n\n\n\n\n\n\n\n\nIn some contexts, users wish to repeat the column names to treat them as group labels. Consider this dataset:\n\nlibrary(tinytable)\nlibrary(magrittr)\n\ndat = data.frame(\n  Region = as.character(state.region),\n  State = row.names(state.x77), \n  state.x77[, 1:3]) |&gt;\n  sort_by(~ Region + State) |&gt;\n  subset(Region %in% c(\"North Central\", \"Northeast\"))\ndat = do.call(rbind, by(dat, dat$Region, head, n = 3))\nrow.names(dat) = NULL\ndat\n\n         Region         State Population Income Illiteracy\n1 North Central      Illinois      11197   5107        0.9\n2 North Central       Indiana       5313   4458        0.7\n3 North Central          Iowa       2861   4628        0.5\n4     Northeast   Connecticut       3100   5348        1.1\n5     Northeast         Maine       1058   3694        0.7\n6     Northeast Massachusetts       5814   4755        1.1\n\n\nHere, we may want to repeat the column names for every region. The group_tt() function does not support this directly, but it is easy to achieve this effect by:\n\nInsert column names as new rows in the data.\nCreat a row group variable (here: region)\nStyle the column names and group labels\n\nNormally, we would call style_tt(i = \"groupi\") to style the row groups, but here we need the actual indices to also style one row below the groups. We can use the @group_index_i slot to get the indices of the row groups.\n\nregion_names &lt;- unique(dat$Region)\nregion_indices &lt;- rep(match(region_names, dat$Region), each = 2)\n\nrowmat &lt;- do.call(rbind, lapply(region_names, function(name) {\n  rbind(\n    c(name, rep(\"\", 3)),\n    colnames(dat)[2:5]\n  )\n}))\n\nrowmat\n\n     [,1]            [,2]         [,3]     [,4]        \n[1,] \"North Central\" \"\"           \"\"       \"\"          \n[2,] \"State\"         \"Population\" \"Income\" \"Illiteracy\"\n[3,] \"Northeast\"     \"\"           \"\"       \"\"          \n[4,] \"State\"         \"Population\" \"Income\" \"Illiteracy\"\n\n\n\ntab &lt;- tt(dat[, 2:5], colnames = FALSE) |&gt;\n  group_tt(i = region_indices, j = rowmat)\n\nidx &lt;- tab@group_index_i[c(TRUE, diff(tab@group_index_i) != 1)]\n\ntab |&gt;\n  style_tt(i = idx, j = 1, align = \"c\", colspan = 4, background = \"lightgrey\", line = \"b\") |&gt;\n  style_tt(i = idx + 1, line = \"tb\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  North Central\n                  \n                  \n                  \n                \n                \n                  State\n                  Population\n                  Income\n                  Illiteracy\n                \n                \n                  Illinois\n                  11197\n                  5107\n                  0.9\n                \n                \n                  Indiana\n                  5313\n                  4458\n                  0.7\n                \n                \n                  Iowa\n                  2861\n                  4628\n                  0.5\n                \n                \n                  Northeast\n                  \n                  \n                  \n                \n                \n                  State\n                  Population\n                  Income\n                  Illiteracy\n                \n                \n                  Connecticut\n                  3100\n                  5348\n                  1.1\n                \n                \n                  Maine\n                  1058\n                  3694\n                  0.7\n                \n                \n                  Massachusetts\n                  5814\n                  4755\n                  1.1",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Groups and labels"
    ]
  },
  {
    "objectID": "vignettes/group.html#rows",
    "href": "vignettes/group.html#rows",
    "title": "Groups and labels",
    "section": "",
    "text": "The i argument accepts a named list of integers. The numbers identify the positions where row group labels are to be inserted. The names includes the text that should be inserted:\n\ndat &lt;- mtcars[1:9, 1:8]\n\ntt(dat) |&gt;\n  group_tt(i = list(\n    \"I like (fake) hamburgers\" = 3,\n    \"She prefers halloumi\" = 4,\n    \"They love tofu\" = 7))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nThe numbers in the i list indicate that a label must be inserted at position # in the original table (without row groups). For example,\n\ntt(head(iris)) |&gt;\n  group_tt(i = list(\"After 0\" = 1, \"After 3a\" = 4, \"After 3b\" = 4, \"After 5\" = 6))\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  After 0\n                  \n                  \n                  \n                  \n                \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  After 3a\n                  \n                  \n                  \n                  \n                \n                \n                  After 3b\n                  \n                  \n                  \n                  \n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  After 5\n                  \n                  \n                  \n                  \n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n        \n      \n    \n\n\n\n\n\nWe can style group rows in the same way as regular rows (caveat: not in Word or Markdown):\n\ntab &lt;- tt(dat) |&gt;\n  group_tt(i = list(\n      \"I like (fake) hamburgers\" = 3,\n      \"She prefers halloumi\" = 4,\n      \"They love tofu\" = 7))\n\ntab |&gt; style_tt(\n    i = c(3, 5, 9),\n    align = \"c\",\n    color = \"white\",\n    background = \"gray\",\n    bold = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nCalculating the location of rows can be cumbersome. Instead of doing this by hand, we can use the “groupi” shortcut to style rows and “~groupi” (the complement) to style all non-group rows.\n\ntab |&gt; \n  style_tt(\"groupi\", color = \"white\", background = \"teal\") |&gt;\n  style_tt(\"~groupi\", j = 1, indent = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nWe can use the group_tt() function to group rows and label them using spanners (almost) automatically. For example,\n\n# subset and sort data\ndf &lt;- mtcars |&gt; \n  head(10) |&gt;\n  sort_by(~am)\n\n# draw table\ntt(df) |&gt; group_tt(i = df$am)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n                am\n                gear\n                carb\n              \n        \n        \n        \n                \n                  0\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                  0\n                  3\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                  0\n                  3\n                  2\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                  0\n                  3\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                  0\n                  3\n                  4\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                  0\n                  4\n                  2\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                  0\n                  4\n                  2\n                \n                \n                  19.2\n                  6\n                  168\n                  123\n                  3.92\n                  3.44\n                  18.3\n                  1\n                  0\n                  4\n                  4\n                \n                \n                  1\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                  1\n                  4\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nWhile the traditional group_tt(i = list(...)) approach is useful for adding individual labeled rows, sometimes you need to insert multiple rows of data at specific positions. The matrix insertion feature provides a more efficient way to do this.\nInstead of creating multiple named list entries, you can specify row positions as an integer vector in i and provide a character matrix in j. This is particularly useful when you want to insert the same content (like headers or separators) at multiple positions:\n\nrowmat &lt;- matrix(colnames(iris))\n\ntt(head(iris, 7)) |&gt;\n  group_tt(i = c(2, 5), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  Sepal.Length\n                  Sepal.Width\n                  Petal.Length\n                  Petal.Width\n                  Species\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\n\nThe matrix is expected to have the same number of columns as the table. However, if you provide a single-column matrix with a number of elements that is a multiple of the table’s column count, it will be automatically reshaped to match the table structure. This makes it easy to provide data in a linear format:\n\nrowmat &lt;- matrix(c(\n  \"-\", \"-\", \"-\", \"-\", \"-\",\n  \"/\", \"/\", \"/\", \"/\", \"/\"))\n\ntt(head(iris, 7)) |&gt; group_tt(i = 2, j = rowmat) \n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  -\n                  -\n                  -\n                  -\n                  -\n                \n                \n                  /\n                  /\n                  /\n                  /\n                  /\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n        \n      \n    \n\n\n\nWe can also insert rows of the group matrix in different positions:\n\ntt(head(iris, 7)) |&gt; group_tt(i = c(1, 8), j = rowmat)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Sepal.Length\n                Sepal.Width\n                Petal.Length\n                Petal.Width\n                Species\n              \n        \n        \n        \n                \n                  -\n                  -\n                  -\n                  -\n                  -\n                \n                \n                  5.1\n                  3.5\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.9\n                  3\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  4.7\n                  3.2\n                  1.3\n                  0.2\n                  setosa\n                \n                \n                  4.6\n                  3.1\n                  1.5\n                  0.2\n                  setosa\n                \n                \n                  5\n                  3.6\n                  1.4\n                  0.2\n                  setosa\n                \n                \n                  5.4\n                  3.9\n                  1.7\n                  0.4\n                  setosa\n                \n                \n                  4.6\n                  3.4\n                  1.4\n                  0.3\n                  setosa\n                \n                \n                  /\n                  /\n                  /\n                  /\n                  /",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Groups and labels"
    ]
  },
  {
    "objectID": "vignettes/group.html#columns",
    "href": "vignettes/group.html#columns",
    "title": "Groups and labels",
    "section": "",
    "text": "The syntax for column groups is very similar, but we use the j argument instead. The named list specifies the labels to appear in column-spanning labels, and the values must be a vector of consecutive and non-overlapping integers that indicate which columns are associated to which labels:\n\ntt(dat) |&gt;\n  group_tt(\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7))\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\nWe can stack several extra headers on top of one another:\n\nx &lt;- mtcars[1:4, 1:5]\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5))\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\n\n\nTo style column headers, we use zero or negative indices:\n\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5)) |&gt;\n  style_tt(i = 0, color = \"orange\") |&gt;\n  style_tt(i = -1, color = \"teal\") |&gt;\n  style_tt(i = -2, color = \"yellow\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nAlternatively, we can use string shortcuts:\n\ntt(x) |&gt;\n  group_tt(j = list(\"Foo\" = 2:3, \"Bar\" = 5)) |&gt;\n  group_tt(j = list(\"Hello\" = 1:2, \"World\" = 4:5)) |&gt;\n  style_tt(\"groupj\", color = \"orange\") |&gt;\n  style_tt(\"colnames\", color = \"teal\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHello\n \nWorld\n\n\n \nFoo\n \nBar\n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                \n        \n      \n    \n\n\n\nHere is a table with both row and column headers, as well as some styling:\n\ndat &lt;- mtcars[1:9, 1:8]\ntt(dat) |&gt;\n  group_tt(\n    i = list(\n      \"I like (fake) hamburgers\" = 3,\n      \"She prefers halloumi\" = 4,\n      \"They love tofu\" = 7\n    ),\n    j = list(\n      \"Hamburgers\" = 1:3,\n      \"Halloumi\" = 4:5,\n      \"Tofu\" = 7\n    )\n  ) |&gt;\n  style_tt(\n    i = c(3, 5, 9),\n    align = \"c\",\n    background = \"teal\",\n    color = \"white\"\n  ) |&gt;\n  style_tt(i = -1, color = \"teal\")\n\n\n\n    \n\n    \n    \n      \n        \n\nHamburgers\nHalloumi\n \nTofu\n \n\n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n              \n        \n        \n        \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.62\n                  16.5\n                  0\n                \n                \n                  21\n                  6\n                  160\n                  110\n                  3.9\n                  2.88\n                  17\n                  0\n                \n                \n                  I like (fake) hamburgers\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  22.8\n                  4\n                  108\n                  93\n                  3.85\n                  2.32\n                  18.6\n                  1\n                \n                \n                  She prefers halloumi\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.21\n                  19.4\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.44\n                  17\n                  0\n                \n                \n                  18.1\n                  6\n                  225\n                  105\n                  2.76\n                  3.46\n                  20.2\n                  1\n                \n                \n                  They love tofu\n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n                \n                  14.3\n                  8\n                  360\n                  245\n                  3.21\n                  3.57\n                  15.8\n                  0\n                \n                \n                  24.4\n                  4\n                  147\n                  62\n                  3.69\n                  3.19\n                  20\n                  1\n                \n                \n                  22.8\n                  4\n                  141\n                  95\n                  3.92\n                  3.15\n                  22.9\n                  1\n                \n        \n      \n    \n\n\n\n\n\n\nGroup labels can be specified using column names with delimiters. For example, some of the columns in this data frame have group identifiers. Note that the first column does not have a group identifier, and that the last column has a group identifier but no column name.\n\ndat &lt;- data.frame(\n  id = 1, \n  A_a1 = 2, \n  A_a2 = \"3\", \n  B_b1 = 4, \n  B_b2 = 5,  \n  C_ = 6)\n\ntt(dat) |&gt; group_tt(j = \"_\")\n\n\n\n    \n\n    \n    \n      \n        \n\n \nA\nB\nC\n\n        \n              \n                id\n                a1\n                a2\n                b1\n                b2\n                \n              \n        \n        \n        \n                \n                  1\n                  2\n                  3\n                  4\n                  5\n                  6",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Groups and labels"
    ]
  },
  {
    "objectID": "vignettes/group.html#case-studies",
    "href": "vignettes/group.html#case-studies",
    "title": "Groups and labels",
    "section": "",
    "text": "In some contexts, users wish to repeat the column names to treat them as group labels. Consider this dataset:\n\nlibrary(tinytable)\nlibrary(magrittr)\n\ndat = data.frame(\n  Region = as.character(state.region),\n  State = row.names(state.x77), \n  state.x77[, 1:3]) |&gt;\n  sort_by(~ Region + State) |&gt;\n  subset(Region %in% c(\"North Central\", \"Northeast\"))\ndat = do.call(rbind, by(dat, dat$Region, head, n = 3))\nrow.names(dat) = NULL\ndat\n\n         Region         State Population Income Illiteracy\n1 North Central      Illinois      11197   5107        0.9\n2 North Central       Indiana       5313   4458        0.7\n3 North Central          Iowa       2861   4628        0.5\n4     Northeast   Connecticut       3100   5348        1.1\n5     Northeast         Maine       1058   3694        0.7\n6     Northeast Massachusetts       5814   4755        1.1\n\n\nHere, we may want to repeat the column names for every region. The group_tt() function does not support this directly, but it is easy to achieve this effect by:\n\nInsert column names as new rows in the data.\nCreat a row group variable (here: region)\nStyle the column names and group labels\n\nNormally, we would call style_tt(i = \"groupi\") to style the row groups, but here we need the actual indices to also style one row below the groups. We can use the @group_index_i slot to get the indices of the row groups.\n\nregion_names &lt;- unique(dat$Region)\nregion_indices &lt;- rep(match(region_names, dat$Region), each = 2)\n\nrowmat &lt;- do.call(rbind, lapply(region_names, function(name) {\n  rbind(\n    c(name, rep(\"\", 3)),\n    colnames(dat)[2:5]\n  )\n}))\n\nrowmat\n\n     [,1]            [,2]         [,3]     [,4]        \n[1,] \"North Central\" \"\"           \"\"       \"\"          \n[2,] \"State\"         \"Population\" \"Income\" \"Illiteracy\"\n[3,] \"Northeast\"     \"\"           \"\"       \"\"          \n[4,] \"State\"         \"Population\" \"Income\" \"Illiteracy\"\n\n\n\ntab &lt;- tt(dat[, 2:5], colnames = FALSE) |&gt;\n  group_tt(i = region_indices, j = rowmat)\n\nidx &lt;- tab@group_index_i[c(TRUE, diff(tab@group_index_i) != 1)]\n\ntab |&gt;\n  style_tt(i = idx, j = 1, align = \"c\", colspan = 4, background = \"lightgrey\", line = \"b\") |&gt;\n  style_tt(i = idx + 1, line = \"tb\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n        \n        \n        \n                \n                  North Central\n                  \n                  \n                  \n                \n                \n                  State\n                  Population\n                  Income\n                  Illiteracy\n                \n                \n                  Illinois\n                  11197\n                  5107\n                  0.9\n                \n                \n                  Indiana\n                  5313\n                  4458\n                  0.7\n                \n                \n                  Iowa\n                  2861\n                  4628\n                  0.5\n                \n                \n                  Northeast\n                  \n                  \n                  \n                \n                \n                  State\n                  Population\n                  Income\n                  Illiteracy\n                \n                \n                  Connecticut\n                  3100\n                  5348\n                  1.1\n                \n                \n                  Maine\n                  1058\n                  3694\n                  0.7\n                \n                \n                  Massachusetts\n                  5814\n                  4755\n                  1.1",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Groups and labels"
    ]
  },
  {
    "objectID": "vignettes/vignettes.html",
    "href": "vignettes/vignettes.html",
    "title": "tinytable vignettes",
    "section": "",
    "text": "The tinytable website hosts detailed documentation, as well as 10 vignettes with hundreds of examples. The vignettes are available in HTML and PDF formats.\n\nGetting started\nFormat\nStyle\nGroup\nPlots and images\nThemes\nCustomization\nNotebooks\nTips and tricks\nAlternatives\nPDF version of the vignettes"
  },
  {
    "objectID": "vignettes/format.html",
    "href": "vignettes/format.html",
    "title": "Formatting",
    "section": "",
    "text": "library(tinytable)\noptions(tinytable_tt_digits = 3)\noptions(tinytable_theme_placement_latex_float = \"H\")\nx &lt;- mtcars[1:4, 1:5]\n\n\n\nThe tt() function is minimalist; it’s inteded purpose is simply to draw nice tables. Users who want to format numbers, dates, strings, and other variables in different ways should process their data before supplying it to the tt() table-drawing function. To do so, we can use the format_tt() function supplied by the tinytable.\nIn a very simple case—such as printing 2 significant digits of all numeric variables—we can use the digits argument of tt():\n\ndat &lt;- data.frame(\n  w = c(143002.2092, 201399.181, 100188.3883),\n  x = c(1.43402, 201.399, 0.134588),\n  y = as.Date(sample(1:1000, 3), origin = \"1970-01-01\"),\n  z = c(TRUE, TRUE, FALSE)\n)\n\ntt(dat, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                w\n                x\n                y\n                z\n              \n        \n        \n        \n                \n                  143002\n                  1.43\n                  1971-03-31\n                  TRUE\n                \n                \n                  201399\n                  201.4\n                  1972-09-14\n                  TRUE\n                \n                \n                  100188\n                  0.13\n                  1971-08-23\n                  FALSE\n                \n        \n      \n    \n\n\n\nWe can get more fine-grained control over formatting by calling format_tt() after tt(), optionally by specifying the columns to format with j:\n\ntt(dat) |&gt;\n  format_tt(\n    j = 2:4,\n    digits = 1,\n    date = \"%B %d %Y\",\n    bool = tolower\n  ) |&gt;\n  format_tt(\n    j = 1,\n    digits = 2,\n    num_mark_big = \" \",\n    num_mark_dec = \",\",\n    num_zero = TRUE,\n    num_fmt = \"decimal\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                w\n                x\n                y\n                z\n              \n        \n        \n        \n                \n                  143 002,21\n                  1.4\n                  March 31 1971\n                  true\n                \n                \n                  201 399,18\n                  201.4\n                  September 14 1972\n                  true\n                \n                \n                  100 188,39\n                  0.1\n                  August 23 1971\n                  false\n                \n        \n      \n    \n\n\n\nWe can use a regular expression in j to select columns, and the ?sprintf function to format strings, numbers, and to do string interpolation (similar to the glue package, but using Base R):\n\ndat &lt;- data.frame(\n  a = c(\"Burger\", \"Halloumi\", \"Tofu\", \"Beans\"),\n  b = c(1.43202, 201.399, 0.146188, 0.0031),\n  c = c(98938272783457, 7288839482, 29111727, 93945)\n)\ntt(dat) |&gt;\n  format_tt(j = \"a\", sprintf = \"Food: %s\") |&gt;\n  format_tt(j = 2, digits = 1) |&gt;\n  format_tt(j = \"c\", digits = 2, num_suffix = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  Food: Burger\n                  1.432\n                  99T\n                \n                \n                  Food: Halloumi\n                  201.399\n                  7.3B\n                \n                \n                  Food: Tofu\n                  0.146\n                  29M\n                \n                \n                  Food: Beans\n                  0.003\n                  94K\n                \n        \n      \n    \n\n\n\nFinally, if you like the format_tt() interface, you can use it directly with numbers, vectors, or data frames:\n\nformat_tt(pi, digits = 1)\n\n[1] \"3\"\n\nformat_tt(dat, digits = 1, num_suffix = TRUE)\n\n         a     b   c\n1   Burger     1 99T\n2 Halloumi   201  7B\n3     Tofu   0.1 29M\n4    Beans 0.003 94K\n\n\n\n\n\nBy default, format_tt() formats numbers to ensure that the smallest value in a vector (column) has at least a certain number of significant digits. For example,\n\nk &lt;- data.frame(x = c(0.000123456789, 12.4356789))\ntt(k, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12.43568\n                \n        \n      \n    \n\n\n\nWe can alter this behavior to ensure to round significant digits on a per-cell basis, using the num_fmt argument in format_tt():\n\ntt(k) |&gt; format_tt(digits = 2, num_fmt = \"significant_cell\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12\n                \n        \n      \n    \n\n\n\nThe numeric formatting options in format_tt() can also be controlled using global options:\n\noptions(\"tinytable_tt_digits\" = 2)\noptions(\"tinytable_format_num_fmt\" = \"significant_cell\")\ntt(k)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12\n                \n        \n      \n    \n\n\n\n\n\n\nTo insert LaTeX-style mathematical expressions in a tinytable, we enclose the expression in dollar signs: $...$. Note that you must double backslashes in mathematical expressions in R strings.\nIn LaTeX, expression enclosed between $$ will automatically rendered as a mathematical expression.\nIn HTML, users must first load the MathJax JavaScript library to render math. This can be done in two ways. First, one can use a global option. This will insert MathJax scripts alongside every table, which is convenient, but could enter in conflict with other scripts if the user (or notebook) has already inserted MathJax code:\noptions(tinytable_html_mathjax = TRUE)\nAlternatively, users can load MathJax explicitly in their HTML file. In a Quarto notebook, this can be done by using a code chunk like this:\n```{=html}\n&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n&lt;/script&gt;\n```\nThen, we can do:\n\ndat &lt;- data.frame(Math = c(\n  \"$x^2 + y^2 = z^2$\",\n  \"$\\\\frac{1}{2}$\"\n))\ntt(dat) |&gt; style_tt(j = 1, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Math\n              \n        \n        \n        \n                \n                  $x^2 + y^2 = z^2$\n                \n                \n                  $\\frac{1}{2}$\n                \n        \n      \n    \n\n\n\nTo avoid inserting $...$ in every cell manually, we can use the math argument of format_tt():\n\noptions(tinytable_html_mathjax = TRUE)\n\ndat &lt;- data.frame(\"y^2 = e^x\" = c(-2, -pi), check.names = FALSE)\n\ntt(dat, digits = 3) |&gt; format_tt(math = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                $y^2 = e^x$\n              \n        \n        \n        \n                \n                  $-2$\n                \n                \n                  $-3.14$\n                \n        \n      \n    \n\n\n\nNote that math rendering may not work automatically in Rmarkdown document. See the notebooks vignette for advice on Rmarkdown documents.\n\n\n\nMissing values can be replaced by a custom string using the replace argument:\n\ntab &lt;- data.frame(a = c(NA, 1, 2), b = c(3, NA, 5))\n\ntt(tab)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  NA\n                  3\n                \n                \n                  1\n                  NA\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\ntt(tab) |&gt; format_tt(replace = \"-\")\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  -\n                  3\n                \n                \n                  1\n                  -\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\n\nWarning: When using quarto=TRUE, the dash may be interpreted as the start of a list.\nWe can also specify multiple value replacements at once using a named list of vectors:\n\ntmp &lt;- data.frame(x = 1:5, y = c(pi, NA, NaN, -Inf, Inf))\ndict &lt;- list(\"-\" = c(NA, NaN), \"-∞\" = -Inf, \"∞\" = Inf)\ntt(tmp) |&gt; format_tt(replace = dict, digits = 2)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n                y\n              \n        \n        \n        \n                \n                  1\n                  3.1\n                \n                \n                  2\n                  -\n                \n                \n                  3\n                  -\n                \n                \n                  4\n                  -∞\n                \n                \n                  5\n                  ∞\n                \n        \n      \n    \n\n\n\n\n\n\nLaTeX and HTML use special characters to indicate strings which should be interpreted rather than displayed as text. For example, including underscores or dollar signs in LaTeX can cause compilation errors in some documents. To display those special characters, we need to substitute or escape them with backslashes, depending on the output format. The escape argument of format_tt() can be used to do this automatically:\n\ndat &lt;- data.frame(\n  \"LaTeX\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\"),\n  \"HTML\" = c(\"&lt;br&gt;\", \"&lt;sup&gt;4&lt;/sup&gt;\", \"&lt;emph&gt;blah&lt;/emph&gt;\"),\n  \"Typst\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\")\n)\n\ntt(dat) |&gt; format_tt(escape = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n                Typst\n              \n        \n        \n        \n                \n                  Dollars $\n                  &lt;br&gt;\n                  Dollars $\n                \n                \n                  Percent %\n                  &lt;sup&gt;4&lt;/sup&gt;\n                  Percent %\n                \n                \n                  Underscore _\n                  &lt;emph&gt;blah&lt;/emph&gt;\n                  Underscore _\n                \n        \n      \n    \n\n\n\nWhen applied to a tt() table, format_tt() will determine the type of escaping to do automatically. When applied to a string or vector, we must specify the type of escaping to apply:\n\nformat_tt(\"_ Dollars $\", escape = \"latex\")\n\n[1] \"\\\\_ Dollars \\\\$\"\n\n\n\n\n\nMarkdown can be rendered in cells by using the markdown argument of the format_tt() function (note: this requires installing the markdown as an optional dependency).\n\ndat &lt;- data.frame(markdown = c(\n  \"This is _italic_ text.\",\n  \"This sentence ends with a superscript.^2^\"\n))\n\ntt(dat) |&gt;\n  format_tt(j = 1, markdown = TRUE) |&gt;\n  style_tt(j = 1, align = \"c\")\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                markdown\n              \n        \n        \n        \n                \n                  This is italic text.\n                \n                \n                  This sentence ends with a superscript.2\n                \n        \n      \n    \n\n\n\nMarkdown syntax can be particularly useful when formatting URLs in a table:\n\ndat &lt;- data.frame(\n  `Package (link)` = c(\n    \"[`marginaleffects`](https://www.marginaleffects.com/)\",\n    \"[`modelsummary`](https://www.modelsummary.com/)\",\n    \"[`tinytable`](https://vincentarelbundock.github.io/tinytable/)\",\n    \"[`countrycode`](https://vincentarelbundock.github.io/countrycode/)\",\n    \"[`WDI`](https://vincentarelbundock.github.io/WDI/)\",\n    \"[`softbib`](https://vincentarelbundock.github.io/softbib/)\",\n    \"[`tinysnapshot`](https://vincentarelbundock.github.io/tinysnapshot/)\",\n    \"[`altdoc`](https://etiennebacher.github.io/altdoc/)\",\n    \"[`tinyplot`](https://grantmcdermott.com/tinyplot/)\",\n    \"[`parameters`](https://easystats.github.io/parameters/)\",\n    \"[`insight`](https://easystats.github.io/insight/)\"\n  ),\n  Purpose = c(\n    \"Interpreting statistical models\",\n    \"Data and model summaries\",\n    \"Draw beautiful tables easily\",\n    \"Convert country codes and names\",\n    \"Download data from the World Bank\",\n    \"Software bibliographies in R\",\n    \"Snapshots for unit tests using `tinytest`\",\n    \"Create documentation website for R packages\",\n    \"Extension of base R plot functions\",\n    \"Extract from model objects\",\n    \"Extract information from model objects\"\n  ),\n  check.names = FALSE\n)\n\ntt(dat) |&gt; format_tt(j = 1, markdown = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      Vincent sometimes contributes to these R packages.\n        \n        \n              \n                Package (link)\n                Purpose\n              \n        \n        \n        \n                \n                  marginaleffects\n                  Interpreting statistical models\n                \n                \n                  modelsummary\n                  Data and model summaries\n                \n                \n                  tinytable\n                  Draw beautiful tables easily\n                \n                \n                  countrycode\n                  Convert country codes and names\n                \n                \n                  WDI\n                  Download data from the World Bank\n                \n                \n                  softbib\n                  Software bibliographies in R\n                \n                \n                  tinysnapshot\n                  Snapshots for unit tests using `tinytest`\n                \n                \n                  altdoc\n                  Create documentation website for R packages\n                \n                \n                  tinyplot\n                  Extension of base R plot functions\n                \n                \n                  parameters\n                  Extract from model objects\n                \n                \n                  insight\n                  Extract information from model objects\n                \n        \n      \n    \n\n\n\n\n\n\nOn top of the built-in features of format_tt, a custom formatting function can be specified via the fn argument. The fn argument takes a function that accepts a single vector and returns a string (or something that coerces to a string like a number).\n\ntt(x) |&gt;\n  format_tt(j = \"mpg\", fn = function(x) paste(x, \"mi/gal\")) |&gt;\n  format_tt(j = \"drat\", fn = \\(x) signif(x, 2))\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21 mi/gal\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21 mi/gal\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8 mi/gal\n                  4\n                  108\n                  93\n                  3.8\n                \n                \n                  21.4 mi/gal\n                  6\n                  258\n                  110\n                  3.1\n                \n        \n      \n    \n\n\n\nFor example, the scales package which is used internally by ggplot2 provides a bunch of useful tools for formatting (e.g. dates, numbers, percents, logs, currencies, etc.). The label_*() functions can be passed to the fn argument.\nNote that we call format_tt(escape = TRUE) at the end of the pipeline because the column names and cells include characters that need to be escaped in LaTeX: _, %, and $. This last call is superfluous in HTML.\n\nthumbdrives &lt;- data.frame(\n  date_lookup = as.Date(c(\"2024-01-15\", \"2024-01-18\", \"2024-01-14\", \"2024-01-16\")),\n  price = c(18.49, 19.99, 24.99, 24.99),\n  price_rank = c(1, 2, 3, 3),\n  memory = c(16e9, 12e9, 10e9, 8e9),\n  speed_benchmark = c(0.6, 0.73, 0.82, 0.99)\n)\n\ntt(thumbdrives) |&gt;\n  format_tt(j = 1, fn = scales::label_date(\"%B %d %Y\")) |&gt;\n  format_tt(j = 2, fn = scales::label_currency()) |&gt;\n  format_tt(j = 3, fn = scales::label_ordinal()) |&gt;\n  format_tt(j = 4, fn = scales::label_bytes()) |&gt;\n  format_tt(j = 5, fn = scales::label_percent()) |&gt;\n  format_tt(escape = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                date_lookup\n                price\n                price_rank\n                memory\n                speed_benchmark\n              \n        \n        \n        \n                \n                  January 15 2024\n                  $18.49\n                  1st\n                  16 GB\n                  60%\n                \n                \n                  January 18 2024\n                  $19.99\n                  2nd\n                  12 GB\n                  73%\n                \n                \n                  January 14 2024\n                  $24.99\n                  3rd\n                  10 GB\n                  82%\n                \n                \n                  January 16 2024\n                  $24.99\n                  3rd\n                  8 GB\n                  99%\n                \n        \n      \n    \n\n\n\n\n\n\nThe format_tt() function can also be used to format captions, notes, and column names.\n\ntab &lt;- data.frame(\n  \"A_B\" = rnorm(5), \n  \"B_C\" = rnorm(5), \n  \"C_D\" = rnorm(5))\n\ntt(tab, digits = 2, notes = \"_Source_: Simulated data.\") |&gt;\n  group_tt(i = list(\"Down\" = 1, \"Up\" = 3)) |&gt;\n  format_tt(\"colnames\", fn = \\(x) sub(\"_\", \" / \", x)) |&gt;\n  format_tt(\"notes\", markdown = TRUE) |&gt;\n  format_tt(\"groupi\", replace = list(\"↓\" = \"Down\", \"↑\" = \"Up\"))\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                A / B\n                B / C\n                C / D\n              \n        \n        Source: Simulated data.\n        \n                \n                  ↓\n                  \n                  \n                \n                \n                  -0.836\n                  -0.166\n                  -0.33\n                \n                \n                  -0.071\n                  -0.224\n                  -0.89\n                \n                \n                  ↑\n                  \n                  \n                \n                \n                  -1.28\n                  0.049\n                  -0.72\n                \n                \n                  0.252\n                  0.876\n                  0.8\n                \n                \n                  -1.086\n                  -0.051\n                  0.12",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#numbers-dates-strings-etc.",
    "href": "vignettes/format.html#numbers-dates-strings-etc.",
    "title": "Formatting",
    "section": "",
    "text": "The tt() function is minimalist; it’s inteded purpose is simply to draw nice tables. Users who want to format numbers, dates, strings, and other variables in different ways should process their data before supplying it to the tt() table-drawing function. To do so, we can use the format_tt() function supplied by the tinytable.\nIn a very simple case—such as printing 2 significant digits of all numeric variables—we can use the digits argument of tt():\n\ndat &lt;- data.frame(\n  w = c(143002.2092, 201399.181, 100188.3883),\n  x = c(1.43402, 201.399, 0.134588),\n  y = as.Date(sample(1:1000, 3), origin = \"1970-01-01\"),\n  z = c(TRUE, TRUE, FALSE)\n)\n\ntt(dat, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                w\n                x\n                y\n                z\n              \n        \n        \n        \n                \n                  143002\n                  1.43\n                  1971-03-31\n                  TRUE\n                \n                \n                  201399\n                  201.4\n                  1972-09-14\n                  TRUE\n                \n                \n                  100188\n                  0.13\n                  1971-08-23\n                  FALSE\n                \n        \n      \n    \n\n\n\nWe can get more fine-grained control over formatting by calling format_tt() after tt(), optionally by specifying the columns to format with j:\n\ntt(dat) |&gt;\n  format_tt(\n    j = 2:4,\n    digits = 1,\n    date = \"%B %d %Y\",\n    bool = tolower\n  ) |&gt;\n  format_tt(\n    j = 1,\n    digits = 2,\n    num_mark_big = \" \",\n    num_mark_dec = \",\",\n    num_zero = TRUE,\n    num_fmt = \"decimal\"\n  )\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                w\n                x\n                y\n                z\n              \n        \n        \n        \n                \n                  143 002,21\n                  1.4\n                  March 31 1971\n                  true\n                \n                \n                  201 399,18\n                  201.4\n                  September 14 1972\n                  true\n                \n                \n                  100 188,39\n                  0.1\n                  August 23 1971\n                  false\n                \n        \n      \n    \n\n\n\nWe can use a regular expression in j to select columns, and the ?sprintf function to format strings, numbers, and to do string interpolation (similar to the glue package, but using Base R):\n\ndat &lt;- data.frame(\n  a = c(\"Burger\", \"Halloumi\", \"Tofu\", \"Beans\"),\n  b = c(1.43202, 201.399, 0.146188, 0.0031),\n  c = c(98938272783457, 7288839482, 29111727, 93945)\n)\ntt(dat) |&gt;\n  format_tt(j = \"a\", sprintf = \"Food: %s\") |&gt;\n  format_tt(j = 2, digits = 1) |&gt;\n  format_tt(j = \"c\", digits = 2, num_suffix = TRUE)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n                c\n              \n        \n        \n        \n                \n                  Food: Burger\n                  1.432\n                  99T\n                \n                \n                  Food: Halloumi\n                  201.399\n                  7.3B\n                \n                \n                  Food: Tofu\n                  0.146\n                  29M\n                \n                \n                  Food: Beans\n                  0.003\n                  94K\n                \n        \n      \n    \n\n\n\nFinally, if you like the format_tt() interface, you can use it directly with numbers, vectors, or data frames:\n\nformat_tt(pi, digits = 1)\n\n[1] \"3\"\n\nformat_tt(dat, digits = 1, num_suffix = TRUE)\n\n         a     b   c\n1   Burger     1 99T\n2 Halloumi   201  7B\n3     Tofu   0.1 29M\n4    Beans 0.003 94K",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#significant-digits-and-decimals",
    "href": "vignettes/format.html#significant-digits-and-decimals",
    "title": "Formatting",
    "section": "",
    "text": "By default, format_tt() formats numbers to ensure that the smallest value in a vector (column) has at least a certain number of significant digits. For example,\n\nk &lt;- data.frame(x = c(0.000123456789, 12.4356789))\ntt(k, digits = 2)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12.43568\n                \n        \n      \n    \n\n\n\nWe can alter this behavior to ensure to round significant digits on a per-cell basis, using the num_fmt argument in format_tt():\n\ntt(k) |&gt; format_tt(digits = 2, num_fmt = \"significant_cell\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12\n                \n        \n      \n    \n\n\n\nThe numeric formatting options in format_tt() can also be controlled using global options:\n\noptions(\"tinytable_tt_digits\" = 2)\noptions(\"tinytable_format_num_fmt\" = \"significant_cell\")\ntt(k)\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n              \n        \n        \n        \n                \n                  0.00012\n                \n                \n                  12",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#math",
    "href": "vignettes/format.html#math",
    "title": "Formatting",
    "section": "",
    "text": "To insert LaTeX-style mathematical expressions in a tinytable, we enclose the expression in dollar signs: $...$. Note that you must double backslashes in mathematical expressions in R strings.\nIn LaTeX, expression enclosed between $$ will automatically rendered as a mathematical expression.\nIn HTML, users must first load the MathJax JavaScript library to render math. This can be done in two ways. First, one can use a global option. This will insert MathJax scripts alongside every table, which is convenient, but could enter in conflict with other scripts if the user (or notebook) has already inserted MathJax code:\noptions(tinytable_html_mathjax = TRUE)\nAlternatively, users can load MathJax explicitly in their HTML file. In a Quarto notebook, this can be done by using a code chunk like this:\n```{=html}\n&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]\n  },\n  svg: {\n    fontCache: 'global'\n  }\n};\n&lt;/script&gt;\n```\nThen, we can do:\n\ndat &lt;- data.frame(Math = c(\n  \"$x^2 + y^2 = z^2$\",\n  \"$\\\\frac{1}{2}$\"\n))\ntt(dat) |&gt; style_tt(j = 1, align = \"c\")\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                Math\n              \n        \n        \n        \n                \n                  $x^2 + y^2 = z^2$\n                \n                \n                  $\\frac{1}{2}$\n                \n        \n      \n    \n\n\n\nTo avoid inserting $...$ in every cell manually, we can use the math argument of format_tt():\n\noptions(tinytable_html_mathjax = TRUE)\n\ndat &lt;- data.frame(\"y^2 = e^x\" = c(-2, -pi), check.names = FALSE)\n\ntt(dat, digits = 3) |&gt; format_tt(math = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                $y^2 = e^x$\n              \n        \n        \n        \n                \n                  $-2$\n                \n                \n                  $-3.14$\n                \n        \n      \n    \n\n\n\nNote that math rendering may not work automatically in Rmarkdown document. See the notebooks vignette for advice on Rmarkdown documents.",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#replacement",
    "href": "vignettes/format.html#replacement",
    "title": "Formatting",
    "section": "",
    "text": "Missing values can be replaced by a custom string using the replace argument:\n\ntab &lt;- data.frame(a = c(NA, 1, 2), b = c(3, NA, 5))\n\ntt(tab)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  NA\n                  3\n                \n                \n                  1\n                  NA\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\ntt(tab) |&gt; format_tt(replace = \"-\")\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                a\n                b\n              \n        \n        \n        \n                \n                  -\n                  3\n                \n                \n                  1\n                  -\n                \n                \n                  2\n                  5\n                \n        \n      \n    \n\n\n\nWarning: When using quarto=TRUE, the dash may be interpreted as the start of a list.\nWe can also specify multiple value replacements at once using a named list of vectors:\n\ntmp &lt;- data.frame(x = 1:5, y = c(pi, NA, NaN, -Inf, Inf))\ndict &lt;- list(\"-\" = c(NA, NaN), \"-∞\" = -Inf, \"∞\" = Inf)\ntt(tmp) |&gt; format_tt(replace = dict, digits = 2)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                x\n                y\n              \n        \n        \n        \n                \n                  1\n                  3.1\n                \n                \n                  2\n                  -\n                \n                \n                  3\n                  -\n                \n                \n                  4\n                  -∞\n                \n                \n                  5\n                  ∞",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#escape-special-characters",
    "href": "vignettes/format.html#escape-special-characters",
    "title": "Formatting",
    "section": "",
    "text": "LaTeX and HTML use special characters to indicate strings which should be interpreted rather than displayed as text. For example, including underscores or dollar signs in LaTeX can cause compilation errors in some documents. To display those special characters, we need to substitute or escape them with backslashes, depending on the output format. The escape argument of format_tt() can be used to do this automatically:\n\ndat &lt;- data.frame(\n  \"LaTeX\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\"),\n  \"HTML\" = c(\"&lt;br&gt;\", \"&lt;sup&gt;4&lt;/sup&gt;\", \"&lt;emph&gt;blah&lt;/emph&gt;\"),\n  \"Typst\" = c(\"Dollars $\", \"Percent %\", \"Underscore _\")\n)\n\ntt(dat) |&gt; format_tt(escape = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                LaTeX\n                HTML\n                Typst\n              \n        \n        \n        \n                \n                  Dollars $\n                  &lt;br&gt;\n                  Dollars $\n                \n                \n                  Percent %\n                  &lt;sup&gt;4&lt;/sup&gt;\n                  Percent %\n                \n                \n                  Underscore _\n                  &lt;emph&gt;blah&lt;/emph&gt;\n                  Underscore _\n                \n        \n      \n    \n\n\n\nWhen applied to a tt() table, format_tt() will determine the type of escaping to do automatically. When applied to a string or vector, we must specify the type of escaping to apply:\n\nformat_tt(\"_ Dollars $\", escape = \"latex\")\n\n[1] \"\\\\_ Dollars \\\\$\"",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#markdown-1",
    "href": "vignettes/format.html#markdown-1",
    "title": "Formatting",
    "section": "",
    "text": "Markdown can be rendered in cells by using the markdown argument of the format_tt() function (note: this requires installing the markdown as an optional dependency).\n\ndat &lt;- data.frame(markdown = c(\n  \"This is _italic_ text.\",\n  \"This sentence ends with a superscript.^2^\"\n))\n\ntt(dat) |&gt;\n  format_tt(j = 1, markdown = TRUE) |&gt;\n  style_tt(j = 1, align = \"c\")\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                markdown\n              \n        \n        \n        \n                \n                  This is italic text.\n                \n                \n                  This sentence ends with a superscript.2\n                \n        \n      \n    \n\n\n\nMarkdown syntax can be particularly useful when formatting URLs in a table:\n\ndat &lt;- data.frame(\n  `Package (link)` = c(\n    \"[`marginaleffects`](https://www.marginaleffects.com/)\",\n    \"[`modelsummary`](https://www.modelsummary.com/)\",\n    \"[`tinytable`](https://vincentarelbundock.github.io/tinytable/)\",\n    \"[`countrycode`](https://vincentarelbundock.github.io/countrycode/)\",\n    \"[`WDI`](https://vincentarelbundock.github.io/WDI/)\",\n    \"[`softbib`](https://vincentarelbundock.github.io/softbib/)\",\n    \"[`tinysnapshot`](https://vincentarelbundock.github.io/tinysnapshot/)\",\n    \"[`altdoc`](https://etiennebacher.github.io/altdoc/)\",\n    \"[`tinyplot`](https://grantmcdermott.com/tinyplot/)\",\n    \"[`parameters`](https://easystats.github.io/parameters/)\",\n    \"[`insight`](https://easystats.github.io/insight/)\"\n  ),\n  Purpose = c(\n    \"Interpreting statistical models\",\n    \"Data and model summaries\",\n    \"Draw beautiful tables easily\",\n    \"Convert country codes and names\",\n    \"Download data from the World Bank\",\n    \"Software bibliographies in R\",\n    \"Snapshots for unit tests using `tinytest`\",\n    \"Create documentation website for R packages\",\n    \"Extension of base R plot functions\",\n    \"Extract from model objects\",\n    \"Extract information from model objects\"\n  ),\n  check.names = FALSE\n)\n\ntt(dat) |&gt; format_tt(j = 1, markdown = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      Vincent sometimes contributes to these R packages.\n        \n        \n              \n                Package (link)\n                Purpose\n              \n        \n        \n        \n                \n                  marginaleffects\n                  Interpreting statistical models\n                \n                \n                  modelsummary\n                  Data and model summaries\n                \n                \n                  tinytable\n                  Draw beautiful tables easily\n                \n                \n                  countrycode\n                  Convert country codes and names\n                \n                \n                  WDI\n                  Download data from the World Bank\n                \n                \n                  softbib\n                  Software bibliographies in R\n                \n                \n                  tinysnapshot\n                  Snapshots for unit tests using `tinytest`\n                \n                \n                  altdoc\n                  Create documentation website for R packages\n                \n                \n                  tinyplot\n                  Extension of base R plot functions\n                \n                \n                  parameters\n                  Extract from model objects\n                \n                \n                  insight\n                  Extract information from model objects",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#custom-functions",
    "href": "vignettes/format.html#custom-functions",
    "title": "Formatting",
    "section": "",
    "text": "On top of the built-in features of format_tt, a custom formatting function can be specified via the fn argument. The fn argument takes a function that accepts a single vector and returns a string (or something that coerces to a string like a number).\n\ntt(x) |&gt;\n  format_tt(j = \"mpg\", fn = function(x) paste(x, \"mi/gal\")) |&gt;\n  format_tt(j = \"drat\", fn = \\(x) signif(x, 2))\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n              \n        \n        \n        \n                \n                  21 mi/gal\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  21 mi/gal\n                  6\n                  160\n                  110\n                  3.9\n                \n                \n                  22.8 mi/gal\n                  4\n                  108\n                  93\n                  3.8\n                \n                \n                  21.4 mi/gal\n                  6\n                  258\n                  110\n                  3.1\n                \n        \n      \n    \n\n\n\nFor example, the scales package which is used internally by ggplot2 provides a bunch of useful tools for formatting (e.g. dates, numbers, percents, logs, currencies, etc.). The label_*() functions can be passed to the fn argument.\nNote that we call format_tt(escape = TRUE) at the end of the pipeline because the column names and cells include characters that need to be escaped in LaTeX: _, %, and $. This last call is superfluous in HTML.\n\nthumbdrives &lt;- data.frame(\n  date_lookup = as.Date(c(\"2024-01-15\", \"2024-01-18\", \"2024-01-14\", \"2024-01-16\")),\n  price = c(18.49, 19.99, 24.99, 24.99),\n  price_rank = c(1, 2, 3, 3),\n  memory = c(16e9, 12e9, 10e9, 8e9),\n  speed_benchmark = c(0.6, 0.73, 0.82, 0.99)\n)\n\ntt(thumbdrives) |&gt;\n  format_tt(j = 1, fn = scales::label_date(\"%B %d %Y\")) |&gt;\n  format_tt(j = 2, fn = scales::label_currency()) |&gt;\n  format_tt(j = 3, fn = scales::label_ordinal()) |&gt;\n  format_tt(j = 4, fn = scales::label_bytes()) |&gt;\n  format_tt(j = 5, fn = scales::label_percent()) |&gt;\n  format_tt(escape = TRUE)\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                date_lookup\n                price\n                price_rank\n                memory\n                speed_benchmark\n              \n        \n        \n        \n                \n                  January 15 2024\n                  $18.49\n                  1st\n                  16 GB\n                  60%\n                \n                \n                  January 18 2024\n                  $19.99\n                  2nd\n                  12 GB\n                  73%\n                \n                \n                  January 14 2024\n                  $24.99\n                  3rd\n                  10 GB\n                  82%\n                \n                \n                  January 16 2024\n                  $24.99\n                  3rd\n                  8 GB\n                  99%",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "vignettes/format.html#captions-notes-groups-and-column-names",
    "href": "vignettes/format.html#captions-notes-groups-and-column-names",
    "title": "Formatting",
    "section": "",
    "text": "The format_tt() function can also be used to format captions, notes, and column names.\n\ntab &lt;- data.frame(\n  \"A_B\" = rnorm(5), \n  \"B_C\" = rnorm(5), \n  \"C_D\" = rnorm(5))\n\ntt(tab, digits = 2, notes = \"_Source_: Simulated data.\") |&gt;\n  group_tt(i = list(\"Down\" = 1, \"Up\" = 3)) |&gt;\n  format_tt(\"colnames\", fn = \\(x) sub(\"_\", \" / \", x)) |&gt;\n  format_tt(\"notes\", markdown = TRUE) |&gt;\n  format_tt(\"groupi\", replace = list(\"↓\" = \"Down\", \"↑\" = \"Up\"))\n\n\n\n    \n    \n    \n    \n\n    \n\n    \n    \n      \n        \n        \n              \n                A / B\n                B / C\n                C / D\n              \n        \n        Source: Simulated data.\n        \n                \n                  ↓\n                  \n                  \n                \n                \n                  -0.836\n                  -0.166\n                  -0.33\n                \n                \n                  -0.071\n                  -0.224\n                  -0.89\n                \n                \n                  ↑\n                  \n                  \n                \n                \n                  -1.28\n                  0.049\n                  -0.72\n                \n                \n                  0.252\n                  0.876\n                  0.8\n                \n                \n                  -1.086\n                  -0.051\n                  0.12",
    "crumbs": [
      "Tutorial (PDF)",
      "Tutorial",
      "Format"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "GNU General Public License",
    "section": "",
    "text": "Version 3, 29 June 2007\nCopyright © 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow.\n\n\n\n\n\n“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS\n\n\n\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.",
    "crumbs": [
      "Tutorial (PDF)",
      "License"
    ]
  },
  {
    "objectID": "LICENSE.html#preamble",
    "href": "LICENSE.html#preamble",
    "title": "GNU General Public License",
    "section": "",
    "text": "The GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow.",
    "crumbs": [
      "Tutorial (PDF)",
      "License"
    ]
  },
  {
    "objectID": "LICENSE.html#terms-and-conditions",
    "href": "LICENSE.html#terms-and-conditions",
    "title": "GNU General Public License",
    "section": "",
    "text": "“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS",
    "crumbs": [
      "Tutorial (PDF)",
      "License"
    ]
  },
  {
    "objectID": "LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "href": "LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "title": "GNU General Public License",
    "section": "",
    "text": "If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.",
    "crumbs": [
      "Tutorial (PDF)",
      "License"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "tinytable",
    "section": "What?",
    "text": "What?\ntinytable is a small but powerful R package to draw beautiful tables in a variety of formats: HTML, LaTeX, Word1, PDF, PNG, Markdown, and Typst. The user interface is minimalist and easy to learn, while giving users access to powerful frameworks to create endlessly customizable tables.\nhttps://vincentarelbundock.github.io/tinytable/"
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "tinytable",
    "section": "Why?",
    "text": "Why?\nThere are already many excellent table-drawing packages in the R ecosystem. Why release a new one? As the maintainer of modelsummary, I needed a table-drawing package which was:\n\nSimple: Streamlined, consistent, and uncluttered user interface, with few functions to learn.\nFlexible: Expressive frameworks to customize tables in HTML and LaTeX formats.2\nZero-dependency: Avoid importing any other R package.3\nConcise: Draw beautiful tables without typing a lot of code.\nSafe: User inputs are checked thoroughly, and informative errors are returned early.\nMaintainable: A small code base which does not rely on too many complex regular expressions.\nReadable: HTML and LaTeX code should be human-readable and editable.\nFree: This package will always be free. Tiny tables for a tiny price!\n\nTo achieve these goals, the design philosophy of tinytable rests on three pillars:\n\nData is separate from style. The code that this package creates keeps the content of a table separate from the style sheet that applies to its cells. This is in contrast to other R packages that modify the actual text in each cell to style it. Keeping data and style separate allows tinytable to create human-readable files which are easy to edit, debug, and extend. It also enables developers to keep a simpler code base, with minimal use of messy regular expressions.\nFlexibility. Users’ needs are extremely varied, and a table-drawing package must be flexible enough to accomodate different ideas. To achieve this, tinytable builds on battle-tested and versatile frameworks like Bootstrap for HTML and tabularray for LaTeX.\nLightweight. Some of the most popular table-drawing packages in the R ecosystem are very heavy: A single library() call can sometimes load upwards of 65 R packages. In contrast, tinytable imports zero 3rd party R package by default."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "tinytable",
    "section": "Installation",
    "text": "Installation\ntinytable is a relatively new package with rapid development. If you want to benefit from the latest features—showcased on the package website—you should install from R-Universe:\ninstall.packages('tinytable', repos = c('https://vincentarelbundock.r-universe.dev', 'https://cloud.r-project.org'))\nAlternatively, you can install it from CRAN:\ninstall.packages(\"tinytable\")\nRestart R completely for the installation to take effect."
  },
  {
    "objectID": "index.html#first-steps",
    "href": "index.html#first-steps",
    "title": "tinytable",
    "section": "First steps",
    "text": "First steps\nThe best feature of tinytable is its simplicity. To draw a table, simply call the tt() function with your data frame as the first argument:\nlibrary(tinytable)\n\nx &lt;- mtcars[1:5, 1:5]\n\ntt(x)\n\n \nMore complex tables can be created by calling arguments and chaining functions together. In the next example, we add a caption, footnote, colors, styles, and spanning column headers:\ncap &lt;- \"A simple \\\\texttt{tinytable} example.\"\nnot &lt;- \"Nullam odio est, ullamcorper scelerisque lectus a, eleifend luctus nisl. Etiam ullamcorper, nibh vel interdum auctor, odio nulla mollis tortor, vel fringilla ante quam quis est.\"\n\ntt(x, \n   caption = cap, \n   notes = not, \n   width = .5) |&gt; \n style_tt(\n   i = 1:3,\n   j = 1:2,\n   background = \"teal\",\n   color = \"white\",\n   bold = TRUE) |&gt;\n group_tt(\n   j = list(\"Halloumi\" = 1:2, \"Tofu\" = 4:5))"
  },
  {
    "objectID": "index.html#tutorial",
    "href": "index.html#tutorial",
    "title": "tinytable",
    "section": "Tutorial",
    "text": "Tutorial\nThe tinytable 0.11.0 tutorial will take you much further. It is available in two formats:\n\nTutorial (PDF)\nTutorial (HTML):\n\nTiny tables\nFormat\nStyle\nGroup labels\nPlots and images\nThemes\nNotebooks (Quarto, Rmarkdown, Bookdown, etc.)\nCustomization\nTips and trips\nAlternatives"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "tinytable",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nStyling options in Word are somewhat limited. See the FAQ page and the style_tt() documentation for details.↩︎\nOther formats like Markdown and Typst are also available, but less flexible.↩︎\nSome extra packages can be imported to access specific functionality, such as integration with Quarto, inserting ggplot2 objects as inline plots, and saving tables to PNG images or PDF documents.↩︎"
  }
]