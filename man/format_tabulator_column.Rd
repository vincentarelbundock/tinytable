% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabulator_helpers.R
\name{format_tabulator_column}
\alias{format_tabulator_column}
\title{Format tabulator column based on data type}
\usage{
format_tabulator_column(
  x,
  j,
  digits = get_option("tinytable_format_digits", default = NULL),
  num_fmt = get_option("tinytable_format_num_fmt", default = "significant"),
  num_zero = get_option("tinytable_format_num_zero", default = FALSE),
  num_suffix = get_option("tinytable_format_num_suffix", default = FALSE),
  num_mark_big = get_option("tinytable_format_num_mark_big", default = ""),
  num_mark_dec = get_option("tinytable_format_num_mark_dec", default =
    getOption("OutDec", default = ".")),
  date = get_option("tinytable_format_date", default = NULL),
  bool = get_option("tinytable_format_bool", default = NULL),
  math = get_option("tinytable_format_math", default = FALSE),
  other = get_option("tinytable_format_other", default = NULL),
  replace = get_option("tinytable_format_replace", default = FALSE),
  escape = get_option("tinytable_format_escape", default = FALSE),
  markdown = get_option("tinytable_format_markdown", default = FALSE),
  quarto = get_option("tinytable_format_quarto", default = FALSE),
  fn = get_option("tinytable_format_fn", default = NULL),
  sprintf = get_option("tinytable_format_sprintf", default = NULL)
)
}
\arguments{
\item{x}{A tinytable object created by \code{tt()}.}

\item{j}{Column index or name to format. Must be a single column.}

\item{digits}{Number of significant digits or decimal places.}

\item{num_fmt}{The format for numeric values; one of 'significant', 'significant_cell', 'decimal', or 'scientific'.}

\item{num_zero}{Logical; if TRUE, trailing zeros are kept in "decimal" format (but not in "significant" format).}

\item{num_suffix}{Logical; if TRUE display short numbers with \code{digits} significant digits and K (thousands), M (millions), B (billions), or T (trillions) suffixes.}

\item{num_mark_big}{Character to use as a thousands separator.}

\item{num_mark_dec}{Decimal mark character. Default is the global option 'OutDec'.}

\item{date}{A string passed to the \code{format()} function, such as "\%Y-\%m-\%d". Exception: for tabulator output, this is used directly as the Tabulator.js date format string (e.g., "MM/DD/YYYY"). Note: R and Tabulator.js use different date format specifications.}

\item{bool}{A function to format logical columns. Defaults to title case.}

\item{math}{Logical. If TRUE, wrap cell values in math mode \verb{$..$}. This is useful for LaTeX output or with HTML MathJax \code{options(tinytable_html_mathjax=TRUE)}.}

\item{other}{A function to format columns of other types. Defaults to \code{as.character()}.}

\item{replace}{Logical, String or Named list of vectors
\itemize{
\item TRUE: Replace \code{NA} and \code{NaN} by an empty string.
\item FALSE: Print \code{NA} and \code{NaN} as strings.
\item String: Replace \code{NA} and \code{NaN} entries by the user-supplied string.
\item Named list: Replace matching elements of the vectors in the list by theirs names. Example:
\itemize{
\item \code{list("-" = c(NA, NaN), "Tiny" = -Inf, "Massive" = Inf)}
}
}}

\item{escape}{Logical or "latex" or "html". If TRUE, escape special characters to display them as text in the format of the output of a \code{tt()} table.
\itemize{
\item If \code{i} and \code{j} are both \code{NULL}, escape all cells, column names, caption, notes, and spanning labels created by \code{group_tt()}.
}}

\item{markdown}{Logical; if TRUE, render markdown syntax in cells. Ex: \verb{_italicized text_} is properly italicized in HTML and LaTeX.}

\item{quarto}{Logical. Enable Quarto data processing and wrap cell content in a \code{data-qmd} span (HTML) or \verb{\\QuartoMarkdownBase64\{\}} macro (LaTeX). See warnings in the Global Options section below.}

\item{fn}{Function for custom formatting. Accepts a vector and returns a character vector of the same length.}

\item{sprintf}{String passed to the \code{?sprintf} function to format numbers or interpolate strings with a user-defined pattern (similar to the \code{glue} package, but using Base R).}
}
\value{
A character string containing complete JavaScript column definition
for Tabulator.js including title, field, formatter, and formatterParams
}
\description{
This function generates Tabulator.js column formatter configurations based on
the data type of a column and the same formatting arguments as \code{format_tt()}.
It inspects the data class of column j in x@data and returns appropriate
formatter and formatterParams objects for Tabulator.js.
}
\examples{
\dontrun{
dat <- data.frame(
  price = c(12.34, 56.78, 90.12),
  count = c(1L, 2L, 3L),
  active = c(TRUE, FALSE, TRUE),
  date = as.Date(c("2023-01-01", "2023-01-02", "2023-01-03"))
)
x <- tt(dat, output = "tabulator")

# Format numeric column with 3 decimal places
format_tabulator_column(x, j = "price", digits = 3)

# Format integer column as money
format_tabulator_column(x, j = "count", num_mark_big = ",")

# Format date column
format_tabulator_column(x, j = "date", date = "\%m/\%d/\%Y")
}

}
